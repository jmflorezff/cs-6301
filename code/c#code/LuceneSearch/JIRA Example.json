{"expand":"schema,names","startAt":0,"maxResults":100,"total":6867,"issues":[{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12944600","self":"https://issues.apache.org/jira/rest/api/2/issue/12944600","key":"DERBY-6875","fields":{"summary":"Partially broken download pages","description":"The download pages have a box for choosing a mirror.\r\n\r\nHowever this is broken - it does not contain a list of mirrors.\r\nThis is because the HTML pages are broken.\r\n\r\nThey should contain something like the following from\r\n\r\nhttp://tomcat.apache.org/download-90.html\r\n\r\n{code}\r\n<form action=\"[location]\" method=\"get\" id=\"SelectMirror\">\r\n<p>\r\n       Other mirrors: <select name=\"Preferred\">\r\n         [if-any http]\r\n           [for http]<option value=\"[http]\">[http]</option>[end]\r\n         [end]\r\n         [if-any ftp]\r\n           [for ftp]<option value=\"[ftp]\">[ftp]</option>[end]\r\n         [end]\r\n         [if-any backup]\r\n           [for backup]<option value=\"[backup]\">[backup] (backup)</option>[end]\r\n           [end]\r\n         </select><input type=\"submit\" value=\"Change\">\r\n</p>\r\n</form>\r\n{code}\r\n\r\nHowever they contain:\r\n\r\n{code}\r\n<form action=\"[location]\" method=\"get\" id=\"SelectMirror\">Other mirrors: <select name=\"Preferred\">\r\n<!--[if-any http] [for http]--><option value=\"[http]\">[http]</option>\r\n<!--[end] [end]-->\r\n<!--[if-any ftp] [for ftp]--><option value=\"[ftp]\">[ftp]</option>\r\n<!--[end] [end]-->\r\n<!--[if-any backup] [for backup]--><option value=\"[backup]\">[backup] (backup)</option>\r\n<!--[end] [end]--></select> <input type=\"submit\" value=\"Change\">\r\n</form>\r\n{code}\r\n\r\nThe required templating code has been commented out, so does not work."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12940912","self":"https://issues.apache.org/jira/rest/api/2/issue/12940912","key":"DERBY-6874","fields":{"summary":"add table size information to optimizer plan information printed","description":"add table size and total row count information available at optimizer compile time.  These can help when looking at why optimizer picked a particular plan with those estimates at that time.\r\n\r\nmay need to widen the interface to store to get page counts used by store.  For a cleaner interface maybe just provide an interface for store to include whatever it thinks is useful to print.  That way in case there different stores or remote VTI's providing stats we are not tied to one set of info.  #pages might not make sense for remote VTI's."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12940909","self":"https://issues.apache.org/jira/rest/api/2/issue/12940909","key":"DERBY-6873","fields":{"summary":"handle btree rebalance case when it can't get table level lock.","description":"current implementation of btree requires table level lock on index to rebalance.  This can result in inefficient tree structure if lock can not\r\nbe obtained and if post commit retry also fails.  Similar to other problems\r\nif post commit retry does not succeed.\r\n\r\nMay also leave unreclaimed space that could be reclaimed.\r\n\r\nWork around is to run compress on the table in offline mode."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12940905","self":"https://issues.apache.org/jira/rest/api/2/issue/12940905","key":"DERBY-6872","fields":{"summary":"change optmizer plan output to include information about if cardinality stats have been gathered.","description":"When presented with a query plan it would good to know if optimizer cardinality stats have been gathered, and what they are for tables that \r\ninvolved in the query."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12940798","self":"https://issues.apache.org/jira/rest/api/2/issue/12940798","key":"DERBY-6871","fields":{"summary":"Handle message properties in a uniform style","description":"As described in DERBY-6828, there are two styles used for handling\r\nthe translatable error message property files:\r\n\r\nMessageService localization is used for the core Derby engine property\r\nfiles, while LocalizedResource is used for the tools messages and \r\ndrda messages.\r\n\r\nIt seems as though it would be preferable to have a single approach\r\nhere. Potentially we could remove some duplicated code, but more\r\nimportantly it would just be nice to have the approach be consistent\r\nso that Derby developers don't have to be aware of the two different\r\nstyles and be confused by them."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12939001","self":"https://issues.apache.org/jira/rest/api/2/issue/12939001","key":"DERBY-6870","fields":{"summary":"Google Summer of Code 2016: Derby bug fixing","description":"For the 2016 Google Summer of Code, I am offering to mentor a\r\nstudent for general bug fixing of the Derby database.\r\n\r\nThe Derby JIRA has collected the community's knowledge about\r\nknown bugs in Derby, and there are plenty of bugs for us to work on.\r\n\r\nIf you take on this project, with assistance from me, you'll:\r\n- select Derby issues from the Derby bug tracker to fix\r\n- reproduce those problems by writing and running tests\r\n- develop patches to address the problems\r\n- work with the community to get the patches reviewed\r\n- have your reviewed and accepted contributions committed to the next Derby release."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12937867","self":"https://issues.apache.org/jira/rest/api/2/issue/12937867","key":"DERBY-6869","fields":{"summary":"XMLXXETest fails in non-English locales","description":"I noticed that XMLXXETest failed on a machine with Swedish locale:\r\n\r\n{noformat}\r\n1) testDerby6807BillionLaughsVTI(org.apache.derbyTesting.functionTests.tests.lang.XMLXXETest)junit.framework.AssertionFailedError\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.XMLXXETest.testDerby6807BillionLaughsVTI(XMLXXETest.java:253)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}\r\n\r\nderby.log shows that the following exception was raised:\r\n\r\n{noformat}\r\nERROR 2200M: Invalid XML Document: JAXP00010001: Parsern har påträffat fler än \"64000\" enhetstillägg i dokumentet - gränsvärdet för JDK har uppnåtts.\r\n{noformat}\r\n\r\nIt is the expected exception, but the test searches for the substring \"entity expansions\" in the error message. It doesn't find the substring since the error message has been translated from English to Swedish.\r\n\r\nOne way to fix it is to make the test case use assertStatementError() and check the SQLState instead of the error message text."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12937490","self":"https://issues.apache.org/jira/rest/api/2/issue/12937490","key":"DERBY-6868","fields":{"summary":"Remove the dependency on Jakarta ORO","description":"The Derby source code repository contains jakarta-oro-2.0.8.jar in the tools/java directory. This jar file provides regex functionality used by the Sed class in the old test harness.\r\n\r\nModern JDK versions include the java.util.regex package, which provides similar functionality. The Jakarta ORO project is retired and has been moved to the Apache Attic.\r\n\r\nWe should change the implementation of the Sed class to use java.util.regex instead of Jakarta ORO because:\r\n- it reduces the number of binaries in the source code repository\r\n- java.util.regex is a maintained library, ORO is not"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12937273","self":"https://issues.apache.org/jira/rest/api/2/issue/12937273","key":"DERBY-6867","fields":{"summary":"Include index.html page at db.apache.org/derby/releases/index.html","description":"The folder at http://db.apache.org/derby/releases is not intended\r\nto be navigated directly; the releases available for download are\r\nmanaged via http://db.apache.org/derby/derby_downloads.html\r\n\r\nWe should include an index.html page at the raw releases directory\r\nso that if a user accidentally visits that page they don't get an\r\nauto-generated listing page from the underlying web server.\r\n\r\nSee: http://mail-archives.apache.org/mod_mbox/db-derby-dev/201602.mbox/%3C56B028F5.5040701%40gmail.com%3E\r\nfor additional discussion"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12937198","self":"https://issues.apache.org/jira/rest/api/2/issue/12937198","key":"DERBY-6866","fields":{"summary":"Add URLs to Maven pom files","description":"Maven POMs have a <url> element, which is optional, but if not present Maven automatically calculates the URL using the parent project POM's URL and adding /${project.artifactId}.\r\n\r\nThe current Maven POMs in the Derby source only has a URL defined in the parent POM ({{./maven2/pom.xml}}), but not in the other POMs. So, for any module of the project, the generated URLs are invalid.\r\n\r\nFor, example, if you run the following in the {{./maven2/client}} directory the URL is incorrect:\r\n{code}\r\n:~/projects/apache/svn/derby-code/maven2/client$ mvn help:effective-pom | grep '^  <url>'\r\n  <url>http://db.apache.org/derby/derbyclient/</url>\r\n{code}\r\n\r\nThis information is also used by the Maven Project Info Report plugin to generate the {{Dependencies}} report and the generated site causes {{404}} errors. For example, see http://www.deventropy.org/junit-helper/junit-helper-derby/dependencies.html#compile.\r\n\r\nThe attached patch adds the URL element to all the POMs.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12936847","self":"https://issues.apache.org/jira/rest/api/2/issue/12936847","key":"DERBY-6865","fields":{"summary":"RestrictiveFilePermissionsTest fails on Windows","description":"{noformat}\r\n.F.F.F.F.F.F.F.F.F.F.F.F.F..\r\nTime: 48,93\r\nThere were 13 failures:\r\n1) testBackupRestoreFiles(org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest)junit.framework.AssertionFailedError: unexpected uid \\OPPRETTER EIER can access file C:\\cygwin64\\tmp\\derbytst\\system\\RFPT_backup\r\n\tat org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest$2.run(RestrictiveFilePermissionsTest.java:758)\r\n\tat org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest$2.run(RestrictiveFilePermissionsTest.java:597)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest.checkAccessToOwner(RestrictiveFilePermissionsTest.java:597)\r\n\tat org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest.checkAccessToOwner(RestrictiveFilePermissionsTest.java:582)\r\n\tat org.apache.derbyTesting.functionTests.tests.engine.RestrictiveFilePermissionsTest.testBackupRestoreFiles(RestrictiveFilePermissionsTest.java:372)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:23)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:23)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:27)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:23)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:23)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:27)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:23)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:23)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:27)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:23)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:23)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:27)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12936406","self":"https://issues.apache.org/jira/rest/api/2/issue/12936406","key":"DERBY-6864","fields":{"summary":"RawDBReaderTest fails on Windows","description":"RawDBReaderTest fails on Windows with the following output:\r\n\r\n{noformat}\r\n.<assertDirectoryDeleted> attempt 1 left 2 files/dirs behind: 0=extinout\\recovery.sql 1=extinout\r\n<assertDirectoryDeleted> attempt 2 left 2 files/dirs behind: 0=extinout\\recovery.sql 1=extinout\r\n<assertDirectoryDeleted> attempt 3 left 2 files/dirs behind: 0=extinout\\recovery.sql 1=extinout\r\n<assertDirectoryDeleted> attempt 4 left 2 files/dirs behind: 0=extinout\\recovery.sql 1=extinout\r\nF\r\nTime: 39,498\r\nThere was 1 failure:\r\n1) RawDBReaderTest:embeddedjunit.framework.AssertionFailedError: Failed to delete 2 files (root=C:\\cygwin64\\tmp\\derbytst\\extinout): C:\\cygwin64\\tmp\\derbytst\\extinout\\recovery.sql (isDir=false, canRead=true, canWrite=true, size=801), C:\\cygwin64\\tmp\\derbytst\\extinout (isDir=true, canRead=true, canWrite=true, size=0)\r\n        at org.apache.derbyTesting.junit.BaseTestCase.assertDirectoryDeleted(BaseTestCase.java:1125)\r\n        at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:128)\r\n        at org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(DropDatabaseSetup.java:118)\r\n        at org.apache.derbyTesting.junit.SupportFilesSetup.tearDown(SupportFilesSetup.java:130)\r\n        at junit.extensions.TestSetup$1.protect(TestSetup.java:24)\r\n        at junit.extensions.TestSetup.run(TestSetup.java:27)\r\n\r\nFAILURES!!!\r\nTests run: 1,  Failures: 1,  Errors: 0\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12935861","self":"https://issues.apache.org/jira/rest/api/2/issue/12935861","key":"DERBY-6863","fields":{"summary":"NPE when multiple values are contained in an IN statement within a CASE statement used in a GROUP BY","description":"An IN statement within a CASE statement within a GROUP BY, that contains more than one element will cause a NPE.\r\n\r\nReproduction Steps:\r\n\r\n======== DATA ============\r\n\r\nCREATE TABLE Test (\r\n       Region VARCHAR(20),\r\n       Cost INTEGER\r\n);\r\n\r\nINSERT INTO Test VALUES ('Australia', 45);\r\nINSERT INTO Test VALUES ('Asia', 22);\r\nINSERT INTO Test VALUES ('North America', 33);\r\nINSERT INTO Test VALUES ('South America', 55);\r\nINSERT INTO Test VALUES ('Europe', 44);\r\n\r\n======= SQL WORKS ===========\r\n\r\nSELECT DISTINCT\r\n   CASE\r\n      WHEN 1 = 0 THEN \"REGION\"\r\n      WHEN \"REGION\" IN ('Asia') THEN 'A'\r\n      ELSE \"REGION\"\r\n   END,\r\n   SUM(\"COST\")\r\nFROM TEST\r\nGROUP BY \r\n   CASE\r\n      WHEN 1 = 0 THEN \"REGION\"\r\n      WHEN \"REGION\" IN ('Asia') THEN 'A'\r\n      ELSE \"REGION\"\r\n   END\r\n\r\n============ FAILS ===================\r\n\r\n   SELECT DISTINCT\r\n      CASE\r\n         WHEN 1 = 0 THEN \"REGION\"\r\n         WHEN \"REGION\" IN ('Asia', 'Australia') THEN 'A'\r\n         ELSE \"REGION\"\r\n      END,\r\n      SUM(\"COST\")\r\n   FROM TEST\r\n   GROUP BY \r\n      CASE\r\n         WHEN 1 = 0 THEN \"REGION\"\r\n         WHEN \"REGION\" IN ('Asia','Australia') THEN 'A'\r\n         ELSE \"REGION\"\r\n      END\r\n\r\n\r\n================== NPE ===================\r\n\r\n\r\njava.sql.SQLException: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n\tat sun.reflect.GeneratedMethodAccessor47.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:622)\r\n\tat com.onseven.dbvis.b.B.B.ā(Z:2256)\r\n\tat com.onseven.dbvis.b.B.F$A.call(Z:2838)\r\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1146)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\r\n\tat java.lang.Thread.run(Thread.java:701)\r\nCaused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 22 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.exe.acd8cd40bax0152xa074xeeddx0000012ba0d05.e1(Unknown Source)\r\n\tat org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n\t... 13 more\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12935471","self":"https://issues.apache.org/jira/rest/api/2/issue/12935471","key":"DERBY-6862","fields":{"summary":"Broken links to non-current release hashes and sigs","description":"The links to archive releases have been fixed for the archives themselves, but the ASC and MD5 files still point to www.apache.org instead of archive.apache.org."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12935469","self":"https://issues.apache.org/jira/rest/api/2/issue/12935469","key":"DERBY-6861","fields":{"summary":"Missing KEYS file","description":"The KEYS file is missing from http://www.apache.org/dist/db/derby/.\r\n\r\nThe KEYS file is needed for the archives server as well as for current releases, so the KEYS file must be served from the ASF mirror hosts, rather than a location in the SVN source tree.\r\n\r\nPlease move the KEYS file to \r\n\r\nhttps://dist.apache.org/repos/dist/release/db/derby/\r\n\r\nmaking sure that it contains all the keys previously used to sign releases.\r\n\r\nAlso please change the KEYS link(s) on download pages accordingly."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12934828","self":"https://issues.apache.org/jira/rest/api/2/issue/12934828","key":"DERBY-6860","fields":{"summary":"Automatic download of junit.jar broken","description":"Automatic download of junit.jar seems to be broken. If you don't already have a copy in tools/java, \"ant all\" fails like this:\r\n\r\n{noformat}\r\njunit_check:\r\n\r\nBUILD FAILED\r\n/code/derby/trunk/build.xml:66: The following error occurred while executing this line:\r\n/code/derby/trunk/build.xml:177: junit property is set to /code/derby/trunk/tools/java/junit.jar, but there is no junit.jar there.\r\n{noformat}\r\n\r\nThe problem seems to be that junit_check refuses to continue if the junit property is set, but does not point to an existing file. This property is set when the setCompilerProperties target, which runs before junit_check, loads tools/ant/properties/extrapath.properties, as extrapath.properties contains the following line:\r\n\r\n{noformat}\r\njunit=${javatools.dir}/junit.jar\r\n{noformat}\r\n\r\nSince the install_junit target depends on the check_junit target, this prevents the build script from downloading junit.jar automatically.\r\n\r\nWorkaround: run \"ant install_junit\" before \"ant all\""}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12933044","self":"https://issues.apache.org/jira/rest/api/2/issue/12933044","key":"DERBY-6859","fields":{"summary":"Apache Derby Database Performance slow with a foreign key","description":"\r\n\r\nI have the following schema: TableA Name\r\n\r\nTableB Name\r\n\r\nA foreign key from TableB.Name to TableA.Name\r\n\r\nI insert 2500 records into table B and one record into TableA.\r\n\r\nI then issue the update statement \"update TableB set Name = 'new' where Name = 'old'\". I then issue the update statement to change TableA.Name from 'old' to 'new' in the same transaction.\r\n\r\nI put timing code just around the update statement for TableB and discovered that with the foreign key it taks 9.7 seconds to perform the update statement. Without the foreign key it takes about 300 milliseconds. Also if i have the FK and then disable it right before the update of TableB and then re-enable it right after the whole test is just as fast as not having the FK in the first place.\r\n\r\nThe query plan is completely identical in the above scenarios except for the timings. the timings vary from about 11 to 33 or so in some cases, and the number of indexes goes up by 1 when I have the FK.\r\n\r\nI also discovered that having the FK the whole time and adding an index on Name and one of the boolean columns that isn't even used at all in any of the queries also results in the fast update statement of about 300 milliseconds - 400 milliseconds.\r\n\r\nAlso removing some of the columns from TableB that arent't part of the FK or PK of any other table (ie. columns that aren't even used in any of the queries aside from the initial inserts) improves the speed again of the update.\r\n\r\nI have tried pretty much everything and I am not sure why this behaviour is so bad in Derby. I'm only dealing with 2500 rows in the entire table. It should not be this slow to update an index. I tried analyzing the query plans (which are identical except for slower timing stats), I tried forcing updating of statistics. Forcing flushing data to disk for Derby. I tried using an external database browser and running the same update statements (2 mentioned above) and got the same slowness. I also tried many other things.\r\n\r\nThe behaviour is always consistent with the same test scenarios (eg. disable foreign key before update or not) but it's completely illogical. Why would updating an FK with only 2500 rows be that slow, this makes the database unusable. Why would creating an index on the Name column and a completely unrelated column improve performance.\r\n\r\nAlso the \"Execute Time: \" in the query plan right near the beginning is always a large negative number yet the timestamps below showing the total compile and execute times are correct for what I'm observing If i subtract them off. Is something wrong with Derby? Why is the time negative?\r\n\r\nI'm also on the latest version of Apache Derby 10.12.1.1, which I only tried as a diagnostic step because I was on 10.11.1.1 when i found this behaviour.\r\n\r\nI would really appreciate a lot of help on this one.\r\n\r\nThanks\r\n\r\nAlso please see:\r\nhttp://stackoverflow.com/questions/34765186/apache-derby-database-performance-slow-with-a-foreign-key"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12933043","self":"https://issues.apache.org/jira/rest/api/2/issue/12933043","key":"DERBY-6858","fields":{"summary":"Apache Derby simple update statement performance becomes 1500% worse when adding one byte to a column","description":"I have 2 tables as follows:\r\n\r\nParentUpdate\r\nname varchar(255)\r\nvalue int not null\r\n\r\nprimary key: name\r\n\r\nChildUpdate\r\nparentName varchar(255)\r\nname varchar(255)\r\nvalue int\r\ndata varchar(1000)\r\n\r\nprimary key: name foreign key: parentName to ParentUpdate.name\r\n\r\nWhen I run the statement \"update ChildUpdate set parentName = 'Parent 2' where parentName = 'Parent 1'\" with 2500 records in the ChildUpdate table and 1 record in the ParentUpdate table with only a single byte difference in data size in the ChildUpdate table, the performance decreases by 15 times.\r\n\r\nWhen the ChildUpdate data column has exactly 14 bytes of the same character the runtime of the above query is about 500 milliseconds. When I add one more byte to the data column of ChildUpdate the performance all of a sudden becomes about 7500 milliseconds.\r\n\r\nIf i then decrease the data size back to 14 from 15 it's fast again. When i put it back to 15 it's slow again. This is reproducible every time.\r\n\r\nCan you please help me figure out how to get the same fast performance without such seemingly random behaviour.\r\n\r\nThe query plans are below for both cases.\r\n\r\n        projection = true\r\n            constructor time (milliseconds) = 0\r\n            open time (milliseconds) = 0\r\n            next time (milliseconds) = 16\r\n            close time (milliseconds) = 16\r\n            restriction time (milliseconds) = 0\r\n            projection time (milliseconds) = 0\r\n            optimizer estimated row count: 51.50\r\n            optimizer estimated cost: 796.12\r\n        Source result set:\r\n            Table Scan ResultSet for CHILDUPDATE at read committed isolation level using exclusive row locking chosen by the optimizer\r\n            Number of opens = 1\r\n            Rows seen = 2500\r\n            Rows filtered = 0\r\n            Fetch Size = 1\r\n                constructor time (milliseconds) = 0\r\n                open time (milliseconds) = 15\r\n                next time (milliseconds) = 16\r\n                close time (milliseconds) = 16\r\n                next time in milliseconds/row = 0\r\n\r\n            scan information:\r\n                Bit set of columns fetched={0, 1}\r\n                Number of columns fetched=2\r\n                Number of pages visited=41\r\n                Number of rows qualified=2500\r\n                Number of rows visited=2500\r\n                Scan type=heap\r\n                start position:\r\n                    null\r\n                stop position:\r\n                    null\r\n                qualifiers:\r\n                    Column[0][0] Id: 0\r\n                    Operator: =\r\n                    Ordered nulls: false\r\n                    Unknown return value: false\r\n                    Negate comparison result: false\r\n                optimizer estimated row count: 51.50\r\n                optimizer estimated cost: 796.12\r\ntotal time: ~500 milliseconds\r\n\r\nand the slow version\r\n\r\n   Statement Name: \r\n    null\r\nStatement Text: \r\n    update ChildUpdate set parentName = 'Parent 2' where parentName = 'Parent 1'\r\nParse Time: 0\r\nBind Time: 0\r\nOptimize Time: 0\r\nGenerate Time: 0\r\nCompile Time: 0\r\nExecute Time: -1453199485700\r\nBegin Compilation Timestamp : 2016-01-19 05:31:25.684\r\nEnd Compilation Timestamp : 2016-01-19 05:31:25.684\r\nBegin Execution Timestamp : 2016-01-19 05:31:25.7\r\nEnd Execution Timestamp : 2016-01-19 05:31:33.141\r\nStatement Execution Plan Text: \r\nUpdate ResultSet using row locking:\r\ndeferred: true\r\nRows updated = 2500\r\nIndexes updated = 2\r\nExecute Time = -1453199485747\r\n    Normalize ResultSet:\r\n    Number of opens = 1\r\n    Rows seen = 2500\r\n        constructor time (milliseconds) = 0\r\n        open time (milliseconds) = 0\r\n        next time (milliseconds) = 47\r\n        close time (milliseconds) = 0\r\n        optimizer estimated row count: 51.50\r\n        optimizer estimated cost: 810.94\r\n    Source result set:\r\n        Project-Restrict ResultSet (3):\r\n        Number of opens = 1\r\n        Rows seen = 2500\r\n        Rows filtered = 0\r\n        restriction = false\r\n        projection = true\r\n            constructor time (milliseconds) = 0\r\n            open time (milliseconds) = 0\r\n            next time (milliseconds) = 32\r\n            close time (milliseconds) = 0\r\n            restriction time (milliseconds) = 0\r\n            projection time (milliseconds) = 0\r\n            optimizer estimated row count: 51.50\r\n            optimizer estimated cost: 810.94\r\n        Source result set:\r\n            Project-Restrict ResultSet (2):\r\n            Number of opens = 1\r\n            Rows seen = 2500\r\n            Rows filtered = 0\r\n            restriction = false\r\n            projection = true\r\n                constructor time (milliseconds) = 0\r\n                open time (milliseconds) = 0\r\n                next time (milliseconds) = 32\r\n                close time (milliseconds) = 0\r\n                restriction time (milliseconds) = 0\r\n                projection time (milliseconds) = 0\r\n                optimizer estimated row count: 51.50\r\n                optimizer estimated cost: 810.94\r\n            Source result set:\r\n                Index Scan ResultSet for CHILDUPDATE using index TESTINDEX at read committed isolation level using exclusive row locking chosen by the optimizer\r\n                Number of opens = 1\r\n                Rows seen = 2500\r\n                Rows filtered = 0\r\n                Fetch Size = 1\r\n                    constructor time (milliseconds) = 0\r\n                    open time (milliseconds) = 0\r\n                    next time (milliseconds) = 32\r\n                    close time (milliseconds) = 0\r\n                    next time in milliseconds/row = 0\r\n\r\n                scan information:\r\n                    Bit set of columns fetched={0, 1, 2}\r\n                    Number of columns fetched=3\r\n                    Number of deleted rows visited=0\r\n                    Number of pages visited=42\r\n                    Number of rows qualified=2500\r\n                    Number of rows visited=2500\r\n                    Scan type=btree\r\n                    Tree height=2\r\n                    start position:\r\n                        None\r\n                    stop position:\r\n                        None\r\n                    qualifiers:\r\n                        Column[0][0] Id: 1\r\n                        Operator: =\r\n                        Ordered nulls: false\r\n                        Unknown return value: false\r\n                        Negate comparison result: false\r\n                    optimizer estimated row count: 51.50\r\n                    optimizer estimated cost: 810.94\r\ntotal time: ~7 seconds 500 milliseconds\r\n\r\nplease also see post:\r\nhttp://stackoverflow.com/questions/34874762/apache-derby-simple-update-statement-performance-becomes-1500-worse-when-adding"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12932285","self":"https://issues.apache.org/jira/rest/api/2/issue/12932285","key":"DERBY-6857","fields":{"summary":"Deprecate support for building Derby under JDKs 6 and 7","description":"The community voted to stop supporting Java 6 and 7 as of release 10.13. See the 2015-09-12 entry here: http://wiki.apache.org/db-derby/VoteResults. We no longer need to support building Derby with those JDKs. This issue tracks changes needed to remove that support and simplify the build."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12931787","self":"https://issues.apache.org/jira/rest/api/2/issue/12931787","key":"DERBY-6856","fields":{"summary":"Make it possible to build Derby using JDK 9","description":"Derby can't be built with JDK 9. Java 9 introduces new JDBC classes like java.sql.ShardingKey and methods which refer to these new classes.\r\n\r\nIn addition, project Jigsaw has created a new way to name classes (see http://openjdk.java.net/jeps/220). This breaks the PropertySetter build tool which we use so that old JVMs can compile Derby and so that Derby can be compiled to run on old JVMs.\r\n\r\nIt is likely that we will need to leave this issue open throughout the development cycle of Java 9."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12931785","self":"https://issues.apache.org/jira/rest/api/2/issue/12931785","key":"DERBY-6855","fields":{"summary":"Support JDBC changes introduced by Java 9","description":"Java 9 has introduced new classes and methods into java.sql. and javax.sql. At a minimum, we will need to stub these out and return an unimplemented feature exception. For instance, Java 9 introduces a new interface called java.sql.ShardingKey.\r\n\r\nRight now, a Derby server built on Java 8 will fail the UnsupportedVetter test because of these new classes and methods.\r\n\r\nSee the Java 9 javadoc here: http://download.java.net/jdk9/docs/api/index.html"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12931714","self":"https://issues.apache.org/jira/rest/api/2/issue/12931714","key":"DERBY-6854","fields":{"summary":"Make it possible to run Derby tests on early access versions of JDK 9","description":"Early access versions of JDK 9 (build 100) have \"9-ea\" as the java.version and \"9\" as the java.specification.version. This confuses the JavaVersionHolder class which the regression tests use in order to determine the vm level. At a minimum, we need to make JavaVersionHolder recognize these early access strings.\r\n\r\nThis issue can be left open even after a fix is applied because we have no idea how java.version and java.specification.version are going to evolve over the remaining development cycle for JDK 9."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12929316","self":"https://issues.apache.org/jira/rest/api/2/issue/12929316","key":"DERBY-6853","fields":{"summary":"Shutdown Derby Network Server after local ip change","description":"I have some problem shutdown the Derby Engine.\r\n\r\nh4. Server Start;\r\n{code}\r\njava -jar derbyrun.jar server start -h 10.90.232.20\r\n{code}\r\n\r\nI have started Derby Network Server wiht above cmd command. And I have stop the Network Server with below command.\r\n\r\nh4. Server Stop;\r\n{code}\r\njava -jar derbyrun.jar server shutdown -h 10.90.232.20\r\n{code}\r\n\r\nBut if i change ip of current network adapter manually +while server up+, i don't kill the current listening network server. Because Network Server started on different ip before.\r\n\r\nh4. Also i have tried;\r\n{code}\r\njava -jar derbyrun.jar server shutdown -h 0.0.0.0\r\njava -jar derbyrun.jar server shutdown -h localhost\r\n{code}\r\nBut did not help. I can't reach old started Network Server. So it stuck and JVM don't allow start new Derby Network Server."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12928849","self":"https://issues.apache.org/jira/rest/api/2/issue/12928849","key":"DERBY-6852","fields":{"summary":"Allow identity columns to cycle (as defined in SQL:2003)","description":"Currently when an IDENTITY column reaches its maximum value it will produce an error.\r\n\r\nFor tables that are used as 'transaction logs' or 'event logs' it often makes sense to let the table automatically start over with the first identity value again when the max is reached. This would be similar to the CYCLE option on Oracle's SEQUENCE and as defined in SQL:2003. And Derby is probably used quite often for this purpose, I guess, perhaps even more than other RDBMSs.\r\n\r\nAt the moment every developer have to program their own logic for this.\r\n\r\nI propose to introduce the CYCLE option.\r\nThe idea of CYCLE is based on the assumption that there's been a prior cleanup in the table rows so that it will be possible to re-use ids that have been used previously. If that is not the case - and a rollover happens - then a duplicate value error will occur. In this sense it can be argued that the CYCLE option will trade a _certain_ error for a _potential_ error. Most Derby users would possibly gladly accept such a bargain. In other words: This option will greatly enhance the usability of IDENTITY columns.\r\n\r\nThe current implementation of IDENTITY columns SQL grammar in Derby is a subset of the SQL:2003 standard which is the first of the SQL standards to define IDENTITY columns. Interestingly the standard also defines the CYCLE option but this was never implemented in Derby. Also see [SQL-99 and SQL-2003 features mapped to Derby|https://wiki.apache.org/db-derby/SQLvsDerbyFeatures] (scroll to T174).\r\n\r\nIn other words: The proposal is simply to implement CYCLE as defined in SQL:2003."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12927912","self":"https://issues.apache.org/jira/rest/api/2/issue/12927912","key":"DERBY-6851","fields":{"summary":"Enhancement to  SYSCS_IMPORT_TABLE","description":"Following enhancement are needed for import procedure SYSCS_IMPORT_TABLE\r\n\r\n1. Ability to import to all tables from a selected path. \r\n2. Ability to turn off implicit commit in SYSCS_IMPORT_TABLE. So that the user can commit when this procedure is executed after other SQL queries i.e. alter column etc \r\n3. Ability to import empty file in replace mode\r\n4. Ability to disable constraint during import. If implicit commit is disable then imports can be performed without constraint violation. "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12927911","self":"https://issues.apache.org/jira/rest/api/2/issue/12927911","key":"DERBY-6850","fields":{"summary":"Enhancements to SYSCS_UTIL.SYSCS_EXPORT_TABLE ","description":"Following are enhancement request for  SYSCS_UTIL.SYSCS_EXPORT_TABLE \r\n\r\n1.Ability to import all or selective file name : Procedure should export all the tables of the provided schema. A path name can be taken as parameter and file name can be formulated internally using table naming convention. \r\n2. Ability to overwrite the export file : If same file name is used to export it should be overwritten.\r\n3. Ability to block writes : if export is selected for all tables it should block updates to database during the export process.Post  export process is complete the writes should be enabled. \r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12925139","self":"https://issues.apache.org/jira/rest/api/2/issue/12925139","key":"DERBY-6849","fields":{"summary":"Statement.RETURN_GENERATED_KEYS returns a 1 row result set even if there are no auto-generated fields","description":"If:\r\n1) A JDBC INSERT statement is executed, with Statement.RETURN_GENERATED_KEYS enabled, and\r\n2) A call is then made to Statement.getGeneratedKeys, and\r\n3) The table which was inserted into has *NO* generated columns,\r\n\r\nthen getGeneratedKeys() returns a ResultSet object with a single row in it.\r\n\r\nThis behavior seems incorrect; it seems that the correct behavior\r\nwould be to return a ResultSet object which has *NO* rows in it, so\r\nthat ResultSet.next() returns FALSE the first time it is called.\r\n \r\nI have a very simple table:\r\n{noformat}\r\n    CREATE TABLE images (\r\n      url varchar(1000) NOT NULL,\r\n      image blob NOT NULL,\r\n  \r\n      CONSTRAINT images_url PRIMARY KEY (url)\r\n    );\r\n{noformat}\r\nNo auto-generated fields.  However when I do an insert, JDBC tells me there are auto-generated keys (rs.next() does not return false and a LONG value is returned):\r\n{noformat}\r\n      try(PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n        setParameters(parameterValues, statement);\r\n\r\n        statement.execute();\r\n\r\n        try(ResultSet rs = statement.getGeneratedKeys()) {\r\n          if(rs.next()) {\r\n            return rs.getObject(1);\r\n          }\r\n\r\n          return null;\r\n        }\r\n      }\r\n      catch(SQLException e) {\r\n        throw new DatabaseException(this, sql + \": \" + parameters, e);\r\n      }\r\n{noformat}\r\nThis sounds like a bug to me.  For comparison, PostgreSQL does not have the same behaviour."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12923432","self":"https://issues.apache.org/jira/rest/api/2/issue/12923432","key":"DERBY-6848","fields":{"summary":"Unable to start derbyNetworkServer.bat","description":"I tried to call startNetworkServer.bat.\r\n\r\nThe only way to start derby in my enviroment is to use \"-noSecurityManager\"\r\nargument\r\n\r\nAtnother way is halting executiong without any message.\r\n\r\nTried to start from: \r\n1)jdk/db/bin\r\n2)Download db-derby-10.12.1.1-bin.zip and extract to folder.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12917598","self":"https://issues.apache.org/jira/rest/api/2/issue/12917598","key":"DERBY-6847","fields":{"summary":"Document SYSCS_UTIL.SYSCS_GET_DATABASE_NAME()","description":"Document the system function added by https://issues.apache.org/jira/browse/DERBY-6725."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12916827","self":"https://issues.apache.org/jira/rest/api/2/issue/12916827","key":"DERBY-6846","fields":{"summary":"query to find tablename and their identity column name","description":"\r\nHi, \r\n\r\nIs there a query available in derby to get table name and their column name which is of type identity. \r\n\r\nAppreciate if any guidance on same. \r\n\r\nThanks,\r\nAnjana. "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12916683","self":"https://issues.apache.org/jira/rest/api/2/issue/12916683","key":"DERBY-6845","fields":{"summary":"Document the rawDBReader optional tool","description":"Document the optional tool added by DERBY-6136."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12916681","self":"https://issues.apache.org/jira/rest/api/2/issue/12916681","key":"DERBY-6844","fields":{"summary":" SYSCS_IMPORT_TABLE for multiple table should be in one transaction","description":"We are using system procedure SYSCS_UTIL.SYSCS_IMPORT_TABLE to import data from a file. We have 30 imports of the table. \r\n\r\nAs per understanding each call to SYSCS_IMPORT_TABLE each import is in one transaction. The transaction for complete imports i.e all the table is not achievable. \r\nIf it is not then can we define system procedure . Can anyone please guide if  any documentation available on same. \r\n\r\nThanks,\r\nAnjana"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12916434","self":"https://issues.apache.org/jira/rest/api/2/issue/12916434","key":"DERBY-6843","fields":{"summary":"Altering the Identity columns rules ","description":"We do export of from one derby database to another. Our database defined identity type as ''GENERATED ALWAYS\" Due to which the import does not consider the identity column value from the export file. \r\n\r\nOur requirement is to import those identity column values as well. \r\nAs per understanding one of the option in derby is to create table with identity type as \"GENERATED BY DEFAULT\" . However need to understand if there is alternative in derby where in we can modify the identity type before import to ''GENERATED by DEFAULT\" and then after import is successfully change it back to \"GENERATED ALWAYS\". \r\n\r\nAppreciate if any one can guide on same. "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12914635","self":"https://issues.apache.org/jira/rest/api/2/issue/12914635","key":"DERBY-6842","fields":{"summary":"Improve the performance of connections to soft-upgraded databases","description":"As discovered in [Issue #6841|https://issues.apache.org/jira/browse/DERBY-6841], connections to soft-upgraded databases are significantly slower than those to their hard-upgraded counterparts.  To get an idea of just how severe the performance loss is in the former case, take a look at the results of the repetition tests run by myself (Xavion) and Rick Hillegas.\r\n\r\nIn the meantime, I noticed that there doesn't seem to be any mention in Derby's documentation about the loss of performance experienced when using soft-upgraded databases.  The only thing anyone seems to care about is the loss of functionality that one can expect when using an older database.\r\n\r\nIn fact, the [\"Soft upgrade limitations\"|https://db.apache.org/derby/docs/10.9/devguide/tdevupgradesoft.html] article doesn't even exist anymore in Derby releases above v10.9.  Given how old (and therefore mature) Derby is, people like myself assume that its database format doesn't change much between versions.  Due to this, it'd never occur to us that soft-upgrading could be so detrimental to performance."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12911278","self":"https://issues.apache.org/jira/rest/api/2/issue/12911278","key":"DERBY-6841","fields":{"summary":"Derby v10.12.1.1 is horribly slow compared to v10.11.1.1 in embedded mode","description":"It takes much longer to open, read, and close embedded databases using v10.12.1.1 than it did with v10.11.1.1.  What ever changes you guys made over the last year and a bit have definitely been for the worse.\r\n\r\nBelow are the results of the repetition tests I've just run on the same computer with the same databases.  Let me know if you need to know about the sizes of the databases and/or the file type they contain.\r\n\r\nConnecting with v10.11.1.1:\r\nDatabase opened in 0.82 seconds.\r\nDatabase opened in 0.77 seconds.\r\nDatabase opened in 0.88 seconds.\r\nDatabase opened in 0.77 seconds.\r\nDatabase opened in 0.77 seconds.\r\nDatabase opened in 0.96 seconds.\r\nDatabase opened in 0.74 seconds.\r\n\r\nConnecting with v10.12.1.1:\r\nDatabase opened in 1.98 seconds.\r\nDatabase opened in 2.07 seconds.\r\nDatabase opened in 1.97 seconds.\r\nDatabase opened in 2.01 seconds.\r\nDatabase opened in 2.01 seconds.\r\nDatabase opened in 2.00 seconds.\r\nDatabase opened in 2.03 seconds.\r\n\r\nReading with v10.11.1.1:\r\nDatabase processed in 6.17 seconds.\r\nDatabase processed in 4.00 seconds.\r\nDatabase processed in 3.67 seconds.\r\nDatabase processed in 3.66 seconds.\r\nDatabase processed in 3.78 seconds.\r\nDatabase processed in 3.69 seconds.\r\nDatabase processed in 3.74 seconds.\r\n\r\nReading with v10.12.1.1:\r\nDatabase processed in 7.29 seconds.\r\nDatabase processed in 4.54 seconds.\r\nDatabase processed in 4.88 seconds.\r\nDatabase processed in 4.65 seconds.\r\nDatabase processed in 4.34 seconds.\r\nDatabase processed in 4.35 seconds.\r\nDatabase processed in 4.50 seconds.\r\n\r\nDisconnecting with v10.11.1.1:\r\nDatabase closed in 0.11 seconds.\r\nDatabase closed in 0.13 seconds.\r\nDatabase closed in 0.15 seconds.\r\nDatabase closed in 0.14 seconds.\r\nDatabase closed in 0.10 seconds.\r\nDatabase closed in 0.13 seconds.\r\nDatabase closed in 0.14 seconds.\r\n\r\nDisconnecting with v10.12.1.1:\r\nDatabase closed in 0.74 seconds.\r\nDatabase closed in 0.87 seconds.\r\nDatabase closed in 0.76 seconds.\r\nDatabase closed in 0.87 seconds.\r\nDatabase closed in 0.85 seconds.\r\nDatabase closed in 0.69 seconds.\r\nDatabase closed in 0.84 seconds.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12910307","self":"https://issues.apache.org/jira/rest/api/2/issue/12910307","key":"DERBY-6840","fields":{"summary":"DatabaseMetaData.getBestRowIdentifier/DECIMAL_DIGITS' type is Integer","description":"The value of {{DECIMAL_DIGITS}} of {{DatabaseMetaData.getBestRowIdentifier}} is an {{java.lang.Integer}} not {{java.lang.Short}}. "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12906282","self":"https://issues.apache.org/jira/rest/api/2/issue/12906282","key":"DERBY-6839","fields":{"summary":"InvalidClassException when upgrading db from 10.10.1.1 to 10.11.1.1 or 10.12.1.1","description":"When trying to upgrade a database created with version *10.10.1.1* directly to version *10.12.1.1* I get the following error:\r\n{code}\r\nCaused by: ERROR XJ040: Failed to start database '/Users/eduribas/database' with class loader sun.misc.Launcher$AppClassLoader@14dad5dc, see the next exception for details.\r\n    at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n    ... 43 more\r\nCaused by: ERROR XSDA8: Exception during restore of a serializable or SQLData object of class \r\n    at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.CachedPage.fetchFromSlot(Unknown Source)\r\n    at org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropJDBCMetadataSPSes(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateMetadataSPSes(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(Unknown Source)\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.FileMonitor.startModule(Unknown Source)\r\n    at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n    at org.apache.derby.impl.db.BasicDatabase$5.run(Unknown Source)\r\n    at java.security.AccessController.doPrivileged(Native Method)\r\n    at org.apache.derby.impl.db.BasicDatabase.bootServiceModule(Unknown Source)\r\n    at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n    at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n    at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedConnection$4.run(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedConnection$4.run(Unknown Source)\r\n    at java.security.AccessController.doPrivileged(Native Method)\r\n    at org.apache.derby.impl.jdbc.EmbedConnection.startPersistentService(Unknown Source)\r\n    ... 40 more\r\nCaused by: java.io.InvalidClassException: org.apache.derby.iapi.sql.execute.ExecRowBuilder; local class incompatible: stream classdesc serialVersionUID = -1078823466492523202, local class serialVersionUID = 9151849461018459842\r\n    at java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:621)\r\n    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1623)\r\n    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1518)\r\n    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1774)\r\n    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1351)\r\n    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:371)\r\n    at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source)\r\n    at org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(Unknown Source)\r\n    at org.apache.derby.iapi.services.io.FormatIdInputStream.readObject(Unknown Source)\r\n    at org.apache.derby.iapi.types.UserType.readExternal(Unknown Source)\r\n    ... 75 more\r\n{code}\r\n\r\nA similar error occurs when upgrading directly from *10.10.1.1* to *10.11.1.1*. But when I upgrade from *10.10.1.1* to *10.10.2.0* first, and then to *10.11.1.1* or *10.12.1.1*, no error occurs."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12895733","self":"https://issues.apache.org/jira/rest/api/2/issue/12895733","key":"DERBY-6838","fields":{"summary":"LookaheadSuccess in SQLParser leaks caller through backtrace","description":"org.apache.derby.impl.sql.compile.SQLParser, which seems to be indefinitly reused, holds a reference to an instance of LookaheadSuccess, which at least for OpenJDK holds a strong reference to everything on the initializing caller stack."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12895707","self":"https://issues.apache.org/jira/rest/api/2/issue/12895707","key":"DERBY-6837","fields":{"summary":"ERROR 40XL1 due to incorrect lock","description":"When I add an index on new created table (software installation) I get ERROR 40XL1 when I try to update records.\r\nIf I add the same index on software update when table has been used, I don't have the error.\r\nOn a new installation I have to insert rows and restart my application, before adding the index, and then I don't have the error.\r\nI tried to make a small project to reproduce the bug but after two days of research I gave up.\r\nAnyway I have some interesting data, I think.\r\nWhen it is working I have only one lock on the table (SYSCS_DIAG.LOCK_TABLE) :\r\n4816 - TABLE - IS - IDAXX_SIS - Tablelock - GRANT - T - 1 - null\r\nWhen I have the error there is another lock on rows :\r\n4756 - TABLE - IS - IDAXX_SIS - Tablelock - GRANT - T - 1 - null\r\n4756 - ROW - S - IDAXX_SIS - (1,28) - GRANT - T - 1 - null\r\n\r\nThe index column is a CHAR(1).\r\nI use embeddeddriver with \"territory=fr_FR; collation=TERRITORY_BASED:PRIMARY\" option, but I tried without this option and the error persist.\r\n\r\nFor now my workaround is to delay the index creation."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12895411","self":"https://issues.apache.org/jira/rest/api/2/issue/12895411","key":"DERBY-6836","fields":{"summary":"syscs_import_data_lobs_from_extfile can not read data past 2GB","description":"syscs_util.syscs_import_data_lobs_from_extfile() imports data from .csv file.\r\nFor binary data, in csv is expected a reference, where should be data read from.\r\nThe reference is in form:\r\n<filename>.<offset>.<length>\r\n\r\nThe offset and length are implemented as int.\r\nHence, it is not possible to read binary data which are stored after 2GB.\r\nThe stack trace is like:\r\n\r\nCaused by: java.lang.NumberFormatException: For input string: \"2147563021\"\r\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\r\n\tat java.lang.Integer.parseInt(Integer.java:495)\r\n\tat java.lang.Integer.parseInt(Integer.java:527)\r\n\tat org.apache.derby.impl.load.ImportReadData.initExternalLobFile(Unknown Source)\r\n\tat org.apache.derby.impl.load.ImportReadData.getBlobColumnFromExtFile(Unknown Source)\r\n\tat org.apache.derby.impl.load.ImportAbstract.getBlob(Unknown Source)\r\n\tat org.apache.derby.iapi.types.SQLBlob.setValueFromResultSet(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getNextRowFromRowSource(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.heap.HeapController.load(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.heap.Heap.load(Unknown Source)\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12888776","self":"https://issues.apache.org/jira/rest/api/2/issue/12888776","key":"DERBY-6835","fields":{"summary":"Make the release scripts update the copyright year and version on the docs branch.","description":"Right now the build scripts update the copyright year and version of the docs. This is done on the fly and results in the correct year and version for the generated docs which are bundled with the release. However, the copyright year and the version could still be wrong on the branch itself and that means that the source distribution will have the wrong year and version."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12863085","self":"https://issues.apache.org/jira/rest/api/2/issue/12863085","key":"DERBY-6834","fields":{"summary":"CURRENT_TIME and CURRENT_TIMESTAMP should support optional precision argument","description":"See <http://savage.net.au/SQL/sql-92.bnf.html#current%20timestamp%20value%20function>, <http://www.h2database.com/html/functions.html#current_timestamp>, <http://www.postgresql.org/docs/8.2/static/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT>"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12862793","self":"https://issues.apache.org/jira/rest/api/2/issue/12862793","key":"DERBY-6833","fields":{"summary":"NPE in IndexRowGenerator.getExecutionFactory()","description":"Derby crashed with the following stack trace while running our application's integration tests.  This is the first time I've seen this, and cannot reproduce it.  It happened during our application's startup.  The embedded database had been opened by this point, and some initial queries had been executed.  \r\n\r\njava.lang.NullPointerException: null\r\n\tat org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getExecutionFactory(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getIndexRowTemplate(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getNullIndexRow(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.updateIndexStatsMinion(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.generateStatistics(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.processingLoop(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat org.apache.derby.impl.services.daemon.IndexStatisticsDaemonImpl.run(Unknown Source) ~[derby-10.11.1.1.jar:na]\r\n\tat java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_45]"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12862756","self":"https://issues.apache.org/jira/rest/api/2/issue/12862756","key":"DERBY-6832","fields":{"summary":"Derby JMX Beans could be made self-describing for tools like JConsole","description":"Derby's JMX management beans, such as the cache-related\r\nbeans created by DERBY-6733, could be more useful if they\r\nincluded some amount of internal documentation as part of\r\nthe beans themselves, perhaps by implementing the\r\ngetDescription apis defined by the StandardMBean\r\n(http://docs.oracle.com/javase/7/docs/api/javax/management/StandardMBean.html).\r\n\r\nAnother possible approach is described in this article, using\r\nannotation facilities:\r\nhttps://weblogs.java.net/blog/emcmanus/archive/2005/07/adding_informat.html\r\n\r\nIf the beans included this sort of information, tools like JConsole would\r\nprovide more information for users who are just getting started learning\r\nabout these beans and how they work."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12861753","self":"https://issues.apache.org/jira/rest/api/2/issue/12861753","key":"DERBY-6831","fields":{"summary":" org.apache.derby.client.am.DisconnectException: A communications error has been detected: Read timed out.","description":"We are using derby server 10.5.3.0 version with our product where we are consistently getting below connection timed out error   :\r\nCaused by: java.sql.SQLException: A communications error has been detected: Read timed out.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQuery(Unknown Source)\r\n\tat com.ibm.ac.si.iuregistry.IUTypeDatabaseImpl.orderInstanceIDsByTimeStamp(IUTypeDatabaseImpl.java:7359)\r\n\tat com.ibm.ac.si.iuregistry.IUTypeDatabaseImpl.listUndoOrder(IUTypeDatabaseImpl.java:10124)\r\n\t... 18 more\r\nCaused by: org.apache.derby.client.am.DisconnectException: A communications error has been detected: Read timed out.\r\n\tat org.apache.derby.client.net.NetAgent.throwCommunicationsFailure(Unknown Source)\r\n\tat org.apache.derby.client.net.Reply.fill(Unknown Source)\r\n\tat org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(Unknown Source)\r\n\tat org.apache.derby.client.net.Reply.readDssHeader(Unknown Source)\r\n\tat org.apache.derby.client.net.Reply.startSameIdChainParse(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.StatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatement.readOpenQuery_(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQueryX(Unknown Source)\r\n\t... 21 more\r\nCaused by: java.net.SocketTimeoutException: Read timed out\r\n\tat java.net.SocketInputStream.socketRead0(Native Method)\r\n\tat java.net.SocketInputStream.read(SocketInputStream.java:155)\r\n\t... 31 more\r\n\r\nThe derby logs doesn't show any error message but for the last prepared statement query it waits for sometime (around 5 mins) and then our program comes out i.e it ends with connection timed out error .\r\n\r\nDerby log statements :\r\n\r\n2015-09-03 09:40:01.308 GMT Thread[DRDAConnThread_8,5,derby.daemons] (XID = 6580), (SESSIONID = 3), (DATABASE = IURegistryDB), (DRDAID = NF000001.G418-1011056675071531060{4}), Begin compiling prepared statement: SELECT IUI.INSTANCE_ID FROM IU_INSTANCE IUI WHERE IUI.INSTANCE_ID IN (?,?) ORDER BY IUI.CREATED_TIME DESC :End prepared statement\r\n2015-09-03 09:40:01.308 GMT Thread[DRDAConnThread_8,5,derby.daemons] (XID = 6580), (SESSIONID = 3), (DATABASE = IURegistryDB), (DRDAID = NF000001.G418-1011056675071531060{4}), End compiling prepared statement: SELECT IUI.INSTANCE_ID FROM IU_INSTANCE IUI WHERE IUI.INSTANCE_ID IN (?,?) ORDER BY IUI.CREATED_TIME DESC :End prepared statement\r\n2015-09-03 09:40:01.324 GMT Thread[DRDAConnThread_8,5,derby.daemons] (XID = 6580), (SESSIONID = 3), (DATABASE = IURegistryDB), (DRDAID = NF000001.G418-1011056675071531060{4}), Executing prepared statement: SELECT IUI.INSTANCE_ID FROM IU_INSTANCE IUI WHERE IUI.INSTANCE_ID IN (?,?) ORDER BY IUI.CREATED_TIME DESC :End prepared statement with 2 parameters begin parameter #1: NULL :end parameter begin parameter #2: f26326912b681e5b:77389106:14f73d7488b:-778a :end parameter \r\n2015-09-03 09:42:03.105 GMT Thread[DRDAConnThread_9,5,derby.daemons] (XID = 424), (SESSIONID = 3), (DATABASE = TouchPointRegistryDB), (DRDAID = NF000001.G534-868067386902462499{5}), Rolling back\r\n2015-09-03 09:42:03.105 GMT Thread[DRDAConnThread_9,5,derby.daemons] (XID = 424), (SESSIONID = 3), (DATABASE = TouchPointRegistryDB), (DRDAID = NF000001.G534-868067386902462499{5}), Rolling back\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_7,5,derby.daemons] (XID = 382), (SESSIONID = 1), (DATABASE = TouchPointRegistryDB), (DRDAID = NF000001.H380-508905316620002396{3}), Committing\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_5,5,derby.daemons] (XID = 6545), (SESSIONID = 1), (DATABASE = IURegistryDB), (DRDAID = NF000001.H37F-592784859679789228{2}), Committing\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_7,5,derby.daemons] (XID = 382), (SESSIONID = 1), (DATABASE = TouchPointRegistryDB), (DRDAID = NF000001.H380-508905316620002396{3}), Rolling back\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_7,5,derby.daemons] (XID = 382), (SESSIONID = 1), (DATABASE = TouchPointRegistryDB), (DRDAID = NF000001.H380-508905316620002396{3}), Rolling back\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_5,5,derby.daemons] (XID = 6545), (SESSIONID = 1), (DATABASE = IURegistryDB), (DRDAID = NF000001.H37F-592784859679789228{2}), Rolling back\r\n2015-09-03 09:48:54.777 GMT Thread[DRDAConnThread_5,5,derby.daemons] (XID = 6545), (SESSIONID = 1), (DATABASE = IURegistryDB), (DRDAID = NF000001.H37F-592784859679789228{2}), Rolling back\r\n\r\nNot sure why derby connection is timed out. Could you please go through the derby log and help us to understand the cause of failure?"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12853718","self":"https://issues.apache.org/jira/rest/api/2/issue/12853718","key":"DERBY-6830","fields":{"summary":"Add user documentation for var_pop(), var_samp(), stddev_pop(), and stddev_samp()","description":"Add user documentation for the new aggregates added by DERBY-5466."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12850774","self":"https://issues.apache.org/jira/rest/api/2/issue/12850774","key":"DERBY-6829","fields":{"summary":"Document the simpleJson optional tool and the SimpleJsonVTI.","description":"We should document how to use the simple JSON functions introduced by DERBY-6825."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12848579","self":"https://issues.apache.org/jira/rest/api/2/issue/12848579","key":"DERBY-6828","fields":{"summary":"Network Server don't start in czech localized enviroment due missing key DRDA_MissingNetworkJar.S","description":"Network Server don't start in czech localized enviroment due missing key DRDA_MissingNetworkJar.S in file org/apache/derby/loc/drda/messages_cs.properties\r\n\r\nException:\r\nThu Jul 23 15:56:24 CEST 2015 : null\r\njava.lang.NullPointerException\r\n        at org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(Unknown Source)\r\n        at org.apache.derby.impl.drda.NetworkServerControlImpl.localizeMessage(Unknown Source)\r\n        at org.apache.derby.impl.drda.NetworkServerControlImpl.localizeMessage(Unknown Source)\r\n        at org.apache.derby.drda.NetworkServerControl.installSecurityManager(Unknown Source)\r\n        at org.apache.derby.drda.NetworkServerControl.main(Unknown Source)\r\n\r\n\r\nMissing key is called in file org.apache.derby.drda.NetworkServerControl.java at line 818.\r\n\r\nReproduce under windows in console run:\r\nset DERBY_OPTS=-Duser.language=cs\r\nstartNetworkServer.bat\r\n\r\nWorkaround:\r\nRun derby server under en localization.\r\nWindows consola run:\r\nset DERBY_OPTS=-Duser.language=en\r\nstartNetworkServer.bat\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12846179","self":"https://issues.apache.org/jira/rest/api/2/issue/12846179","key":"DERBY-6827","fields":{"summary":"Errors in LocalizedDisplayScriptTest on jdk 9","description":"LocalizedDisplayScriptTest raises errors when run with the latest early access build of JDK 9. This is due to a backward incompatibility introduced into JDK 9 by this issue: https://bugs.openjdk.java.net/browse/JDK-8008577. The fix may be simply to set the following java property when running this test:\r\n\r\njava.locale.providers=JRE,SPI"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12843508","self":"https://issues.apache.org/jira/rest/api/2/issue/12843508","key":"DERBY-6826","fields":{"summary":"SOA PROD - The state of datasource DifJavaDbDataSource, application domain-level is Suspended.","description":"Derby Information:\r\nLoaded from file:/u02/oracle/product/fmw/db-derby-10.11.1.1-bin/lib/derby.jar\r\njava.vendor=Sun Microsystems Inc.\r\njava.runtime.version=1.6.0_30-b30\r\nuser.dir=/u02/oracle/product/fmw/db-derby-10.11.1.1-bin\r\nos.name=Linux\r\nos.arch=amd64\r\nos.version=2.6.18-371.6.1.el5\r\nderby.system.home=/u02/oracle/product/fmw/db-derby-10.11.1.1-bin"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12843254","self":"https://issues.apache.org/jira/rest/api/2/issue/12843254","key":"DERBY-6825","fields":{"summary":"Add basic JSON support to Derby.","description":"Other database are adding support for the popular JSON data interchange format defined by https://www.ietf.org/rfc/rfc4627.txt. We could add a VTI to Derby which would unpack a JSON document into a set of rows. We could also add a reverse transformation, which turns a query result into a JSON document."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12842748","self":"https://issues.apache.org/jira/rest/api/2/issue/12842748","key":"DERBY-6824","fields":{"summary":"Move ShutdownException into shared code area","description":"We would like to refactor MessageService.getLocalizedMessage()\r\nso that it resides as part of the new MessageUtils class in the\r\nshared library.\r\n\r\nHowever, MessageService.getLocalizedMessage() currently has\r\na hard dependency on o.a.d.iapi.error.ShutdownException.\r\n\r\nThis subtask proposes to move ShutdownException to\r\no.a.d.shared.common.error.ShutdownException, so that it\r\ncan be used by new error-handling code in the shared library\r\nin addition to being used in the engine code."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12842676","self":"https://issues.apache.org/jira/rest/api/2/issue/12842676","key":"DERBY-6823","fields":{"summary":"Refactor uses of DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH","description":"There is some duplication of code, probably historic, which\r\nleads to multiple definitions of the named constant\r\nDB2_JCC_MAX_EXCEPTION_PARAM_LENGTH:\r\n\r\n$ find . -name '*.java' -exec grep DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH {} \\; -print\r\n        return Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH;\r\n./java/drda/org/apache/derby/impl/drda/AppRequester.java\r\n        public static final int DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH = 2400;\r\n./java/engine/org/apache/derby/iapi/reference/Limits.java\r\n                                                Types.VARCHAR, Limits.DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH),\r\n./java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java\r\n\r\nI suspect this code pre-dates the work to create the \"shared\" library\r\nwhere code shared among all Derby jar packages can reside.\r\n\r\nIt seems like we should be able to refactor this code so that\r\nthere is only one instance of DB2_JCC_MAX_EXCEPTION_PARAM_LENGTH,\r\nand it seems like the new MessageUtils class proposed by\r\nDERBY-6801 would be a good place for that constant to live.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12841708","self":"https://issues.apache.org/jira/rest/api/2/issue/12841708","key":"DERBY-6822","fields":{"summary":"Running setEmbeddedCP gives error saying \"Error: DERBY_HOME is not set. Please set the DERBY_HOME environment variable\"","description":"When derby ran in embedded mode as mentioned in https://db.apache.org/derby/papers/DerbyTut/install_software.html#derby_install, it gives error saying \"Error: DERBY_HOME is not set. Please set the DERBY_HOME environment variable\". THis can be fixed by creating another path variable \"DERBY_HOME\" with same value given for DERBY_INSTALL.\r\nEither documentation should be changed to set DERBY_HOME at installation or code should be change to read value from DERBY_INSTALL."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12841440","self":"https://issues.apache.org/jira/rest/api/2/issue/12841440","key":"DERBY-6821","fields":{"summary":"Include XMLOptimizerTraceTest in XMLSuite","description":"There is a sub-suite called XMLSuite that runs the XML tests,\r\nbut it does not currently run the XMLOptimizerTraceTest.\r\n\r\nSince that test suite is a significant quite for exercising\r\nDerby's XML support, it seems worth including that suite in\r\nthe XMLSuite.\r\n\r\nThis might require a bit of suite re-arrangement, to make sure\r\nthat we don't run XMLOptimizerTraceTest multiple times during larger suites.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12841201","self":"https://issues.apache.org/jira/rest/api/2/issue/12841201","key":"DERBY-6820","fields":{"summary":"Improve error handling in XmlVTI","description":"While writing XXE vulnerability test suites for XmlVTI, I found that\r\nsome of the error handling logic in XmlVTI is a bit rough and could\r\nbe made a bit smoother.\r\n\r\nAt least the following improvements would be useful:\r\n\r\n1) Remove the unconditional printStackTrace call in XmlVTI.next()\r\n    when it catches a Throwable.\r\n\r\n2) Chain the original exception to the SQLException using the\r\n   SQLException constructor which takes a \"cause\" argument.\r\n\r\n3) Include an XMLErrorHandler class so that fatal exceptions that\r\n   arise within the XML parser don't directly print their own messages\r\n   to System.err, to avoid printing\r\n\r\n    [junit] [Fatal Error] :1:1: The parser has encountered more than \"64,000\" entity expansions in this document; this is the limit imposed by the application.\r\n\r\n4) Close the _xmlResource input stream, if it exists, from the\r\n   XMLErrorHandler methods, so that the parser's files are closed\r\n   sooner and we are (I think) less likely to encounter\r\n\r\n    [junit] <assertDirectoryDeleted> attempt 1 left 2 files/dirs behind: 0=extin\\xmlOptimizerXXE2.trace 1=extin\r\n    [junit] <assertDirectoryDeleted> attempt 2 left 2 files/dirs behind: 0=extin\\xmlOptimizerXXE2.trace 1=extin\r\n    [junit] <assertDirectoryDeleted> attempt 3 left 2 files/dirs behind: 0=extin\\xmlOptimizerXXE2.trace 1=extin\r\n    [junit] <assertDirectoryDeleted> attempt 4 left 2 files/dirs behind: 0=extin\\xmlOptimizerXXE2.trace 1=extin"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12838264","self":"https://issues.apache.org/jira/rest/api/2/issue/12838264","key":"DERBY-6819","fields":{"summary":"incorrect results from a multi-column group by query","description":"I'm getting some strange results from a specific pattern of queries related to finding a count of columns grouped in two dimensions.\r\n\r\nThe following query works as I would expect:\r\n\r\nselect e.PART_NAME as ENGINE, b.PART_NAME as BODY, count(distinct m.ID) as NUM_MODELS from CARS.MODELS m\r\nleft outer join CARS.PART_NAMES e on m.ENGINE_ID=e.ID\r\nleft outer join CARS.PART_NAMES b on m.BODY_ID=b.ID\r\ngroup by e.PART_NAME, b.PART_NAME\r\n\r\nThis returns something like:\r\nENGINE\tBODY\tNUM_MODELS\r\nelectric\tcompact\t1\r\ngas\tcompact\t2\r\ngas\tsedan\t1\r\ngas\ttruck\t2\r\nhybrid\tcompact\t1\r\nhybrid\tsedan\t2\r\n\r\nSo this fictitious car company sells 2 different hybrid sedans, one gas sedan etc.\r\n\r\nIf I add a filter to the query that should not actually change the output, I see output that doesn't make sense.\r\n\r\nThis query filters out any car whose top speed is less than 50 (and all cars have a top speed higher than this):\r\n\r\nselect e.PART_NAME as ENGINE, b.PART_NAME as BODY, count(distinct m.ID) as NUM_MODELS from CARS.MODELS m\r\nleft outer join CARS.PART_NAMES e on m.ENGINE_ID=e.ID\r\nleft outer join CARS.PART_NAMES b on m.BODY_ID=b.ID\r\nleft outer join CARS.TOP_SPEED s on m.ID=s.ID\r\nwhere s.SPEED>50\r\ngroup by e.PART_NAME, b.PART_NAME\r\n\r\nThe results show the wrong values in column 2:\r\nENGINE\tBODY\tNUM_MODELS\r\nelectric\telectric\t1\r\ngas\tgas\t2\r\ngas\tgas\t1\r\ngas\tgas\t2\r\nhybrid\thybrid\t1\r\nhybrid\thybrid\t2\r\n\r\nI've tried the same query on DB2 with the same data and I get the results that I expect -- that is, both queries return the same result that I showed on the first query here.\r\n\r\nI'll attach a script that creates a database with the sample data used above."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12836758","self":"https://issues.apache.org/jira/rest/api/2/issue/12836758","key":"DERBY-6818","fields":{"summary":"java.lang.OutOfMemoryError","description":"We got a 'java.lang.OutOfMemoryError: Java heap space' when using a Derby disk database with the following schema.\r\n\r\n{code}\r\nCREATE TABLE TEST (   ID BIGINT NOT NULL\r\n,   NEXT _ID BIGINT\r\n,   PREV_ ID BIGINT\r\n,   TEST_XML XML);\r\n\r\nALTER TABLE TABLE\r\n        ADD PRIMARY KEY\r\n                (ID);\r\n{code}\r\n\r\nI opened the heap dump with Eclipse Memory Analyzer and found that tree instances of org.apache.derby.impl.store.access.sort.MergeInserter occupies 290 MB of memory (that is 66 % of the total heap)  \r\n\r\nThe problem seems to be that MergeInserter holds a sort buffer that contains complete rows and the TEST_XML is about 160 kB each. MergeInserter has an advanced algorithm to calculate the allowed size of the buffer, but is it necessary store the complete row in the buffer, i.e. the non-indexed values (TEST_XML is this case)?\r\n\r\nIs there some property I can set to limit the buffer size or is it possible to rewrite the SQL schema someway to exclude the XML type from the buffer?\r\n\r\nFollowing is the dominator tree from Eclipse Memory Analyzer:\r\n{code}\r\norg.apache.derby.impl.store.access.sort.MergeInserter @ 0xe3f72e20                                                                                                                                                                                                                                               |           72 |   127 533 080 |     30,76%\r\n\r\n|- org.apache.derby.impl.store.access.sort.SortBuffer @ 0xe3f73018                                                                                                                                                                                                                                               |           48 |   127 532 792 |     30,76%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed5e0                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |  '- org.apache.derby.iapi.types.DataValueDescriptor[4] @ 0xee3da280                                                                                                                                                                                                                                         |           32 |       164 344 |      0,04%\r\n\r\n|  |     |- org.apache.derby.iapi.types.SQLClob @ 0xee3da2a0                                                                                                                                                                                                                                                     |           56 |       164 240 |      0,04%\r\n\r\n|  |     |  |- java.lang.String @ 0xee3da2d8  < ?xml version=\"1.0\"?...|           24 |       164 160 |      0,04%\r\n\r\n|  |     |  |- char[1][] @ 0xee3da2f0                                                                                                                                                                                                                                                                            |           24 |            24 |      0,00%\r\n\r\n|  |     |  '- Total: 2 entries                                                                                                                                                                                                                                                                                  |              |               |          \r\n\r\n|  |     |- org.apache.derby.iapi.types.SQLLongint @ 0xee3da308                                                                                                                                                                                                                                                  |           24 |            24 |      0,00%\r\n\r\n|  |     |- org.apache.derby.iapi.types.SQLLongint @ 0xee3da320                                                                                                                                                                                                                                                  |           24 |            24 |      0,00%\r\n\r\n|  |     |- org.apache.derby.iapi.types.SQLLongint @ 0xee3da338                                                                                                                                                                                                                                                  |           24 |            24 |      0,00%\r\n\r\n|  |     '- Total: 4 entries                                                                                                                                                                                                                                                                                     |              |               |          \r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed608                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed630                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed658                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed680                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed6a8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed6d0                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed6f8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fed720                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fedd50                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fedd78                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fedda0                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3feddc8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fedff8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fef5c8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fef5f0                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3fef618                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff01f8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff04c8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff0608                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff0630                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff0658                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff0680                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff06a8                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  |- org.apache.derby.impl.store.access.sort.Node @ 0xe3ff06d0                                                                                                                                                                                                                                                  |           40 |       164 384 |      0,04%\r\n\r\n|  '- Total: 25 of 780 entries; 755\r\n{code}\r\n\r\nThis is a snippet of my jboss standalone.xml:\r\n\r\n{code:xml}\r\n        <datasources>\r\n                <xa-datasource jndi-name=\"java:/jdbc/MYDB\" pool-name=\"mydb_Pool\" enabled=\"true\">\r\n                    <xa-datasource-property name=\"DatabaseName\">\r\n                        mydb\r\n                    </xa-datasource-property>\r\n                    <xa-datasource-property name=\"CreateDatabase\">\r\n                        create\r\n                    </xa-datasource-property>\r\n                    <driver>derby-embedded</driver>\r\n                    <xa-pool>\r\n                        <is-same-rm-override>false</is-same-rm-override>\r\n                    </xa-pool>\r\n                    <security>\r\n                        <user-name>sa</user-name>\r\n                        <password>admin</password>\r\n                    </security>\r\n                </xa-datasource>\r\n       \r\n{code}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12836747","self":"https://issues.apache.org/jira/rest/api/2/issue/12836747","key":"DERBY-6817","fields":{"summary":"Cannot stop Query","description":"We cannot stop a SQL query from being executed or cancel it.\r\n\r\nIf we realize the SQL Query is wrong, and gone recursive or undeterminate with very high continuous CPU usage, the Query cannot be stopped. \r\n\r\nEven if we shut down the Network server the server does not shutdown and the java process has to be killed ...\r\n\r\nThere must be a mechanism to do so."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12836147","self":"https://issues.apache.org/jira/rest/api/2/issue/12836147","key":"DERBY-6816","fields":{"summary":"JMX Garbage collection","description":"When I use JMX remote and use Jconsole ... I click on Force Garbage Collection in Jconsole ...\r\n\r\nOn the Network Server in the console from where the Network Server was started lot of messages are printed ... Unloading XXX classes ...\r\n\r\nCan these messages be directed to the derby.log file?\r\n\r\nI think they should be so that it would be easier to analyze rather than read on the screen.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12835740","self":"https://issues.apache.org/jira/rest/api/2/issue/12835740","key":"DERBY-6815","fields":{"summary":"Connection timeout","description":"Is there a timeout property for derby connections on the server side?\r\n\r\nThat is if a client does not close a connection, derby server should close it automatically after a particular timeout.\r\n\r\nBecause number of unclosed connections will increase the number of threads and memory usage.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12835739","self":"https://issues.apache.org/jira/rest/api/2/issue/12835739","key":"DERBY-6814","fields":{"summary":"Connections not closed","description":"I think derby network server is not closing connections.\r\n\r\nIf I use JMX and see on JConsole, the AccumulatedConnectionCount goes on increasing.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12833965","self":"https://issues.apache.org/jira/rest/api/2/issue/12833965","key":"DERBY-6813","fields":{"summary":"Undocumented ON DELETE SET DEFAULT is parsed, accepted, but not enforced","description":"The REFERENCES clause implements almost all SQL standard actions for ON DELETE and ON UPDATE:\r\nhttps://db.apache.org/derby/docs/10.11/ref/rrefsqlj16357.html#rrefsqlj16357\r\n\r\nON DELETE SET DEFAULT is not explicitly supported by Derby (although, it would be nice). But the Derby parser accepts it, but doesn't enforce it as can be seen in this script\r\n\r\n{code}\r\ncreate table \"t1\"(\"v\" int not null)\r\ncreate table \"t2\"(\"w\" int)\r\nalter table \"t1\" add constraint \"pk\" primary key (\"v\")\r\ninsert into \"t1\" (\"v\") values (1), (2)\r\ninsert into \"t2\" (\"w\") values (1)\r\nalter table \"t2\" alter \"w\" set default 2\r\nalter table \"t2\" add constraint \"t2_fk\" foreign key (\"w\") references \"t1\" (\"v\") on delete set default\r\ndelete from \"t1\" where \"v\" = 1 -- this fails, but it shouldn't fail\r\n{code}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12833952","self":"https://issues.apache.org/jira/rest/api/2/issue/12833952","key":"DERBY-6812","fields":{"summary":"Make \"RESTRICT\" an optional keyword in \"DROP SEQUENCE\"","description":"Most SQL dialects that distinguish between RESTRICT and CASCADE in DDL statements default to RESTRICT, if the flag is not explicitly specified.\r\n\r\nDerby makes using RESTRICT mandatory in the DROP SEQUENCE statement:\r\nhttps://db.apache.org/derby/docs/10.11/ref/rrefsqljdropsequence.html\r\n\r\nIt would be useful for better interoperability to make it optional as well, given that it doesn't really add any value in this particular case."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12833163","self":"https://issues.apache.org/jira/rest/api/2/issue/12833163","key":"DERBY-6811","fields":{"summary":"Tasks for producing a 10.12.1 release","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12832424","self":"https://issues.apache.org/jira/rest/api/2/issue/12832424","key":"DERBY-6810","fields":{"summary":"Add regression tests for XXE vulnerability","description":"We should add some regression tests demonstrating that\r\nDerby is no longer vulnerable to an XXE assault.\r\n\r\nOne possibility would be to have a example using a local\r\nfile disclosure.\r\n\r\nAnother possibility would be to have example based on the\r\nwell-known \"Billion Laughs\" denial of service attack."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12830384","self":"https://issues.apache.org/jira/rest/api/2/issue/12830384","key":"DERBY-6809","fields":{"summary":"Java 1.8 feature use","description":"Suggestion ...\r\n\r\nIs it possible to auto modify the existing source code using tools like Netbeans, and take advantage of the new features in JDK 1.8 for better multiuser performance and better utilization of current day multicore processors?\r\n\r\nPlainly put, can we have from 11.0 onwards a version of derby which takes advantage of the advancements and new features in java 1.8 ... \r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12828407","self":"https://issues.apache.org/jira/rest/api/2/issue/12828407","key":"DERBY-6808","fields":{"summary":"Syntax error in DOAP file release section","description":"DOAP files can contain details of multiple release Versions, however each must be listed in a separate release section, for example:\r\n\r\n<release>\r\n      <Version>\r\n        <name>Apache XYZ</name>\r\n        <created>2015-02-16</created>\r\n        <revision>1.6.2</revision>\r\n      </Version>\r\n</release>\r\n<release>\r\n      <Version>\r\n        <name>Apache XYZ</name>\r\n        <created>2014-09-24</created>\r\n        <revision>1.6.1</revision>\r\n      </Version>\r\n</release>\r\n\r\nPlease can the project DOAP be corrected accordingly?\r\n\r\nThanks."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12827400","self":"https://issues.apache.org/jira/rest/api/2/issue/12827400","key":"DERBY-6807","fields":{"summary":"XXE attack possible by using XmlVTI and the XML datatype","description":"The Derby XML datatype and XmlVTI can be exploited, via XXE-based attacks, to expose sensitive information or launch denial-of-service assaults. This issue has CVE id CVE-2015-1832. This issue was brought to our attention by Philippe Arteau.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12824109","self":"https://issues.apache.org/jira/rest/api/2/issue/12824109","key":"DERBY-6806","fields":{"summary":"improve feedback of connection failure of ij","description":"The causes for connection errors are generally not revealed to the user when using the `connect` command inside the shell."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12824106","self":"https://issues.apache.org/jira/rest/api/2/issue/12824106","key":"DERBY-6805","fields":{"summary":"explain what bin/ij does in output of -h and --help","description":"`bin/ij -h` isn't recognized as trigger for short usage information and causes output `IJ ERROR: file not found: -h` and the long usage information triggered with `bin/ij --help` should at least contain an explanation what the tool does. The current form `Usage: java org.apache.derby.tools.ij [-p propertyfile] [inputfile]` is sufficient for the short usage information imo."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822881","self":"https://issues.apache.org/jira/rest/api/2/issue/12822881","key":"DERBY-6804","fields":{"summary":"Change SQLExceptionFactory in both Server and Client to throw Derby exception subclass","description":"We would like the SQLExceptionFactory in both the engine and in\r\nthe client to be changed so that instead of throwing a simple\r\nSQLIntegrityConstraintViolationException, it instead throws a\r\nDerbySQLIntegrityConstraintViolationException, which holds the\r\narguments specifying the table name and constraint name of\r\nthe constraint which was violated.\r\n\r\nNote that this subclass represents the first real change of behavior\r\nthat a Derby application could notice; the previous subtasks have\r\nall been internal refactorings of the code to prepare for this change.\r\n\r\nAs part of this task, we also want to provide additional regression\r\ntests demonstrating that the new exception can be caught and\r\nexamined in both embedded and client-server configurations."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822880","self":"https://issues.apache.org/jira/rest/api/2/issue/12822880","key":"DERBY-6803","fields":{"summary":"Change Sqlca and SqlException in NetworkClient to call MessageUtils","description":"Currently, the network client code is not able to access the arguments\r\nthat are associated with a Derby exception that is returned by the engine.\r\n\r\nWe would like to change the network client code, specifically the code\r\nin the Sqlca and SqlException classes, so that it uses the new MessageUtils\r\nclass to access the exception arguments.\r\n\r\nWe wish to take the exception arguments and associate them with the\r\nSqlException object, so that when the client calls the SQLExceptionFactory\r\nto create a SQLException to throw to the user application, it can create\r\na Derby-specific subclass of that exception, when appropriate, which\r\ncontains the arguments that the server sent to the client."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822879","self":"https://issues.apache.org/jira/rest/api/2/issue/12822879","key":"DERBY-6802","fields":{"summary":"Change NetworkServer code to use new MessageUtils class","description":"We would like to change the NetworkServer code which encodes and decodes message arguments for Derby exceptions which are returned\r\nto the client so that it uses the new MessageUtils class to do that\r\nencoding and decoding.\r\n\r\nThere won't be any change of behavior when we do this; this is just\r\na refactoring of code to allow for sharing between client and server."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822878","self":"https://issues.apache.org/jira/rest/api/2/issue/12822878","key":"DERBY-6801","fields":{"summary":"Implement MessageUtils class so client and server can share message argument encoding/decoding","description":"Currently, the Network Server contains code which encodes message arguments to be passed over DRDA to the client, and other code which\r\ndecodes the encoded message arguments when the client passes\r\nthem back in a call to SQLCAMESSAGE (see DERBY-1178 for additional\r\ndiscussion of this behavior).\r\n\r\nWe would like to extract that logic and place it into a new MessageUtils\r\nclass in the common shared library so that both the client and server\r\ncan manipulate the message arguments without duplicating the code."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822877","self":"https://issues.apache.org/jira/rest/api/2/issue/12822877","key":"DERBY-6800","fields":{"summary":"Implement DerbySQLIntegrityConstraintViolationException class","description":"As part of DERBY-6773, we wish to build a new exception class,\r\nto be named DerbySQLIntegrityConstraintViolationException,\r\nwhich extends java.sql.SQLIntegrityConstraintViolationException\r\nbut provides additional methods getConstraintName() and\r\ngetTableName().\r\n\r\nThis exception will be thrown by the SQLExceptionFactory classes\r\nin the client and in the engine, instead of the current code which\r\nthrows SQLIntegrityConstraintViolationException"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12822143","self":"https://issues.apache.org/jira/rest/api/2/issue/12822143","key":"DERBY-6799","fields":{"summary":"Suggested update to in-memory database docs","description":"The docs on the in-memory database at https://db.apache.org/derby/docs/10.11/devguide/cdevdvlpinmemdb.html say to create a new connection string with \"drop=true\" to drop an in-memory db. They don't say that you need to close that connection to actually drop the db."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12821184","self":"https://issues.apache.org/jira/rest/api/2/issue/12821184","key":"DERBY-6798","fields":{"summary":"Forward only ResultSet doesn't release passed rows for GC","description":"I'd like to iterate over a ResultSet that is larger than the amount of memory available to my application. I thought this would be possible with a ResultSet.TYPE_FORWARD_ONLY but memory usage appears to increase as I loop through the results and not be GC'd. Is my understanding correct? I've tried this using the H2 database and it appears to do this.\r\n\r\nI've attached a sample program to illustrate this. It creates a large table then iterates over it logging out the memory usage as it goes. There is a pause at the end of the iteration to allow the user to attach a debugger (such as jvisualvm) to inspect memory usage and request GC.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12779536","self":"https://issues.apache.org/jira/rest/api/2/issue/12779536","key":"DERBY-6797","fields":{"summary":"If a (machine/jvm) crash happens during hard upgrade, derby does not roll back the upgrade.","description":"When a crash happens during hard upgrade of derby, the upgrade -up to that point - is not rolled back. Depending on where the crash happens this might leave a broken database behind.\r\n\r\nThis makes it extra important to create a backup before doing a hard upgrade.\r\n\r\nI have not tested this with a soft upgrade.\r\n\r\nI will attach a test case which uses the upgrade test suite framework and uses a call of SanityManager.DEBUG_SET(\"upgrade_abort\") to send a flag, and a change in impl/sql/catalog/DD_version to listen for this flag.\r\nThus, it's only a test that would run in a sane environment.\r\n\r\nBut this test does show that even if we see the error during hard upgrade, the resulting database appears to be in the newer version. I have manually tested this with 10.11 (by modifying DD_version in 10.11 to throw the error regardless of sanity manager or not) and with 10.12 by running my new test.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12777693","self":"https://issues.apache.org/jira/rest/api/2/issue/12777693","key":"DERBY-6796","fields":{"summary":"Impossible to define new sub-subprotocols","description":"We discovered this in 10.9.1.0 but I looked at the source in trunk and the issue is still there.\r\n\r\nTo define a new sub-subprotocol (or I guess override an existing one?) by setting a system property, you are supposed to set \"derby.subSubProtocol.myproto\" with the name of your storage factory class as the value.\r\n\r\nProblem is, the way these are loaded strips the wrong prefix off the front of the string. BaseMonitor.java:\r\n\r\n{code}\r\n            if (key.startsWith(Property.MODULE_PREFIX)) {\r\n                tag = key.substring(Property.MODULE_PREFIX.length());\r\n            } else if (key.startsWith(Property.SUB_SUB_PROTOCOL_PREFIX)) {\r\n                tag = key.substring(Property.MODULE_PREFIX.length());\r\n            } else {\r\n                continue nextModule;\r\n            }\r\n{code}\r\n\r\nSo you get \"rotocol.myproto\" as the protocol you have to use in your connection strings.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12776456","self":"https://issues.apache.org/jira/rest/api/2/issue/12776456","key":"DERBY-6795","fields":{"summary":"Can the JMX docs be made to more precisely reference the published API pages?","description":"The link to the published API in the Derby 10.9 documentation for the JMX beans is broken: http://db.apache.org/derby/docs/10.9/adminguide/radminjmxintro.html references http://db.apache.org/derby/javadoc/publishedapi/jdbc4/ which does not exist.\r\n\r\nIn the 10.10 and 10.11 docs, the text of the admin guide has changed to omit the link, which means we no longer have a broken link.\r\n\r\nBut it seems like it would be more helpful to restore the link, but have it point to the new location of the published api docs.\r\n\r\nThat is, it seems like http://db.apache.org/derby/docs/10.11/adminguide/radminjmxintro.html should point to http://db.apache.org/derby/docs/10.11/publishedapi/index.html or maybe to http://db.apache.org/derby/docs/10.11/publishedapi/org/apache/derby/mbeans/package-frame.html\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12774239","self":"https://issues.apache.org/jira/rest/api/2/issue/12774239","key":"DERBY-6794","fields":{"summary":"SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS(1) returns a long varchar (32,700)","description":"The internal function SYSCS_UTIL.SYSCS_GET_RUNTIMESTATISTICS(1) returns a VARCHAR(32,700), also known as a LONG VARCHAR in Derby.\r\n\r\nIn a lot of cases, this is not enough.\r\n\r\nA couple of years ago at our company, we tried to mimic EXPLAIN functionality as sent by MySQL, however, because MySQL didn't satisfy our needs, we needed a change, and needed somethings similar, as reflected here http://mail-archives.apache.org/mod_mbox/db-derby-user/200810.mbox/%3C48F4483B.6040906@Sun.com%3E.\r\n\r\nNow, we're building something like http://explain.depesz.com.\r\n\r\nAs an example, which consists of some ridiculously simple JSP; Not by any means complete, but working processing engine for the explain plan, we created this: http://www.republika.nl/upload/explain_test.jpg\r\n\r\nSoon, we'll provide a link to use this for all of you, like depesz.com does. We'll enter some other JIRA issues to be sure about what we're doing, but basically it means you can simply copy & paste your explain plans.\r\n\r\nWe do intend to give it back to the community, by releasing it via the Apache License v2.0, but only when we're sure that every assumption we made is correct. In the meantime we'll provide a URL where you can copy and paste explained plans, just like depesz.com does.\r\n\r\nHowever, we've got some complicated queries, for which the runtime statistics retrieved by the built-in function are bigger than a LONG VARCHAR...\r\n\r\nIs there something we can do about that?\r\n\r\nI've thought about changing code and making it a CLOB, but that would break backwards compatibility.\r\n\r\nI'll give a full URL within 2 weeks, so you can try and test if you like what you see.\r\n\r\nIn the meantime... the issue is that we don't always get the full result plan, because of character limitations...\r\n\r\nThanks for your attention.\r\n\r\n-- Stephan van Loendersloot."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12773015","self":"https://issues.apache.org/jira/rest/api/2/issue/12773015","key":"DERBY-6793","fields":{"summary":"Stream or LOG value cannot be retrieved more than once","description":"Since migrating from derby 10.7.1.1 to 10.11.1.1 really innocent code stopped working: retrieving resultset column data using column names if resultset contains blobs stopped working.\r\n\r\nI am attaching a maven project with a unit test which proves the issue. If in pom.xml you change the version to 10.7.1.1 the test will pass. We are using spring-jdbc' queryForMap() which traverses resultset metadata and queries attributes by their column labels. Used to work before."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12772749","self":"https://issues.apache.org/jira/rest/api/2/issue/12772749","key":"DERBY-6792","fields":{"summary":"Could not execute JDBC batch update","description":"We are using Derby v10.8.3.3 for our product CastIron. Our customer is getting the following error in their production environment.\r\nSEVERE [T-84] [job:96CC8CC6085B45D13583E180C1014E82] [com.approuter.maestro.vm.Task] Internal error: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update\r\norg.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update\r\n\tat org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)\r\n\tat org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)\r\n\tat org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)\r\n\tat org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:253)\r\n\tat org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:92)\r\n\tat org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:87)\r\n\tat org.hibernate.jdbc.AbstractBatcher.prepareBatchStatement(AbstractBatcher.java:222)\r\n\tat org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2354)\r\n\tat org.hibernate.persister.entity.AbstractEntityPersister.updateOrInsert(AbstractEntityPersister.java:2307)\r\n\tat org.hibernate.persister.entity.AbstractEntityPersister.update(AbstractEntityPersister.java:2607)\r\n\tat org.hibernate.action.EntityUpdateAction.execute(EntityUpdateAction.java:92)\r\n\tat org.hibernate.engine.ActionQueue.execute(ActionQueue.java:250)\r\n\tat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:234)\r\n\tat org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:142)\r\n\tat org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)\r\n\tat org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)\r\n\tat org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)\r\n\tat org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:338)\r\n\tat org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:106)\r\n\tat com.approuter.maestro.opera.rdbms.RdbmsSession.commit(RdbmsSession.java:363)\r\n\tat com.approuter.maestro.vm.Task.commit(Task.java:1136)\r\n\tat com.approuter.maestro.activities.Invoke.persist(Invoke.java:280)\r\n\tat sun.reflect.GeneratedMethodAccessor278.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\r\n\tat java.lang.reflect.Method.invoke(Method.java:611)\r\n\tat com.approuter.maestro.activities.Instruction.call(Instruction.java:45)\r\n\tat com.approuter.maestro.vm.Program.call(Program.java:596)\r\n\tat com.approuter.maestro.vm.Task.run(Task.java:692)\r\n\tat com.approuter.maestro.vm.Task.run(Task.java:631)\r\n\tat com.approuter.maestro.vm.Program$RunnableWrapper.run(Program.java:2207)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:450)\r\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:314)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:149)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:109)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:217)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)\r\n\tat java.lang.Thread.run(Thread.java:761)\r\n------------------------------\r\nNeed quick analysis and solution."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12772588","self":"https://issues.apache.org/jira/rest/api/2/issue/12772588","key":"DERBY-6791","fields":{"summary":"Google Summer of Code 2015: Derby bug fixing","description":"For the 2015 Google Summer of Code, I am offering to mentor a\r\nstudent for general bug fixing of the Derby database.\r\n\r\nThe Derby JIRA has collected the community's knowledge about\r\nknown bugs in Derby, and there are plenty of bugs for us to work on.\r\n\r\nIf you take on this project, with assistance from me, you'll:\r\n- select Derby issues from the Derby issue to fix\r\n- reproduce those problems by writing and running tests\r\n- develop patches to address the problems\r\n- work with the community to get the patches reviewed\r\n- have your reviewed and accepted contributions committed to the next Derby release."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12771326","self":"https://issues.apache.org/jira/rest/api/2/issue/12771326","key":"DERBY-6790","fields":{"summary":"SYSCS_UTIL.SYSCS_PEEK_AT_IDENTITY increase to 100 after restart AD Network Server","description":"After restart application, the counter of generated column value increase to 100 after each restarting. \r\n\r\nMy table:\r\n\r\nCREATE TABLE TICKETSNUM (ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)); INSERT INTO TICKETSNUM VALUES (DEFAULT);\r\n\r\nGet counter:\r\n\r\nVALUES SYSCS_UTIL.SYSCS_PEEK_AT_IDENTITY('APP', 'TICKETSNUM');"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12767515","self":"https://issues.apache.org/jira/rest/api/2/issue/12767515","key":"DERBY-6789","fields":{"summary":"intermittent test failure in test case testNetworkServerSecurityMechanism in NSSecurityMechanismTest with Oracle Java 1.8","description":"The following failure was seen with Oracle's Java 8:\r\n\r\n1) testNetworkServerSecurityMechanism(org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest)junit.framework.AssertionFailedError: The expected SQL state must be five characters long\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:876)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:943)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDriverManager(NSSecurityMechanismTest.java:589)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionsUsingDriverManager(NSSecurityMechanismTest.java:438)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:292)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: java.sql.SQLException: Java exception: 'Unexpected CryptoAPI failure generating seed: java.lang.InternalError'.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.jdbc.ClientDriver.connect(Unknown Source)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:664)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:270)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDriverManager(NSSecurityMechanismTest.java:542)\r\n\t... 37 more\r\nCaused by: ERROR XJ001: Java exception: 'Unexpected CryptoAPI failure generating seed: java.lang.InternalError'.\r\n\tat org.apache.derby.client.net.NetConnection.flowConnect(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.<init>(Unknown Source)\r\n\tat org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(Unknown Source)\r\n\t... 41 more\r\nCaused by: java.lang.InternalError: Unexpected CryptoAPI failure generating seed\r\n\tat sun.security.provider.NativeSeedGenerator.getSeedBytes(NativeSeedGenerator.java:62)\r\n\tat sun.security.provider.SeedGenerator.generateSeed(SeedGenerator.java:144)\r\n\tat sun.security.provider.SecureRandom.engineGenerateSeed(SecureRandom.java:128)\r\n\tat java.security.SecureRandom.generateSeed(SecureRandom.java:522)\r\n\tat org.apache.derby.client.am.EncryptionManager.generateSeed(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.initializeClientSeed(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.flowUSRSSBPWDconnect(Unknown Source)\r\n\t... 44 more\r\n\r\nThis has happened only on trunk (e.g. built at revision level 1649991), but then I'm only running jdk 1.8 testing on trunk, and only on a windows machine.\r\nThe nightly testing at Oracle or on Apache machines has never shown this problem.\r\nI run multiple jvms on the same machine, and I have only seen this failure when the Oracle 1.8 jvm was the last one to get started.\r\nThis does mean it starts with -Dderby.tests.basePort=3500."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12765980","self":"https://issues.apache.org/jira/rest/api/2/issue/12765980","key":"DERBY-6788","fields":{"summary":"Wrong value inserted by INSERT INTO with multiple subselects","description":"Certain INSERT INTO statements with multiple subselects insert wrong values, i.e. may lead to data corruption.\r\n\r\nHere is a very simple example how to reproduce this bug: Start with a new (empty) Derby database, create 3 tiny tables, and insert two records:\r\n\r\ncreate table m1 (k varchar(64), s decimal);\r\ncreate table m2 (k varchar(64), s decimal);\r\ncreate table v (s decimal);\r\n\r\ninsert into m1 values ('Bug', 2015);\r\ninsert into m2 values ('Bug', 1957);\r\n\r\nNow, the following (likewise simple) select\r\n\r\nselect res.* from (select d2.s from m1\r\nleft join (select k,s from m2) as d2 on m1.k=d2.k) as res\r\n\r\nyields 1957, of course. - Of course? Not entirely: If I add an INSERT INTO to that select, i.e.\r\n\r\ninsert into v (select res.* from (select d2.s from m1\r\nleft join (select k,s from m2) as d2 on m1.k=d2.k) as res)\r\n\r\nthen table v contains 1 row (as it should), but in this row s=4,355,431. This value is interesting, because 4355431 = Hex 427567 and 'B' = X42, 'u'=X75, 'g'=X67.\r\n\r\nFinally, if I slightly modify the INSERT INTO above as\r\n\r\ninsert into v (select res.* from (select d2.s*1 from m1\r\nleft join (select k,s from m2) as d2 on m1.k=d2.k) as res)\r\n\r\nthen it works correct.\r\n\r\nThis phenomenon arose with every Derby version 10.x I tried (see list above).\r\n\r\nPossibly this bug is related to DERBY-6786, where similar INSERT INTOs with subselects appear.\r\n\r\nAddendum: There is indeed a close relationship between DERBY-6786 and this one: Let's denote by SQL1 the first INSERT INTO above, by SQL2 the second one, i.e.\r\n\r\nSQL1 = insert into v (select res.* from (select d2.s from m1 left join (select k,s from m2) as d2 on m1.k=d2.k) as res)\r\nSQL2 = insert into v (select res.* from (select d2.s*1 from m1 left join (select k,s from m2) as d2 on m1.k=d2.k) as res)\r\n\r\nWe further assume that there are exactly 1 record R1 in table M1 and exactly 1 record R2 in table M2, both without NULL-values. Then:\r\n\r\nIf R1.k is equal to R2.k, then SQL1 -> data corruption, SQL2 -> correct.\r\nIf R1.k is not equal to R2.k, then SQL1 -> correct, SQL2 -> NullPointerException.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12764962","self":"https://issues.apache.org/jira/rest/api/2/issue/12764962","key":"DERBY-6787","fields":{"summary":"SYSCS_INPLACE_COMPRESS_TABLE can fall through and do a non-inplace compress","description":"Calling SYSCS_INPLACE_COMPRESS_TABLE('APP', 'TESTTBL', 0, 0, 0); should be a no-op, but will fall through and do a non-inplace compress instead."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12764513","self":"https://issues.apache.org/jira/rest/api/2/issue/12764513","key":"DERBY-6786","fields":{"summary":"NullPointerException in INSERT INTO statement with multiple subselects","description":"Hello,\r\nI'm getting this wrapped NullPointerException when I try to execute an INSERT INTO SQL statement:\r\n\r\njava.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:101)\r\n\tat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:349)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2400)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:85)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1437)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:711)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(EmbedStatement.java:190)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(EmbedStatement.java:179)\r\n\tat de.foconis.dakobp.unittests.div.TestMain.testNullpointer(TestMain.java:49)\r\n\tat de.foconis.dakobp.unittests.div.TestMain.main(TestMain.java:28)\r\nCaused by: java.sql.SQLException: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:125)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)\r\n\t... 12 more\r\nCaused by: java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:42)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory40.java:125)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:71)\r\n\tat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Util.java:148)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:370)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:436)\r\n\t... 10 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.exe.acf81e0010x014axa9c2x46e6x000000c6dc781.e2(Unknown Source)\r\n\tat org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:105)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:275)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:263)\r\n\tat org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(DMLWriteResultSet.java:127)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:519)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:461)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:340)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1344)\r\n\t... 5 more\r\n\r\nMost likely this bug has already been reported as DERBY-5041, which has already been closed (although I don't use a GROUP BY clause).\r\n\r\nThe original statement is quite complex and partially generated, but the error can be reproduced easily, using a statement as simple as this:\r\ninsert into t\r\n select erg.* from (\r\n  select d1.s from (select k,s from k1) as d1\r\n   right join (select k,s from k2) as d2 on d1.k = d2.k\r\n  ) as erg\r\n where s > 10\r\n\r\nI will attach the file \"repro.sql\", containing all SQL statements required to reproduce it (including the CREATE TABLEs).\r\n\r\nThese are my investigation results:\r\n\r\nConditions\r\n-------------\r\n1. the outermost statement must NOT be a SELECT (e. g. INSERT)\r\n2. there has to be a outer join in the subselect, where at least one dataset has no join partner\r\n3. an outer SELECT must have a restriction (WHERE clause) and access a column from the table, that did not have a join partner\r\n\r\nError state\r\n-------------\r\nThe NullPointer occurs inside a generated class. So i enabled the Debug Option \"DumpClassFile\", to get the generated class file (the decompiled java class file will also be appended).\r\nThe method \"e2\", stated in the StackTrace, performs the restrction \"where s > 10\". Therefore it calls getColumnFromRow() with its resultSetNumber.\r\n\r\nThis is where the error occurs: there is no \"current row\" available. Precisely, the \"row\" property of the activation class at the specified index (which is the resultSetNumber=3 in this example) is not set.\r\nIt gets a bit complicated now, I will try to explain it, starting with the generated resultset hierarchy.\r\n\r\nThis tree of resultset implementations is generated to perform the query:\r\n\r\nImplementation\t\t\t\tresultSetNumber\r\n-------------------\t\t\t\t---------------------\r\nInsertResultSet\t\t\t-> none\r\n ProjectRestrictResultSet\t\t-> 5\r\n  ProjectRestrictResultSet\t-> 4\r\n   HashLeftOuterJoinResultSet\t-> 0\r\n    TableScanResultSet\t\t-> 1\r\n    HashTableResultSet\t\t-> 3\r\n     TableScanResultSet\t\t-> 2\r\n\r\nThe HashTableResultSet, which got the resultSetNumber 3 doesn't set a current row, because there is no join partner (still everything correct). But the ProjectRestrictResultSet on position 4 uses the restriction method (\"e2\"), which accesses a column on resultSetNumber 3 -> error.\r\n\r\nAs far as I can tell, a restriction must never relate to the source of an outer join ResultSet. The numeration error does not occur, if the outermost statement is a SELECT and the numeration is generated top-down.\r\n\r\nUnfortunately I couldn't find an easy solution for this problem. In my case, this is a critical bug, because changing the query as workaround is difficult, since parts of it are generated. Please note, that this error is not dependent on any environment settings or platform and occured with all of the abolve mentioned versions. I didn't test the versions from 10.6 to 10.7, but probably those are also affected.\r\n\r\nIf you require any further information, please let me know. I'm able to perform a build, so I wouldn't need a full version, a patch would be sufficient."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12762688","self":"https://issues.apache.org/jira/rest/api/2/issue/12762688","key":"DERBY-6785","fields":{"summary":"Latest JDBC driver from 10.11.1.1 gives exception when trying to connect to 10.10.2.0","description":"I have downloaded 10.11.1.1 and 10.10.2.0 from Apache Derby download and installed them in 2 separate machines.\r\n\r\nI have a GUI client that connects to the toursdb database of both versions using a JDBC connection that makes uses of derby.jar, derbyclient.jar and derbynet.jar\r\n\r\nI use the latest JDBC drivers from 10.11.1.1 to connect to both the database versions. The drivers I make use of are derby.jar, derbyclient.jar and derbynet.jar\r\n\r\nConnection to 10.10.2.0 is successful, but when I try to Alter/Drop Tables and Views, Create an Index or try to retrieve column information of tables, i get the below exception:\r\n\r\nThe classpath settings for the two environments are identical and If i replace the derby.jar, derbyclient.jar and derbynet.jar of the latest release with the 10.10.2.0 ones, it works fine with 10.10.2.0. \r\n\r\nSo my question is backward compatibility of the latest Apache Derby JDBC drivers. Can I use 10.11.1.1 jars to connect to 10.10.2.0 ?\r\n\r\nException:\r\njava.sql.SQLException: Error marshalling or unmarshalling a user defined type: org.apache.derby.catalog.types.TypeDescriptorImpl; local class incompatible: stream classdesc serialVersionUID = -5485274209578709396, local class serialVersionUID = -3812847726962874375\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.ClientResultSet.getString(Unknown Source)\r\n\tat \\\\...\\\\ .\\\\हिñçêČάй語简�?한\\\\.cꋦᚹ⣞ꊼ 8.a(Unknown Source)\r\n\tat com.common.ui.tree.eꏷꃒꆶᡰ.a(Unknown Source)\r\n\tat com.common.ui.tree.eꏷꃒꆶᡰ.wR(Unknown Source)\r\n\tat com.common.ui.tree.eꏷꃒꆶᡰ$1.process(Unknown Source)\r\n\tat com.common.ui.util.BackgroundThread.run(Unknown Source)\r\nCaused by: ERROR XN020: Error marshalling or unmarshalling a user defined type: org.apache.derby.catalog.types.TypeDescriptorImpl; local class incompatible: stream classdesc serialVersionUID = -5485274209578709396, local class serialVersionUID = -3812847726962874375\r\n\tat org.apache.derby.client.am.Cursor.get_UDT(Unknown Source)\r\n\tat org.apache.derby.client.am.Cursor.getString(Unknown Source)\r\n\t... 6 more\r\nCaused by: java.io.InvalidClassException: org.apache.derby.catalog.types.TypeDescriptorImpl; local class incompatible: stream classdesc serialVersionUID = -5485274209578709396, local class serialVersionUID = -3812847726962874375\r\n\tat java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:617)\r\n\tat java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1622)\r\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1517)\r\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1771)\r\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)\r\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)\r\n\t... 8 more\r\n\r\n\r\nLet me know if you need any more information"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12762434","self":"https://issues.apache.org/jira/rest/api/2/issue/12762434","key":"DERBY-6784","fields":{"summary":"change optimizer to choose in list multiprobe more often","description":"Using the  multi-probe join strategy is an obvious performance win when\r\nthe optimizer chooses it.  There are cases currently where the costing \r\nmakes the optimizer choose other plans which do not perform as well as\r\nthe multi-probe strategy.\r\n\r\nThe class of queries that are affected are those where the number of terms\r\nin the IN LIST is large relative to the number of rows in the table, and there\r\nis a useful index to probe for the column that is referenced by the IN LIST.\r\n\r\nThere are multiple benefits to choosing the multi-probe strategy, including\r\nthe following:\r\n1) often better execution time, where the alternative is to do a full table \r\n    merge on the column.\r\n2) The multi-probe strategy results in \"pushing\" the work into the store, \r\n     and this may result in more concurrent behavior (see DERBY-6300 and DERBY-6301).   First less rows may\r\n     be locked by probing rather than full table scan (and in the worst case\r\n     same number if query manages to probe on every value in table).  \r\n     Second depending on isolation level of the query store will only matching\r\n     rows, while in the current implementation all rows that are returned by\r\n     store for qualification above store will remain locked whether they \r\n     qualify or not.   Especially in small table cases other query plan choices\r\n     have been changed to favor probing indexes rather than full table scans\r\n     even if pure cpu is better with table scan.  "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12761462","self":"https://issues.apache.org/jira/rest/api/2/issue/12761462","key":"DERBY-6783","fields":{"summary":"WHEN clause in CREATE TRIGGER for UPDATE is not working for the sql script below","description":"Following sql script was shared on derby-user(http://mail-archives.apache.org/mod_mbox/db-derby-user/201412.mbox/%3c548ABA6D.8000509@zoho.com%3e).\r\n\r\nThe UPDATE TRIGGER  with the WHEN clause below does not fire as expected. Same script works fine on DB2.\r\nij version 10.11 \r\n ij> connect 'jdbc:derby:MyDbTest;create=true'; \r\n ij> CREATE TABLE t1 (id INTEGER, done_date DATE, status CHAR(1)); \r\n 0 rows inserted/updated/deleted \r\n ij> CREATE TRIGGER tr1 AFTER UPDATE OF status ON t1 REFERENCING NEW AS newrow FOR EACH ROW WHEN (newrow.status='d') UPDATE t1 SET done_date=current_date WHERE id=newrow.id; \r\n 0 rows inserted/updated/deleted \r\n ij> insert into t1 values (1, null, 'a'); \r\n 1 row inserted/updated/deleted \r\n ij> SELECT * FROM t1; \r\n ID         |DONE_DATE |STA& \r\n --------------------------- \r\n 1          |NULL      |a    \r\n  \r\n 1 row selected \r\n ij> UPDATE t1 SET status='d'; \r\n 1 row inserted/updated/deleted \r\n ij> SELECT * FROM t1; \r\n ID         |DONE_DATE |STA& \r\n --------------------------- \r\n 1          |NULL      |d    \r\n  \r\n 1 row selected \r\n ij> exit; "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12761332","self":"https://issues.apache.org/jira/rest/api/2/issue/12761332","key":"DERBY-6782","fields":{"summary":"Unknown page format at page Page(51,Container(0, 1136))","description":"Hi, from three days I have this error when I try to execute a simple query on all table of my database. The error message is this:\r\nDEBUG [AWT-EventQueue-0] (MyLog4J.java:45) - java.sql.SQLException: Formato pagina sconosciuto alla pagina Page(51,Container(0, 1136)), segue il dump di pagina: Hex dump:\r\n00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ff0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n\r\n    at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source)\r\n    at esempio.Visualizzazioni.estraiMesiEAnno(Visualizzazioni.java:286)\r\n    at com.mcsolution.easyMgmt.Amministrazione.AbstractAmministrazione.settaVariabiliComuni(AbstractAmministrazione.java:108)\r\n    at com.mcsolution.easyMgmt.Amministrazione.PanelAmministrazione.creaSwing(PanelAmministrazione.java:102)\r\n    at esp.TestaFrame$MenuLookDemo22$7.actionPerformed(TestaFrame.java:358)\r\n    at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1995)\r\n    at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2318)\r\n    at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:387)\r\n    at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:242)\r\n    at javax.swing.AbstractButton.doClick(AbstractButton.java:357)\r\n    at javax.swing.plaf.basic.BasicMenuItemUI.doClick(BasicMenuItemUI.java:809)\r\n    at javax.swing.plaf.basic.BasicMenuItemUI$Handler.mouseReleased(BasicMenuItemUI.java:850)\r\n    at java.awt.Component.processMouseEvent(Component.java:6297)\r\n    at javax.swing.JComponent.processMouseEvent(JComponent.java:3275)\r\n    at java.awt.Component.processEvent(Component.java:6062)\r\n    at java.awt.Container.processEvent(Container.java:2039)\r\n    at java.awt.Component.dispatchEventImpl(Component.java:4660)\r\n    at java.awt.Container.dispatchEventImpl(Container.java:2097)\r\n    at java.awt.Component.dispatchEvent(Component.java:4488)\r\n    at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4575)\r\n    at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4236)\r\n    at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4166)\r\n    at java.awt.Container.dispatchEventImpl(Container.java:2083)\r\n    at java.awt.Window.dispatchEventImpl(Window.java:2489)\r\n    at java.awt.Component.dispatchEvent(Component.java:4488)\r\n    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:674)\r\n    at java.awt.EventQueue.access$400(EventQueue.java:81)\r\n    at java.awt.EventQueue$2.run(EventQueue.java:633)\r\n    at java.awt.EventQueue$2.run(EventQueue.java:631)\r\n    at java.security.AccessController.doPrivileged(Native Method)\r\n    at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)\r\n    at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)\r\n    at java.awt.EventQueue$3.run(EventQueue.java:647)\r\n    at java.awt.EventQueue$3.run(EventQueue.java:645)\r\n    at java.security.AccessController.doPrivileged(Native Method)\r\n    at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)\r\n    at java.awt.EventQueue.dispatchEvent(EventQueue.java:644)\r\n    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)\r\n    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)\r\n    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)\r\n    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)\r\n    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)\r\n    at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)\r\nCaused by: java.sql.SQLException: Formato pagina sconosciuto alla pagina Page(51,Container(0, 1136)), segue il dump di pagina: Hex dump:\r\n00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000060: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ff0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n\r\n    at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n    ... 51 more\r\nCaused by: ERROR XSDBB: Formato pagina sconosciuto alla pagina Page(51,Container(0, 1136)), segue il dump di pagina: Hex dump:\r\n00000000: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000010: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000020: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000030: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000050: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000920: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000930: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000940: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000950: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000960: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000970: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000980: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000990: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009b0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009d0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009e0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n000009f0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a00: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a10: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a20: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a30: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a40: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a50: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a60: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a70: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a80: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000a90: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000aa0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ab0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ac0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ad0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ae0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000af0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b00: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b10: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b20: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b30: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b40: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b50: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b60: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b70: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b80: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000b90: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ba0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000bb0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000bc0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000bd0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000be0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000bf0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000c00: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000c10: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000c20: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000f70: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000f80: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000f90: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000fa0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000fb0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000fc0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000fd0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000fe0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n00000ff0: 0000 0000 0000 0000 0000 0000 0000 0000  ................\r\n\r\n    at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(Unknown Source)\r\n    at org.apache.derby.impl.services.cache.ConcurrentCache.find(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.FileContainer.getNextHeadPage(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.BaseContainer.getNextPage(Unknown Source)\r\n    at org.apache.derby.impl.store.raw.data.BaseContainerHandle.getNextPage(Unknown Source)\r\n    at org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(Unknown Source)\r\n    at org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(Unknown Source)\r\n    at org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n    ... 45 more\r\n\r\nCan we help me?"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12761326","self":"https://issues.apache.org/jira/rest/api/2/issue/12761326","key":"DERBY-6781","fields":{"summary":"ErrorCode: 30000 when creating Foreign Keys","description":"I'm an Apache OFBiz committer. While working on a custom project I encountered an issue I don't have with Postgres using the same data model (schema). This issue appears only in a specific case where I use a new feature I recently introduced in OFBiz.\r\n\r\nThis feature allows to extend the size of a column part of a primary key. By extend I mean extend the out of the box OFBiz data model. For instance in OFBiz the size of the orderId column, that we find in many related tables (we call tables, entities in OFBiz), is 20 chars (VARCHAR(20)) by default, but I needed something larger (VARCHAR(60)). Also extend means here that it redefines the size of the column, it does not change the in the out of the box OFBiz data model. This means, for instance, that I create what we call an hot-deploy component which is actually a mean to dynamically redefine/override things, like here the size of the column, without having to patch the original source where the original data model is defined.\r\n\r\nThis works fine with Postgres but not with Derby. In Derby the indexes are created (see FIN_ACT_TX_ODITM FinAccountTransIndexes.png) but not the Foreign Keys (see FinAccountTrans.png)\r\n\r\nThe OFBiz Entity Engine (the one which is still used in Jira), generates approximately the same code for the Foreign Keys creation for Postgres and Derby\r\n\r\nPostgres shows no error when generating the Foreign Keys, it uses (generated by the OFBiz Entity Engine)\r\n{code}\r\nALTER TABLE fin_account_trans ADD CONSTRAINT fin_act_tx_oditm FOREIGN KEY (order_id, order_item_seq_id) REFERENCES order_item (order_id, order_item_seq_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;\r\n{code}\r\n\r\nDerby shows an error, it uses (for easier comparison I removed the \"OFBIZ.\" schema prefix that Derby uses)\r\n{code}\r\nALTER TABLE FIN_ACCOUNT_TRANS ADD CONSTRAINT FIN_ACT_TX_ODITM FOREIGN KEY (ORDER_ID, ORDER_ITEM_SEQ_ID) REFERENCES ORDER_ITEM (ORDER_ID, ORDER_ITEM_SEQ_ID);\r\n\r\nError: Constraint 'FIN_ACT_TX_ODITM' is invalid: there is no unique or primary key constraint on table '\"OFBIZ\".\"ORDER_ITEM\"' that matches the number and types of the columns in the foreign key.\r\nSQLState:  X0Y44\r\nErrorCode: 30000\r\n{code}\r\n\r\nAs I said, only the foreign keys miss in Derby DB; the indexes related to the (Constraint 'FIN_ACT_TX_ODITM') are generated. \r\n\r\nI also tried to remove the last part of the SQL request, but got the same kind of error:\r\n{code}\r\nALTER TABLE FIN_ACCOUNT_TRANS ADD CONSTRAINT FIN_ACT_TX_ODITM FOREIGN KEY (ORDER_ID, ORDER_ITEM_SEQ_ID) REFERENCES ORDER_ITEM;\r\n\r\nError: Constraint 'FIN_ACT_TX_ODITM' is invalid: the types of the foreign key columns do not match the types of the referenced columns.\r\nSQLState:  X0Y42\r\nErrorCode: 30000\r\n{code}\r\n\r\nI tried to understant the issue, but I'm puzzled because I'm sure it's not an Entity Engine SQL generation issue, since Postgres works w/o issues. Could it be related with how and when Derby generate its specific \"SQL-data-time\" indexes?\r\n\r\nSince I can't help much for now, I attach also 2 other snapshots which show ORDER_ITEM table columns (OrderItem.png) and indexes (OrderItemIndex.png). \r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12761105","self":"https://issues.apache.org/jira/rest/api/2/issue/12761105","key":"DERBY-6780","fields":{"summary":"change conglomerate cache to handle concurrency and alter table add column calls.","description":"The store maintains a \"conglomerate cache\" for performance reasons, to\r\navoid having to go to disk and rebuild the Conglomerate structure every\r\ntime there is some interaction with a table.  It maintains this cache across\r\nall users in the db and across transactions.\r\n\r\nThe store's conglomerate cache as originally designed expected the\r\n\"Conglomerate\" data structure to be static.   At issue is that support was\r\nadded to this data structure to track the number and types of columns in\r\nthe conglomerate.  Initially alter table add column always resulted in\r\na new underlying \"Conglomerate\" being created so the originaly expectation\r\nwas still valid.\r\n\r\nAt some point some versions of alter table add column were implemented\r\nthat did not require a rebuild of all of the underlying conglomerates, \r\nincluding the base table.  This meant that the data in the conglomerate\r\ncache could go out of date.  The fix implemented for this was to have \r\nalter table get exclusive lock on table, update the cache as it did it's work,\r\nand invalidate the entire cache on abort.   When abort happened the code\r\ndid not have enough information to invalidate just what it needed.  \r\n\r\nDERBY-4057 added more concurrency to the testing of alter table and\r\nshowed a problem with the current code.  The current normal path \r\nfor store interaction is to first get the Conglomerate from the cache and then\r\nuse information in the data structure to \"open\" the table with proper locking.\r\nThis allows a small window if concurrent alter table add column (and maybe\r\ndrop column) are happening. \r\n\r\nvarious problems come to mind:\r\n1) a concurrent thread might get conglomerate with uncommitted alter \r\n    table info, and then wait on alter table to finish.  If the alter table aborts\r\n    it will be left with wrong information.\r\n2) a concurrent thread might come in after alter table abort invalidates\r\n     the cache, but before the abort finishes.  This will then load a bad \r\n     version into the cache for others to see later.  This is what was \r\n     happening with background concurrent issues in DERBY-6774, and fixed\r\n     only for the background threads.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12760767","self":"https://issues.apache.org/jira/rest/api/2/issue/12760767","key":"DERBY-6779","fields":{"summary":"Provide subclass of SQLException for duplicate key insertions","description":"A commonly-occurring situation is to take some special action when an insert fails due to a duplicate key; for example, to update the existing row or to retry the insert with a new key (e.g. mutate \"Name\" into \"Name(1)\", \"Name(2)\" etc. until a unique key is found). At present this requires code similar to:\r\n{noformat}\r\n    try {\r\n       //... insert new row\r\n    }\r\n    catch (SQLException e) {\r\n        if (e.getSQLState().equals(DUPLICATE_KEY)) {\r\n            // ... take recovery action\r\n        }\r\n        else {\r\n            throw e;\r\n        }\r\n    }\r\n{noformat}\r\nIt would be more convenient if a subclass of SQLException were used to report this precise error. The SQLIntegrityConstraintViolationException that is currently thrown will also be thrown in other case where a constraint is violated. A new exception subclass for this specific situation would not affect any existing code, and would allow the code above to be simplified to this:\r\n{noformat}\r\n    try {\r\n        //... insert new row\r\n    }\r\n    catch (DuplicateKeyException e) {    // or some other suitable name\r\n        // ... take recovery action\r\n    }\r\n{noformat}\r\nThis would allow a more elegant, more O-O solution to what is, in my experience, a common use case without having to discriminate based on the value of getSQLState()."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12760669","self":"https://issues.apache.org/jira/rest/api/2/issue/12760669","key":"DERBY-6778","fields":{"summary":"SSL tests are failing on 10.8 codeline with IBM jdk 1.4.2 after poodle security backport","description":"DERBY-6764(analyze impact of poodle security alert on Derby client - server ssl support) was fixed in 10.12 codeline. The backport of the fix to 10.8(other codelines do not have this issue) has caused SSL related tests to fail on 10.8 codeline with IBM jdk 1.4.2. This jira is created to provide a fix on 10.8 codeline for IBM jdk 1.4.2"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12758597","self":"https://issues.apache.org/jira/rest/api/2/issue/12758597","key":"DERBY-6777","fields":{"summary":"MERGE INSERT on GENERATED key causes npe","description":"To reproduce: merge 2 tables where the recipient has a generated pk and the source table has at least 6 rows of data.  \r\n\r\nExample:\r\n\r\n{code:sql}\r\nCREATE TABLE COLTEST.TEMPDATA1 (id BIGINT not null primary key GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1), DATA1 VARCHAR(1024) not null, DATA2 VARCHAR(50));\r\nCREATE TABLE COLTEST.TEMPDATA2 (DATA1 VARCHAR(50) not null, DATA2 VARCHAR(50));\r\n\r\nINSERT INTO COLTEST.TEMPDATA2 (DATA1, DATA2) VALUES ('rowA', 'Ad2'),('rowB', 'Bd2'),('rowC', 'Cd2'),('rowD', 'Dd2'),('rowE', 'Ed2'),('rowF', 'Fd2');\r\n\r\nMERGE INTO COLTEST.TEMPDATA1 M USING COLTEST.TEMPDATA2 AS U ON M.DATA1 = U.DATA1 \r\nWHEN NOT MATCHED THEN INSERT (DATA1, DATA2) VALUES (U.DATA1, U.DATA2);\r\n{code}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12758087","self":"https://issues.apache.org/jira/rest/api/2/issue/12758087","key":"DERBY-6776","fields":{"summary":"improve XSAS3 error - add details of the collumn type mismatch","description":"While debugging DERBY-6774 encountered a failure in nightly insane testing:\r\nERROR XSAS3: The type of a row inserted into a sort does not match the sort's template.\r\n\r\nIt would be nice if this error included the details encountered at runtime."}}]}
{"expand":"schema,names","startAt":100,"maxResults":100,"total":6867,"issues":[{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12758041","self":"https://issues.apache.org/jira/rest/api/2/issue/12758041","key":"DERBY-6775","fields":{"summary":"add to testBlobLinkedListReclamationOnRollback() test to check that free space is used on subsequent inserts","description":"rather than check absolute number of free pages after looping abort, change test to sleep for awhile after all the inserts and then insert same number of rows and verify that it uses all the reclaimed free pages.  This check is better than the currently commented out check of absolute free pages which is timing dependent on machines/hardware."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12757606","self":"https://issues.apache.org/jira/rest/api/2/issue/12757606","key":"DERBY-6774","fields":{"summary":"background post commit threads cause ASSERTS/errors on interaction with alter table add column","description":"intermittent error in sane test runs in some nightly runs.\r\n\r\njava.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED Expected (column_id == format_ids.length)column_id = 1format_ids.length = 2format_ids = [I@2abb6423XJ001.U\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:112)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)\r\n\tat org.apache.derby.client.am.ClientStatement.execute(ClientStatement.java:990)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.AlterTableTest.testAddIdentityColumn(AlterTableTest.java:377)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED Expected (column_id == format_ids.length)column_id = 1format_ids.length = 2format_ids = [I@2abb6423XJ001.U\r\n\tat org.apache.derby.client.am.ClientStatement.completeSqlca(ClientStatement.java:2109)\r\n\tat org.apache.derby.client.am.ClientStatement.completeExecuteImmediate(ClientStatement.java:1676)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(NetStatementReply.java:209)\r\n\tat org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(NetStatementReply.java:60)\r\n\tat org.apache.derby.client.net.StatementReply.readExecuteImmediate(StatementReply.java:47)\r\n\tat org.apache.derby.client.net.NetStatement.readExecuteImmediate_(NetStatement.java:142)\r\n\tat org.apache.derby.client.am.ClientStatement.readExecuteImmediate(ClientStatement.java:1672)\r\n\tat org.apache.derby.client.am.ClientStatement.flowExecute(ClientStatement.java:2401)\r\n\tat org.apache.derby.client.am.ClientStatement.executeX(ClientStatement.java:995)\r\n\tat org.apache.derby.client.am.ClientStatement.execute(ClientStatement.java:981)\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12757165","self":"https://issues.apache.org/jira/rest/api/2/issue/12757165","key":"DERBY-6773","fields":{"summary":"Derby throws plain SQLIntegrityConstraintViolationException","description":"If a unique constraint is violated by an insert statement, then Derby throws an SQLIntegrityConstraintViolationException. The error message contains, in particular, the constraint name and the table name.\r\n\r\nTo distinguish between cases with various constraints, Derby should instead throw a subclass of SQLIntegrityConstraintViolationException, with methods like getConstraintName(), and getTableName().\r\n\r\nSee also https://hibernate.atlassian.net/browse/HHH-9516.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12756185","self":"https://issues.apache.org/jira/rest/api/2/issue/12756185","key":"DERBY-6772","fields":{"summary":"intermittent test failure in LangScripts schemas","description":"I saw a failure in LangScripts schemas.sql on a trunk test run on windows 2008 with ibm 1.7:\r\n{noformat}\r\n1) schemas(org.apache.derbyTesting.functionTests.tests.lang.LangScripts)junit.framework.ComparisonFailure: Output at line 477 expected:<...                   |[BTREE (1)]      > but was:<...                   |[NULL     ]      >\r\n\tat org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:110)\r\n\tat org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:201)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n{noformat}\r\n\r\nSee: http://people.apache.org/~myrnavl/derby_test_results/main/windows/testSummary-1639825.html\r\n\r\nWithout code changes this same test passed fine with other jvms.\r\nThe diff is resulting from this query:\r\n{noformat}\r\nselect schemaname, tablename, descriptor as descr\r\nfrom sys.sysschemas s, sys.sysconglomerates c , sys.systables t\r\nwhere CAST(t.tablename AS VARCHAR(128)) = 'SAMPLETAB'\r\n        and s.schemaid = c.schemaid\r\n        and c.tableid = t.tableid\r\norder by schemaname, tablename;\r\n{noformat}\r\n\r\nThis gives three rows: In the master file (removed some spaces for display):\r\n{noformat}\r\nSCHEMANAME  |TABLENAME        |DESCR\r\n-------------------------------------------------------------------------\r\nAPP                     |SAMPLETAB        |NULL\r\nTEST                   |SAMPLETAB        |BTREE (1)\r\nTEST                   |SAMPLETAB        |NULL\r\n{noformat}\r\n\r\nIn the failed situation, the 'TEST' rows are ordered differently.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12755762","self":"https://issues.apache.org/jira/rest/api/2/issue/12755762","key":"DERBY-6771","fields":{"summary":"Derby is crashing and writing org.apache.derby.impl.drda.DRDAProtocolException: Execution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 0; Error Code Value = 3. Plaintext connection attempt from an SSL enabled client?","description":"The derby db crashes and writes the following log into derby.out\r\n\r\nExecution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 0; Error Code Value = 3. Plaintext connection attempt from an SSL enabled client?\r\norg.apache.derby.impl.drda.DRDAProtocolException: Execution failed because of a Distributed Protocol Error:  DRDA_Proto_SYNTAXRM; CODPNT arg  = 0; Error Code Value = 3. Plaintext connection attempt from an SSL enabled client?\r\n        at org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(DRDAConnThread.java:513)\r\n        at org.apache.derby.impl.drda.DDMReader.readDssHeader(Unknown Source)\r\n        at org.apache.derby.impl.drda.DRDAConnThread.exchangeServerAttributes(DRDAConnThread.java:1109)\r\n        at org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:663)\r\n        at org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:279)\r\n\r\n\r\nI have observed the PS Perm Generation used space is > 99%.\r\nPlease provide some information what is triggering this and how to resolve this.\r\n\r\nThanks in advance..."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12755525","self":"https://issues.apache.org/jira/rest/api/2/issue/12755525","key":"DERBY-6770","fields":{"summary":"Update the documentation to reflect new information in server log file about list of enabled protocols","description":"DERBY-6768(List the enabled protocols in derby.log for network server configuration) added new information info server log file at the startup time to list all the enabled protocols. It will be good to update our documentation to reflect this new information in the log file."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12754917","self":"https://issues.apache.org/jira/rest/api/2/issue/12754917","key":"DERBY-6769","fields":{"summary":"sane.derbyTesting.jar.lastcontents can be \"out of date\" but no build error results","description":"I did a SANE build against a newly created client on trunk and go no errors.\r\nI then did an ant refreshjardriftcheck, and it generated a change to \r\nsane.derbyTesting.jar.lastcontents to be checked in, it is included at end of description.\r\n\r\nThere seems to be 2 problems here:\r\n1) sane.derbyTesting.jar.lastcontents checked in version is likely out of date and needs to be updated.\r\n2) The build should notice it is out of date and fail.\r\n\r\nI was led to this as I am working on a change that did add files to derby.jar\r\nbut was confused that it was generating changes for derbyTesting.jar in my own development client.  This is why I tried it on a clean client and ran refresh even though build was clean."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12752108","self":"https://issues.apache.org/jira/rest/api/2/issue/12752108","key":"DERBY-6768","fields":{"summary":"List the enabled protocols in derby.log for network server configuration","description":"DERBY-6764 is the result of poodle security alert in SSLv3 and SSLv2Hello protocols. For future, it will be good to know the protocols that are enabled on the server side so it is easier to know if the product may be impacted by a security issue with any specific protocol. To achieve this, at the server boot up time, we should list these enabled protocols in derby.log"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12750487","self":"https://issues.apache.org/jira/rest/api/2/issue/12750487","key":"DERBY-6767","fields":{"summary":"error in nightly regression test: heapscan(org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest)junit.framework.ComparisonFailure","description":"Single failure in one jvm run on one night, worked in other jvms.  \r\nibm16, main\r\n\r\nhttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1632716-suites.All_diff.txt\r\nThere was 1 failure:\r\n1) heapscan(org.apache.derbyTesting.functionTests.tests.store.StoreScriptsTest)junit.framework.ComparisonFailure: Output at line 229 expected:<...            |0     |[2                   |7                   |4096       |28672]               > but was:<...            |0     |[9                   |0                   |4096       |0    ]               >\r\n\tat org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(CanonTestCase.java:110)\r\n\tat org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest(ScriptTestCase.java:201)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:120)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:443)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:460)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12749992","self":"https://issues.apache.org/jira/rest/api/2/issue/12749992","key":"DERBY-6766","fields":{"summary":"java.sql.SQLException: nospc.U  Unexpected no space error while attempting to update a row on page","description":"We already had this error with version 10.8.2.2 an hoped that it would be fixed in 10.10.2.0 due to [DERBY-4923] - but it is not.\r\n\r\nThis error occurs sporadically on updating or inserting objects via hibernate. The application runs for weeks without a problem (20-50 object updates/inserts per second) and then the error occures up to 10 times in 2 hours; after that the error can be absent for days or weeks.\r\n\r\nWe use only these data types:\r\nNUMERIC,SMALLINT,TIMESTAMP,VARCHAR\r\n\r\nStacktrace:\r\n\r\nCaused by: java.sql.SQLException: Unexpected no space error while attempting to update a row on page Page(94,Container(0, 1632)). Values of internal fields at time of error are as follows: slot = 301, recordId = 28, newColumnList = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, nextColumn = -1, mode = 0, nextPortionHandle = null, page dump = \r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 51 more\r\nCaused by: java.sql.SQLException: nospc.U\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\t... 48 more\r\nCaused by: ERROR nospc: nospc.U\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.logRow(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.UpdateOperation.<init>(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12749528","self":"https://issues.apache.org/jira/rest/api/2/issue/12749528","key":"DERBY-6765","fields":{"summary":"Further improvements on derby optimizer overrides are possible","description":"With DERBY-573 support was provided for derby specific optimizer overrides, by using the --DERBY-PROPERTIES phrase in a query.\r\n\r\nDERBY-6305 was regarding improvement in documentation.\r\nA number of overrides are still referenced in the code but their workings needs to be researched and possibly improved; tests need to be devised for them; and they need to be documented.\r\n\r\nRick attached a spec to DERBY-6305 that can be used as the starting point for this work: https://issues.apache.org/jira/secure/attachment/12596337/DerbyDashProperties.html.\r\nA wiki page was created to refer to the undocumented properties: https://wiki.apache.org/db-derby/UndocumentedDerbyBehavior\r\nAnd there was discussion on the developers list resulting in the improved documentation: http://apache-database.10148.n7.nabble.com/is-there-an-optimizer-override-to-force-multi-probe-query-plan-td132838.html"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12748727","self":"https://issues.apache.org/jira/rest/api/2/issue/12748727","key":"DERBY-6764","fields":{"summary":"analyze impact of poodle security alert on Derby client - server ssl support","description":"Recently, a security weakness was found in SSLv3, POODLE: SSLv3 vulnerability (CVE-2014-3566)\r\nDerby supports ssl between the client and network server.\r\n\r\nWe should investigate this and decide if we need to change our product, e.g. to eliminate support for SSL in favor of its successor TLS.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12748042","self":"https://issues.apache.org/jira/rest/api/2/issue/12748042","key":"DERBY-6763","fields":{"summary":"Allow users to specify TRANSLATE function","description":"I was wondering if Derby could please allow users to specify a TRANSLATE function.  It does not look like one exists but when I try to create one I am denied because TRANSLATE is a reserved word.  Right now we are using Derby as an embedded database used for local development and DAO impl testing (DB2 is used for official testing and production) and would like to be able to specify this function so our SQL statements work against both Derby and DB2. \r\n\r\nThanks,\r\nMark"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12748024","self":"https://issues.apache.org/jira/rest/api/2/issue/12748024","key":"DERBY-6762","fields":{"summary":"Missing method error in CaseExpressionTest","description":"It looks as though the recent back ports to 10.10 have introduced a reference to a method which was introduced in Java 6 and which does not exist in Java 1.4: java.util.Arrays.copyOf( Object[], int ). See http://download.java.net/javadesktop/derby/request_5597470/\r\n\r\n{noformat}\r\n    java.lang.NoSuchMethodError: java.util.Arrays.copyOf([Ljava/lang/Object;I)[Ljava/lang/Object;\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testNotElimination(CaseExpressionTest.java:472)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12747795","self":"https://issues.apache.org/jira/rest/api/2/issue/12747795","key":"DERBY-6761","fields":{"summary":"Closing resultset after retrieving a large > 32k value lob does not release locks","description":"Same issue as in https://issues.apache.org/jira/browse/DERBY-2892 but seems to have made it into 10.0.2.0\r\n\r\nI've create a simple java that \r\n*) creates a database + table.\r\n*) inserts data (first round 10k blob)\r\n*) select with close rs and close statement\r\n*) prints locks\r\n*) inserts data (first round > 32k blob)\r\n*) select with close rs and close statement\r\n*) prints locks\r\n\r\nIn the scenario with the 32k blob the Shared Lock on the row is not released until the transaction is commited.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12746269","self":"https://issues.apache.org/jira/rest/api/2/issue/12746269","key":"DERBY-6760","fields":{"summary":"test_01_planCost has been failing for last couple nights on trunk and 10.11 with Unexpected SQL state. expected:<XIE0S> but was:<null>","description":"test_01_planCost has failed on trunk and 10.11 for last couple nightly runs. Output from 10.11(revision 1629345) test run is as follows\r\n\r\nhttp://people.apache.org/~myrnavl/derby_test_results/v10_11/linux/testlog/ibm16/1629345-suites.All_diff.txt\r\n1) test_01_planCost(org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest)junit.framework.ComparisonFailure: Unexpected SQL state. expected:<XIE0S> but was:<null>\r\nCaused by: java.sql.SQLException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\nCaused by: java.security.PrivilegedActionException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\nCaused by: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\nCaused by: ERROR XIE0S: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\n2) test_01_planCost(org.apache.derbyTesting.functionTests.tests.lang.XMLOptimizerTraceTest)junit.framework.AssertionFailedError: The exception's SQL state must be five characters long\r\nCaused by: java.sql.SQLNonTransientConnectionException: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\nCaused by: ERROR null: java.sql.SQLException: The operation was not performed, because the specified output file (extinout/xott.xml) already exists. The procedure will not overwrite an existing file, even if the process has permissions to write to that file, due to security concerns, and to avoid accidental file damage. Please either change the output file name in the procedure arguments to specify a file which does not exist, or delete the existing file, then retry the operation.\r\n\r\nThe failures from trunk are at\r\nhttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1629352-suites.All_diff.txt\r\nhttp://people.apache.org/~myrnavl/derby_test_results/main/linux/testlog/ibm16/1629345-suites.All_diff.txt"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12746192","self":"https://issues.apache.org/jira/rest/api/2/issue/12746192","key":"DERBY-6759","fields":{"summary":"Derby 10.10 backport issue (fall 2014)","description":"This issue is  issue is used to track an effort to backport fixes to 10.10\r\n\r\nHere is a filter for the list:\r\nhttps://issues.apache.org/jira/issues/?filter=12326503\r\n\r\nHere is the approach\r\n\r\n1) Choose a bug to backport from the list: Look at comment to make sure nobody else has picked up the issue.\r\n\r\n2) Reassign the issue to yourself (without reopening), put a comment that you are backporting the fix to 10.10 and link to this issue.\r\n\r\n3) After backport reassign the bug to the original owner and adjust fix version.\r\n\r\n4) If you were not able to backport for some reason, label derby_backport_reject10_10 as appropriate and unlink from this issue."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12746155","self":"https://issues.apache.org/jira/rest/api/2/issue/12746155","key":"DERBY-6758","fields":{"summary":"Driver.connect() returns null when using file-based URL","description":"The following program can be used to reproduce this issue:\r\n\r\n{code}\r\nimport java.sql.Driver;\r\nimport java.sql.DriverManager;\r\nimport java.util.Properties;\r\n\r\npublic class Test {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Driver d = (Driver) Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(\"user\", \"TEST\");\r\n        properties.setProperty(\"password\", \"TEST\");\r\n        System.out.println(d.connect(\"jdbc:derby:C:/data/derby/test;create=true\", properties));\r\n        System.out.println(DriverManager.getConnection(\"jdbc:derby:C:/data/derby/test;create=true\", properties));\r\n    }\r\n}\r\n{code}\r\n\r\nWhen run, the above program will output something like:\r\n\r\n{monospace}\r\nnull\r\norg.apache.derby.impl.jdbc.EmbedConnection@1226204845 (XID = 18681), (SESSIONID = 1), (DATABASE = C:/data/derby/test), (DRDAID = null) \r\n{monospace}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12746154","self":"https://issues.apache.org/jira/rest/api/2/issue/12746154","key":"DERBY-6757","fields":{"summary":"Driver.connect() returns null when using file-based URL","description":"The following program can be used to reproduce this issue:\r\n\r\n{code}\r\nimport java.sql.Driver;\r\nimport java.sql.DriverManager;\r\nimport java.util.Properties;\r\n\r\npublic class Test {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Driver d = (Driver) Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance();\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(\"user\", \"TEST\");\r\n        properties.setProperty(\"password\", \"TEST\");\r\n        System.out.println(d.connect(\"jdbc:derby:C:/data/derby/test;create=true\", properties));\r\n        System.out.println(DriverManager.getConnection(\"jdbc:derby:C:/data/derby/test;create=true\", properties));\r\n    }\r\n}\r\n{code}\r\n\r\nWhen run, the above program will output something like:\r\n\r\n{monospace}\r\nnull\r\norg.apache.derby.impl.jdbc.EmbedConnection@1226204845 (XID = 18681), (SESSIONID = 1), (DATABASE = C:/data/derby/test), (DRDAID = null) \r\n{monospace}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12746006","self":"https://issues.apache.org/jira/rest/api/2/issue/12746006","key":"DERBY-6756","fields":{"summary":"intermittent test failure with 10.10 in tests.compatibility.VersionedNetworkServerTestSetup and ClientCompatibilityRunControl","description":"After the workaround of DERBY-6739, it seems there is now an intermittent test failure happening wih the 10.10 compatibility suite.\r\n\r\nSee: \r\nhttp://download.java.net/javadesktop/derby/request_5597173\r\nwhich shows failures with Linux_ia32_jdk6, Linux_jdk8-compact2, and Solaris_amd64_jdk6, but no others. However on this run:\r\nhttp://download.java.net/javadesktop/derby/request_5597153\r\nshows failures with Linux_amd64_jdk7, Solaris_amd64_jdk6 and Solaris_amd64_jdk7. \r\nI did not see this failure with the IBM test runs, but those run on fewer platforms.\r\n\r\nThere's typically 2 failures, and one error.\r\nThe error has no information.\r\nNot every failure  has the 2nd failure.\r\nIn each case where we have the 2nd failure, it's with the combination client 10.10.2.1 <> server 10.9.1.0) \r\n\r\nThe stack trace for the two failures is (from: http://download.java.net/javadesktop/derby/request_5597153/javadb-task-3946133.html, Solaris_amd64_jdk7):\r\n\r\n1) org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.unknown \r\n  junit.framework.AssertionFailedError: server failed to come up:Spawned NetworkServerControl exitCode=1\r\nSTDERR:\r\nException in thread \"main\" java.lang.ExceptionInInitializerError\r\n\tat java.lang.Class.forName0(Native Method)\r\n\tat java.lang.Class.forName(Class.java:190)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer(NetworkServerControlImpl.java:1031)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(NetworkServerControlImpl.java:731)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(NetworkServerControlImpl.java:2279)\r\n\tat org.apache.derby.drda.NetworkServerControl.main(NetworkServerControl.java:351)\r\nCaused by: java.lang.SecurityException: sealing violation: package org.apache.derby.iapi.util is sealed\r\n\tat java.net.URLClassLoader.getAndVerifyPackage(URLClassLoader.java:388)\r\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:417)\r\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:71)\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:361)\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:355)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:354)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:425)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:358)\r\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\r\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2570)\r\n\tat java.lang.Class.getMethod0(Class.java:2813)\r\n\tat java.lang.Class.getMethod0(Class.java:2822)\r\n\tat java.lang.Class.getMethod(Class.java:1663)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.getImplementations(BaseMonitor.java:1177)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.getDefaultImplementations(BaseMonitor.java:1239)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(BaseMonitor.java:295)\r\n\tat org.apache.derby.impl.services.monitor.FileMonitor.<init>(FileMonitor.java:58)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Monitor.java:285)\r\n\tat org.apache.derby.iapi.jdbc.JDBCBoot.boot(JDBCBoot.java:67)\r\n\tat org.apache.derby.jdbc.EmbeddedDriver.boot(EmbeddedDriver.java:196)\r\n\tat org.apache.derby.jdbc.EmbeddedDriver.<clinit>(EmbeddedDriver.java:92)\r\n\r\n\tat org.apache.derbyTesting.functionTests.tests.compatibility.VersionedNetworkServerTestSetup.setUp(VersionedNetworkServerTestSetup.java:109)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:20)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n---------------\r\n2) org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.combination(client 10.10.2.1 <> server 10.9.1.0) \r\njunit.framework.AssertionFailedError: client VM failed: :Spawned combination(client 10.10.2.1 <> server 10.9.1.0) exitCode=1\r\nSTDOUT:\r\nE\r\nTime: 0.18\r\nThere was 1 error:\r\n1) JDBCDriverTest suitejava.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'wombat' with class loader sun.misc.Launcher$AppClassLoader@67f797, see the next exception for details.::SQLSTATE: XSLANDatabase at /localhome/tendril4.2/work/run/27875377/junit/wombat has an incompatible format with the current version of the software.  The database was created by or upgraded by version 10.10.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(SQLExceptionFactory40.java:112)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:364)\r\n\tat org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:176)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:571)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:187)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:100)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:67)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:43)\r\n\tat org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1718)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)\r\n\tat org.apache.derbyTesting.functionTests.tests.compatibility.JDBCDriverTest$1.setUp(JDBCDriverTest.java:1360)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:20)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: org.apache.derby.client.am.SqlException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ040, SQLERRMC: Failed to start database 'wombat' with class loader sun.misc.Launcher$AppClassLoader@67f797, see the next exception for details.::SQLSTATE: XSLANDatabase at /localhome/tendril4.2/work/run/27875377/junit/wombat has an incompatible format with the current version of the software.  The database was created by or upgraded by version 10.10.\r\n\tat org.apache.derby.client.am.Connection.completeSqlca(Connection.java:2184)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:497)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:390)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:253)\r\n\tat org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:80)\r\n\tat org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:849)\r\n\tat org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:785)\r\n\tat org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(NetConnection.java:614)\r\n\tat org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:409)\r\n\tat org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:223)\r\n\tat org.apache.derby.client.net.NetConnection40.<init>(NetConnection40.java:74)\r\n\tat org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(ClientJDBCObjectFactoryImpl40.java:259)\r\n\tat org.apache.derby.jdbc.ClientDriver.connect(ClientDriver.java:168)\r\n\r\nFAILURES!!!\r\nTests run: 0,  Failures: 0,  Errors: 1\r\n\r\n\r\n\tat org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.testClient(ClientCompatibilityRunControl.java:112)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12745737","self":"https://issues.apache.org/jira/rest/api/2/issue/12745737","key":"DERBY-6755","fields":{"summary":"Error in MathTrigFunctionsTest.testRadians ","description":"The following error was seen in the nightly tests. It seems to affect all branches and it appears to be a regression in the latest promoted build of JDK 9 (https://bugs.openjdk.java.net/browse/JDK-8059674). See http://sthjavadb01.se.oracle.com/javadb-testing/request_5597089/\r\n\r\n{noformat}\r\n    junit.framework.AssertionFailedError: expected:<3.88335758568738E-309> but was:<3.883357585687384E-309>\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testRadians(MathTrigFunctionsTest.java:585)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12745494","self":"https://issues.apache.org/jira/rest/api/2/issue/12745494","key":"DERBY-6754","fields":{"summary":"User code can get the ContextManager from an EmbedConnection","description":"From the ContextManager, you can get your hands on all sorts of Derby internals. We should prevent application code from doing this."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12745162","self":"https://issues.apache.org/jira/rest/api/2/issue/12745162","key":"DERBY-6753","fields":{"summary":"Docs for IDENTITY_VAL_LOCAL needs to be updated to indicate that the return value will be impacted by single row UPDATE of identity column","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12745041","self":"https://issues.apache.org/jira/rest/api/2/issue/12745041","key":"DERBY-6752","fields":{"summary":"AutoloadedDriver tries to load a non-existent class, AutoloadedDriver40","description":"This happens in a static initialization block at the start of AutoloadedDriver. Is this dead code?"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12744757","self":"https://issues.apache.org/jira/rest/api/2/issue/12744757","key":"DERBY-6751","fields":{"summary":"Prevent user code from getting the LanguageConnectionContext from an EmbedConnection","description":"User code can cast a java.sql.Connection to an EmbedConnection and then get the LanguageConnectionContext by calling EmbedConnection.getLanguageConnection(). We should prevent user code from doing this."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12744309","self":"https://issues.apache.org/jira/rest/api/2/issue/12744309","key":"DERBY-6750","fields":{"summary":"Query parsing seems to hang forever in ColumnReference.getSourceResultSet","description":"We have an application that programmatically generates queries. For some queries the call of Connection.prepareStatement never returns. I took one of these queries and simplified until I got the following query:\r\n\r\n  SELECT * FROM (\r\n    SELECT 1 AS X FROM SYSIBM.SYSDUMMY1\r\n  ) Q1 NATURAL JOIN (\r\n    SELECT X FROM (\r\n      SELECT 1 AS X FROM SYSIBM.SYSDUMMY1\r\n    ) Q2 UNION SELECT X FROM (\r\n      SELECT 2 AS X FROM SYSIBM.SYSDUMMY1\r\n    ) Q3\r\n  ) Q4;\r\n\r\nWhen I execute this query with ij it never produces a result.\r\n\r\nA typical stack trace of our application when it hangs starts like this:\r\n\r\njava.lang.Exception: test timed out after 250 milliseconds\r\n\tat org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultSet(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.SelectNode.optimize(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement20.<init>(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement30.<init>(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement40.<init>(Unknown Source)\r\n\tat org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(Unknown Source)\r\n..."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12744268","self":"https://issues.apache.org/jira/rest/api/2/issue/12744268","key":"DERBY-6749","fields":{"summary":"Error in ClobUpdatableReaderTest.testMultiplexedOperationProblem","description":"The following error (among others) was seen on Solaris_amd64_jdk8 during the nightly tests on the 10.12 trunk (http://download.java.net/javadesktop/derby/request_5596746/):\r\n\r\n{noformat}\r\n    java.sql.SQLException: Failed to create database 'singleUse/oneuse17a', see the next exception for details.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2648)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:430)\r\n\tat org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:649)\r\n\tat org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:303)\r\n\tat org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:934)\r\n\tat org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:664)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:208)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:122)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:68)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:44)\r\n\tat org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1643)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(BaseJDBCTestCase.java:507)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.getConnection(BaseJDBCTestCase.java:115)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.createStatement(BaseJDBCTestCase.java:147)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.setUp(ClobUpdatableReaderTest.java:280)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ041: Failed to create database 'singleUse/oneuse17a', see the next exception for details.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: ERROR XBM01: Startup failed due to an exception. See next exception for details. \r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.exceptionStartingModule(Monitor.java:687)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1843)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(BaseMonitor.java:1008)\r\n\tat org.apache.derby.impl.services.monitor.FileMonitor.createPersistentService(FileMonitor.java:48)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Monitor.java:598)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2641)\r\nCaused by: java.lang.ArrayIndexOutOfBoundsException\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12744012","self":"https://issues.apache.org/jira/rest/api/2/issue/12744012","key":"DERBY-6748","fields":{"summary":"Localize messages introduced or changed in 10.11.1","description":"Localize these changes."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12743858","self":"https://issues.apache.org/jira/rest/api/2/issue/12743858","key":"DERBY-6747","fields":{"summary":"Broken links in the ij tutorial","description":"https://db.apache.org/derby/papers/DerbyTut/ij_intro.html has many broken links to manual pages.\r\n\r\nOriginally reported here: http://mail-archives.apache.org/mod_mbox/db-derby-user/201409.mbox/%3C98B4B199A59C8941B271A86377583AA289D12244@wybcvl-s-53405.europe.shell.com%3E"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12743091","self":"https://issues.apache.org/jira/rest/api/2/issue/12743091","key":"DERBY-6746","fields":{"summary":"behaviour \"connect 'jdbs:derby:myDB;create=true';\" and \"connect 'jdbc:derby://localhost:1527/myDB;create=true';\" are different. first is OK and second is not OK.","description":"ij> connect 'jdbc:derby://localhost:1527/myDB;create=true';\r\nERROR 08001: java.net.ConnectException : Error connecting to server localhost on port 1,527 with message Connection refused.\r\n\r\nij> connect 'jdbc:derby:myDBtry;create=true';                                                     \r\nij(CONNECTION1)> \r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12742682","self":"https://issues.apache.org/jira/rest/api/2/issue/12742682","key":"DERBY-6745","fields":{"summary":"NPE, SQLNonTransientConnectionException: No current connection","description":"I have generated a local derby database on hdd. When I submit a select statement to this database everything is ok. When using this database as readonly jar in classpath and using the same statement I am getting the following exceptions ...\r\n\r\nI do some more tests to get more information. The two columns I could not select sucessfully are foreign key columns. Hope this could help you a bit.\r\n\r\n!ENTRY org.eclipse.datatools.sqltools.editor.core 4 0 2014-09-19 10:56:46.364\r\n!MESSAGE Editor core plugin internal error\r\n!STACK 0\r\njava.sql.SQLNonTransientConnectionException: No current connection.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.noCurrentConnection(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.getAutoCommit(Unknown Source)\r\n\tat org.eclipse.datatools.sqltools.editor.core.result.ResultSupportRunnable.initConnection(ResultSupportRunnable.java:314)\r\n\tat org.eclipse.datatools.sqltools.editor.core.result.ResultSupportRunnable.run(ResultSupportRunnable.java:112)\r\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\r\nCaused by: ERROR 08003: No current connection.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 10 more\r\n\r\n!ENTRY org.eclipse.datatools.sqltools.result 4 0 2014-09-19 10:57:31.615\r\n!MESSAGE No resource is associated with key \"ResultsViewAPI_append_resultset_error\".\r\n\r\n!ENTRY org.eclipse.datatools.sqltools.result 4 0 2014-09-19 10:57:31.630\r\n!MESSAGE ResultsViewAPI_append_resultset_error possible args: {0}, {1}, {2}, {3}\r\n!STACK 0\r\njava.sql.SQLException: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)\r\n\tat org.eclipse.datatools.sqltools.result.ResultSetObject.<init>(ResultSetObject.java:145)\r\n\tat org.eclipse.datatools.sqltools.result.internal.model.ResultInstanceFactory.createResultSetObject(ResultInstanceFactory.java:79)\r\n\tat org.eclipse.datatools.sqltools.result.internal.model.ResultInstance.moreResultSet(ResultInstance.java:127)\r\n\tat org.eclipse.datatools.sqltools.result.ResultsViewAPI.appendResultSet(ResultsViewAPI.java:353)\r\n\tat org.eclipse.datatools.sqltools.editor.core.result.ResultSupportRunnable.loopThroughResults(ResultSupportRunnable.java:572)\r\n\tat org.eclipse.datatools.sqltools.editor.core.result.ResultSupportRunnable.handleSuccess(ResultSupportRunnable.java:419)\r\n\tat org.eclipse.datatools.sqltools.editor.core.result.ResultSupportRunnable$HandleSuccessJob.run(ResultSupportRunnable.java:302)\r\n\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)\r\nCaused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 19 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.impl.store.access.btree.ControlRow.getControlRowForPage(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.ControlRow.get(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.ControlRow.get(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.ControlRow.getRightSibling(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)\r\n\t... 10 more"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12742439","self":"https://issues.apache.org/jira/rest/api/2/issue/12742439","key":"DERBY-6744","fields":{"summary":"Update the documentation of security policy files to include the new usederbyinternals SystemPermission","description":"DERBY-6648 added a new SystemPermission, which prevents user code from calling the static public methods in ContextService. Over time, we will probably use this permission to prevent user code from reaching into other parts of the Derby engine. We need to document this permission in our sample policy files."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12742354","self":"https://issues.apache.org/jira/rest/api/2/issue/12742354","key":"DERBY-6743","fields":{"summary":"MERGE code needs changes since now UPDATE statement can change the identity column value using DEFAULT keyword.","description":"DERBY-6414(Incorrect handling when using an UPDATE to SET an identity column to DEFAULT) has been fixed in Derby 10.12. This will require changes in MERGE code in order for UPDATE of identity column to work in the MERGE sql."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12742051","self":"https://issues.apache.org/jira/rest/api/2/issue/12742051","key":"DERBY-6742","fields":{"summary":"For update statement, collect generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call.","description":"DERBY-6414 is providing SQL support to update identity columns using DEFAULT keyword. This jira will look into collecting generated keys if Statement.RETURN_GENERATED_KEYS flag is supplied to the JDBC call for an UPDATE sql."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741986","self":"https://issues.apache.org/jira/rest/api/2/issue/12741986","key":"DERBY-6741","fields":{"summary":"User code can get the ContextManager from an EmbedConnection","description":"EmbedConnection.getContextManager() is a public method. Exposing internals like the ContextManager is a security risk."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741924","self":"https://issues.apache.org/jira/rest/api/2/issue/12741924","key":"DERBY-6740","fields":{"summary":"NullPointerException when inserting value into generated by default as identity using DEFAULT and specific value at the same time","description":"I came across following NPE in 10.1 and 10.2 while writing upgrade tests for DERBY-6414 in trunk(10.12 codeline). \r\n\r\nBasically, in 10.1 and 10,2, an insert into a table with generated by default as identity column works when user is trying to insert Default OR specific value. But trying to insert both the values within the same insert statement gives NPE. This behavior is only for 10.1 and 10.2. \r\n\r\nVersion 10.0 did not support generated by default as identity columns. Version 10.3 and above do not give a NPE.\r\n\r\nSince the NPE is in such old releases of Derby and they do not show themselves in 10.3 and higher, we probably don't care about this jira but I wanted to have a place holder for the behavior.\r\n \r\nFollowing is the behavior in ij\r\nij>create table t2_6414(a int,c int generated by default as identity,d char(3),e char(5));\r\nij> 0 rows inserted/updated/deleted\r\nij>  insert into t2_6414(a,d,e,c) values(1,'aaa','aaaaa',1);\r\n1 row inserted/updated/deleted\r\nij> insert into t2_6414(a,d,e,c) values(2,'bbb','bbbbb',default);\r\n1 row inserted/updated/deleted\r\nij> insert into t2_6414(a,d,e,c) values(1,'aaa','aaaaa',1),(2,'bbb','bbbbb',default);\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\njava.lang.NullPointerException\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1113)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generate(ResultColumnList.java:973)\r\n        at org.apache.derby.impl.sql.compile.RowResultSetNode.generate(RowResultSetNode.java:691)\r\n        at org.apache.derby.impl.sql.compile.UnionNode.generate(UnionNode.java:603)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1441)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1303)\r\n        at org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(NormalizeResultSetNode.java:123)\r\n        at org.apache.derby.impl.sql.compile.InsertNode.generate(InsertNode.java:773)\r\n        at org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:233)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:478)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:119)\r\n        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:745)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:568)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:517)\r\n        at org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:323)\r\n        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:269)\r\n        at org.apache.derby.impl.tools.ij.Main.go(Main.java:204)\r\n        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:170)\r\n        at org.apache.derby.impl.tools.ij.Main14.main(Main14.java:56)\r\n        at org.apache.derby.tools.ij.main(ij.java:71)\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741536","self":"https://issues.apache.org/jira/rest/api/2/issue/12741536","key":"DERBY-6739","fields":{"summary":"test failure in 10.10 compatibility.ClientCompatibilityRunControl after adding 10.11.1.1","description":"I recently added the 10.11.1.1 jars to a local svn directory to prevent continuous access of the apache repository. \r\nThese jars are found using -DderbyTesting.oldReleasePath.\r\nThis did not result in any troubles with the trunk or 10.11 branch.\r\nHowever, it did result in 31 failures with the 10.10 branch.\r\n\r\nThe failure output (see e.g.: http://people.apache.org/~myrnavl/derby_test_results/v10_10/windows/testlog/ibm17/1624694-suites.All_diff.txt) look like this:\r\n\r\n1) combination(client 10.11.1.1 <> server 10.11.1.1)(org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl)junit.framework.AssertionFailedError: client VM failed: :Spawned combination(client 10.11.1.1 <> server 10.11.1.1) exitCode=1\r\nSTDERR:\r\nClass not found \"org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilitySuite\"\r\n\r\n\tat org.apache.derbyTesting.functionTests.tests.compatibility.ClientCompatibilityRunControl.testClient(ClientCompatibilityRunControl.java:112)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:94)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:442)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:459)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\r\n(some failures also complain about a missing database, but I assume that's a result of the above type of failure).\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741503","self":"https://issues.apache.org/jira/rest/api/2/issue/12741503","key":"DERBY-6738","fields":{"summary":"NPE when using NULLIF together with LEFT JOIN","description":"If the test case for DERBY-4594 is changed to use NULLIF instead of COALESCE, we get a NullPointerException.\r\n\r\n{code:sql}\r\ncreate table d4594_t1 (a1 int);\r\ncreate table d4594_t2 (a2 int);\r\ninsert into d4594_t1 values 1;\r\n-- this works fine\r\nselect 1 from d4594_t1 join d4594_t2 on 1=1 where nullif(a2, 0) <> 1;\r\n-- this fails with NPE\r\nselect 1 from d4594_t1 left join d4594_t2 on 1=1 where nullif(a2, 0) <> 1;\r\n{code}\r\n\r\nFull stack trace on trunk:\r\n\r\n{noformat}\r\njava.lang.NullPointerException\r\n        at org.apache.derby.iapi.types.SQLInteger.equals(SQLInteger.java:414)\r\n        at org.apache.derby.exe.aced8940a7x0148x79ddxe38cx000006b33ad02.e2(Unknown Source)\r\n        at org.apache.derby.impl.services.reflect.DirectCall.invoke(ReflectGeneratedClass.java:105)\r\n        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:302)\r\n        at org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(ProjectRestrictResultSet.java:287)\r\n        at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:488)\r\n        at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:448)\r\n        at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:392)\r\n        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:388)\r\n        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:344)\r\n        at org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(JDBCDisplayUtil.java:247)\r\n        at org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(JDBCDisplayUtil.java:235)\r\n        at org.apache.derby.impl.tools.ij.utilMain.displayResult(utilMain.java:456)\r\n        at org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:530)\r\n        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n        at org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n        at org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n        at org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n        at org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n        at org.apache.derby.tools.ij.main(ij.java:59)\r\n        at org.apache.derby.iapi.tools.run.main(run.java:53)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741501","self":"https://issues.apache.org/jira/rest/api/2/issue/12741501","key":"DERBY-6737","fields":{"summary":"CLOB retrieve exceptions after moving cursor around","description":"The version we are running is a bit older (10.8.2.2), but I have tried latest version of Derby @ 10.11.1.1 with it's JDBC drivers that are included with it.  I am having problems with CLOB after moving the cursor forward/backwards. The CLOB(s) themselves are roughly 500000+ characters each. \r\n\r\nSample Code: \r\n------------------------------------------------------------------------------------------- \r\nimport java.sql.Clob; \r\nimport java.sql.Connection; \r\nimport java.sql.DriverManager; \r\nimport java.sql.ResultSet; \r\nimport java.sql.Statement; \r\n\r\npublic class testZ { \r\n        private static String dbURL = \"jdbc:derby://9.42.11.34:1527/TestDB;create=true;user=test;password=test\"; \r\n        \r\n        public static void main(String[] args) { \r\n                try { \r\n                        Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance(); \r\n                        Connection conn = DriverManager.getConnection(dbURL); \r\n                        conn.setAutoCommit(false); \r\n                        Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY); \r\n                        ResultSet rs = stmt.executeQuery(\"select * from TESTCLOB where EVENTID=30266\");\t\r\n                        rs.last(); \r\n                        System.out.println(rs.getRow()); \r\n                        rs.first(); \r\n                        \r\n                        Clob clob = rs.getClob(\"GROUPASC\"); \r\n                        int len = (int) ((java.sql.Clob) clob).length(); \r\n                        String clobData = ((java.sql.Clob) clob).getSubString(1, len); \r\n                        System.out.println(\"Clob Data: \" + clobData);\t\r\n                } catch (Exception e) { \r\n                        e.printStackTrace(); \r\n                } \r\n        } \r\n} \r\n--------------------------------------------------------------------------------------------- \r\n\r\nNotice I am moving the cursor around. I wanted to get the size of the result set prior to getting the Clob data. So I do a rs.last() and rs.getNum() to get the size of the result set. I then move the cursor back to the first row and obtain the Clob data for first row. If I remove the rs.first() statement and get the Clob data of the rs.last() row, it works fine.  It seems as long as I go forward (not backwards), the CLOB data is retrievable. Note from the code, I am using ResultSet.TYPE_SCROLL_SENSITIVE. I have tried TYPE_SCROLL_INSENSITIVE, but with the same problem.  I also tried enabling/disabling the auto commit, also still have this error. For this code, I am getting the following error: \r\n\r\njava.sql.SQLException: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob's transaction has been committed or rolled back. \r\n        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) \r\n        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) \r\n        at org.apache.derby.client.am.ClientClob.length(Unknown Source) \r\n        at testZ.main(testZ.java:25) \r\nCaused by: ERROR XJ215: You cannot invoke other java.sql.Clob/java.sql.Blob methods after calling the free() method or after the Blob/Clob's transaction has been committed or rolled back. \r\n        at org.apache.derby.client.am.CallableLocatorProcedures.handleInvalidLocator(Unknown Source) \r\n        at org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(Unknown Source) \r\n        at org.apache.derby.client.am.ClientClob.getLocatorLength(Unknown Source) \r\n        at org.apache.derby.client.am.Lob.sqlLength(Unknown Source) \r\n        ... 2 more \r\nCaused by: ERROR 38000: The exception 'java.sql.SQLException: The locator that was supplied for this CLOB/BLOB is invalid' was thrown while evaluating an expression. \r\n        at org.apache.derby.client.am.ClientStatement.completeExecute(Unknown Source) \r\n        at org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(Unknown Source) \r\n        at org.apache.derby.client.net.NetStatementReply.readExecuteCall(Unknown Source) \r\n        at org.apache.derby.client.net.StatementReply.readExecuteCall(Unknown Source) \r\n        at org.apache.derby.client.net.NetStatement.readExecuteCall_(Unknown Source) \r\n        at org.apache.derby.client.am.ClientStatement.readExecuteCall(Unknown Source) \r\n        at org.apache.derby.client.am.ClientPreparedStatement.flowExecute(Unknown Source) \r\n        at org.apache.derby.client.am.ClientPreparedStatement.executeX(Unknown Source) \r\n        ... 5 more \r\nCaused by: ERROR XJ217: The locator that was supplied for this CLOB/BLOB is invalid \r\n        at org.apache.derby.client.am.SqlException.<init>(Unknown Source) \r\n        at org.apache.derby.client.am.SqlException.<init>(Unknown Source) \r\n        ... 13 more \r\n\r\nOn a related note, when a result set contains a CLOB, when doing a rs.last()/rs.first(), and then calling rs.next(), we get a \"Container has been closed.\" SQL exception. \r\n\r\nSample class: \r\n---------------------------------------------------------------------------------------------- \r\nimport java.sql.Connection; \r\nimport java.sql.DriverManager; \r\nimport java.sql.ResultSet; \r\nimport java.sql.Statement; \r\n\r\npublic class testZ { \r\n        private static String dbURL = \"jdbc:derby://9.42.11.34:1088/TestDB;create=true;user=test;password=derbypass\";     \r\n        \r\n        public static void main(String[] args) { \r\n                try { \r\n                        Class.forName(\"org.apache.derby.jdbc.ClientDriver\").newInstance(); \r\n                        Connection conn = DriverManager.getConnection(dbURL); \r\n                        \r\n                        Statement stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY); \r\n                        //GROUPASC is column with CLOBS \r\n                        ResultSet rs = stmt.executeQuery(\"select GROUPASC from RE_EVENTGROUPASC where EVENTID=5 OR EVENTID=6\"); \r\n                        //ResultSet rs = stmt.executeQuery(\"select EVENTID from RELATEDEVENTS.RE_EVENTGROUPASC where EVENTID=29419 OR EVENTID=29420\"); \r\n                        \r\n                        rs.last(); \r\n                        rs.first();\t\r\n                        \r\n                        if (!rs.next()) { \r\n                        //exception here\t\r\n                        } \r\n                        \r\n                        rs.close(); \r\n                        stmt.close(); \r\n                        conn.close(); \r\n                } catch (Exception e) { \r\n                        e.printStackTrace(); \r\n                } \r\n        } \r\n} \r\n---------------------------------------------------------------------------------------------- \r\n\r\nNote there are two queries (one is commented out). The GROUPASC is the column with the CLOB data type. When I call the second one (without the CLOB column), it works fine. Only happens with CLOBs! \r\n\r\njava.sql.SQLTransactionRollbackException: Container has been closed. \r\n        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source) \r\n        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source) \r\n        at org.apache.derby.client.am.ClientResultSet.next(Unknown Source) \r\n        at testZ.main(testZ.java:23) \r\nCaused by: ERROR 40XD0: Container has been closed. \r\n        at org.apache.derby.client.am.ClientResultSet.completeSqlca(Unknown Source) \r\n        at org.apache.derby.client.net.NetResultSetReply.parseFetchError(Unknown Source) \r\n        at org.apache.derby.client.net.NetResultSetReply.parseCNTQRYreply(Unknown Source) \r\n        at org.apache.derby.client.net.NetResultSetReply.readScrollableFetch(Unknown Source) \r\n        at org.apache.derby.client.net.ResultSetReply.readScrollableFetch(Unknown Source) \r\n        at org.apache.derby.client.net.NetResultSet.readScrollableFetch_(Unknown Source) \r\n        at org.apache.derby.client.am.ClientResultSet.flowGetRowset(Unknown Source) \r\n        at org.apache.derby.client.am.ClientResultSet.getNextRowset(Unknown Source) \r\n        at org.apache.derby.client.am.ClientResultSet.nextX(Unknown Source) \r\n        ... 2 more \r\n\r\n\r\nSee posting on derby user forums:\r\nhttp://apache-database.10148.n7.nabble.com/CLOB-data-errors-after-moving-cursor-around-td142101.html\r\n\r\nI tried searching the forums and the existing defects, and couldn't find this issue is already being tracked. Thanks!"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12741455","self":"https://issues.apache.org/jira/rest/api/2/issue/12741455","key":"DERBY-6736","fields":{"summary":"The jacoco-junit target fails to store coverage data for some sub-suites","description":"The console log for the code coverage test runs at https://builds.apache.org/job/Derby-JaCoCo/ shows that JaCoCo fails to write coverage data for the following test suites:\r\n\r\nlang\r\njdbcapi\r\nstore\r\nengine\r\nencryption\r\n\r\nIt is caused by the following permissions-related exception:\r\n\r\n{noformat}\r\n    [junit] java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/home/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140912_1758/jacoco.exec\" \"write\")\r\n    [junit] \tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)\r\n    [junit] \tat java.security.AccessController.checkPermission(AccessController.java:559)\r\n    [junit] \tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n    [junit] \tat java.lang.SecurityManager.checkWrite(SecurityManager.java:979)\r\n    [junit] \tat java.io.FileOutputStream.<init>(FileOutputStream.java:203)\r\n    [junit] \tat org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.openFile(FileOutput.java:67)\r\n    [junit] \tat org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.writeExecutionData(FileOutput.java:53)\r\n    [junit] \tat org.jacoco.agent.rt.internal_9dd1198.Agent.shutdown(Agent.java:143)\r\n    [junit] \tat org.jacoco.agent.rt.internal_9dd1198.Agent$1.run(Agent.java:60)\r\n{noformat}\r\n\r\nThe result of this is that the coverage report shows lower coverage than what's actually covered by the tests."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12740785","self":"https://issues.apache.org/jira/rest/api/2/issue/12740785","key":"DERBY-6735","fields":{"summary":"NPE when the select list contains ROW_NUMBER and subquery","description":"When using row_number() over() in an SQL I get this exception:\r\nERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerException¶¶XJ001.U\r\njava.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerException¶¶XJ001.U\r\n        at org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n        at org.apache.derby.client.am.ClientStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.ij.executeImmediate(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.utilMain.doCatch(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.Main.go(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)\r\n        at org.apache.derby.impl.tools.ij.Main.main(Unknown Source)\r\n        at org.apache.derby.tools.ij.main(Unknown Source)\r\nCaused by: ERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: java.lang.NullPointerException¶¶XJ001.U\r\n        at org.apache.derby.client.am.ClientStatement.completeSqlca(Unknown Source)\r\n        at org.apache.derby.client.net.NetStatementReply.parsePrepareError(Unknown Source)\r\n        at org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(Unknown Source)\r\n        at org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(Unknown Source)\r\n        at org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(Unknown Source)\r\n        at org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_(Unknown Source)\r\n        at org.apache.derby.client.am.ClientStatement.readPrepareDescribeOutput(Unknown Source)\r\n        at org.apache.derby.client.am.ClientStatement.flowExecute(Unknown Source)\r\n        at org.apache.derby.client.am.ClientStatement.executeX(Unknown Source)\r\n        ... 9 more\r\nij>"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12740398","self":"https://issues.apache.org/jira/rest/api/2/issue/12740398","key":"DERBY-6734","fields":{"summary":"Error in DBInJarTest.testSpillHashToDisk","description":"The following error turned up in the nightly tests on the 10.12 trunk on Windows_amd64_jdk8. See http://download.java.net/javadesktop/derby/request_5595773/\r\n\r\n{noformat}\r\n    java.sql.SQLException: Java exception: 'ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:147)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.testSpillHashToDisk(DBInJarTest.java:165)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\nCaused by: ERROR XJ001: Java exception: 'ASSERT FAILED: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:98)\r\n\tat org.apache.derby.impl.services.cache.CacheEntry.lock(CacheEntry.java:115)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.discard(ConcurrentCache.java:636)\r\n\tat org.apache.derby.impl.store.raw.data.BaseDataFileFactory.markCorrupt(BaseDataFileFactory.java:1333)\r\n\tat org.apache.derby.impl.store.raw.data.CachedPage.clean(CachedPage.java:624)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(ConcurrentCache.java:551)\r\n\tat org.apache.derby.impl.services.cache.ClockPolicy.rotateClock(ClockPolicy.java:476)\r\n\tat org.apache.derby.impl.services.cache.ClockPolicy.insertEntry(ClockPolicy.java:176)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.insertIntoFreeSlot(ConcurrentCache.java:208)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.create(ConcurrentCache.java:378)\r\n\tat org.apache.derby.impl.store.raw.data.FileContainer.initPage(FileContainer.java:2449)\r\n\tat org.apache.derby.impl.store.raw.data.FileContainer.newPage(FileContainer.java:1878)\r\n\tat org.apache.derby.impl.store.raw.data.TempRAFContainer.addPage(TempRAFContainer.java:156)\r\n\tat org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(BaseContainerHandle.java:183)\r\n\tat org.apache.derby.impl.store.access.btree.LeafControlRow.allocate(LeafControlRow.java:123)\r\n\tat org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(LeafControlRow.java:634)\r\n\tat org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(BranchControlRow.java:906)\r\n\tat org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(BranchControlRow.java:906)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeController.start_xact_and_dosplit(BTreeController.java:369)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeController.doIns(BTreeController.java:1013)\r\n\tat org.apache.derby.impl.store.access.btree.BTreeController.insert(BTreeController.java:1372)\r\n\tat org.apache.derby.impl.store.access.btree.index.B2IController.insert(B2IController.java:210)\r\n\tat org.apache.derby.iapi.store.access.DiskHashtable.put(DiskHashtable.java:227)\r\n\tat org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(BackingStoreHashtable.java:620)\r\n\tat org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(BackingStoreHashtable.java:471)\r\n\tat org.apache.derby.iapi.store.access.BackingStoreHashtable.putRow(BackingStoreHashtable.java:1048)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(GenericScanController.java:808)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchSet(GenericScanController.java:1278)\r\n\tat org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.<init>(BackingStoreHashTableFromScan.java:120)\r\n\tat org.apache.derby.impl.store.access.RAMTransaction.createBackingStoreHashtableFromScan(RAMTransaction.java:1337)\r\n\tat org.apache.derby.impl.sql.execute.HashScanResultSet.openCore(HashScanResultSet.java:259)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:266)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12740340","self":"https://issues.apache.org/jira/rest/api/2/issue/12740340","key":"DERBY-6733","fields":{"summary":"Implement an MBean for monitoring caches","description":"Add an MBean that allows users to monitor Derby's CacheFactory instances, as discussed in DERBY-5772."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12740207","self":"https://issues.apache.org/jira/rest/api/2/issue/12740207","key":"DERBY-6732","fields":{"summary":"Enhance the foreignViews optional tool so that it can just create views on a single foreign schema","description":"Right now, the foreignViews optional tool creates views on all of the user tables in a foreign database. Sometimes all you want is one or two schemas. The bulk creation of views can also fail for databases which have weird, non-ANSI/ISO tables. We could add another trailing argument to the tool which limits view creation to a single schema. Something like this:\r\n\r\n{noformat}\r\n-- register like this\r\ncall syscs_util.syscs_register_tool\r\n(\r\n  'foreignViews',\r\n  true,\r\n  'foreignDatabaseURL',\r\n  'XYZ_',    -- the prefix added to the local (Derby) schema names\r\n  'foreignSchemaName'\r\n )\r\n\r\nand\r\n\r\n-- unregister like this\r\ncall syscs_util.syscs_register_tool\r\n(\r\n  'foreignViews',\r\n  false,\r\n  'foreignDatabaseURL',\r\n  'XYZ_',    // the prefix added to the local (Derby) schema names\r\n  'foreignSchemaName'\r\n )\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12740135","self":"https://issues.apache.org/jira/rest/api/2/issue/12740135","key":"DERBY-6731","fields":{"summary":"Lucene VTI returns NULL for key if it is a BLOB","description":"{noformat}\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> call syscs_util.syscs_register_tool('luceneSupport', true);\r\n0 rows inserted/updated/deleted\r\nij> create table t(b blob, c clob);\r\n0 rows inserted/updated/deleted\r\nij> insert into t values (cast (x'cafe' as blob), 'hello');\r\n1 row inserted/updated/deleted\r\nij> call lucenesupport.createindex('app', 't', 'c', null, 'b');\r\n0 rows inserted/updated/deleted\r\nij> select * from table(t__c('hello', 10, null)) t;\r\nB                                                                                                                               |DOCUMENTID |SCORE          \r\n------------------------------------------------------------------------------------------------------------------------------------------------------------\r\nNULL                                                                                                                            |0          |0.30685282     \r\n\r\n1 row selected\r\n{noformat}\r\n\r\nI expected either that CREATEINDEX had failed with a message saying that a BLOB column could not be used as a key column, or that the Lucene VTI had returned a non-null value for column B."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12739878","self":"https://issues.apache.org/jira/rest/api/2/issue/12739878","key":"DERBY-6730","fields":{"summary":"Cannot create a Lucene index if a key column's name is case-sensitive","description":"The workaround is to create a view which gives the columns case-insensitive names. The following script shows this problem:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\ncall syscs_util.syscs_register_tool( 'luceneSupport', true );\r\n\r\ncreate schema \"s\";\r\n\r\ncreate table \"s\".\"t\"\r\n(\r\n    \"passageID\" int,\r\n    \"text\" varchar( 32672 )\r\n);\r\n\r\n-- fails because the trailing key id is case-sensitive\r\ncall luceneSupport.createIndex\r\n(\r\n  '\"s\"',\r\n  '\"t\"',\r\n  '\"text\"',\r\n  null,\r\n  '\"passageID\"'\r\n);\r\n\r\ncreate view \"s\".\"t_view\" ( passageID, text ) as select * from \"s\".\"t\";\r\n\r\n-- succeeds on a view with case-insensitive identifiers\r\ncall luceneSupport.createIndex\r\n(\r\n  '\"s\"',\r\n  '\"t_view\"',\r\n  'text',\r\n  null,\r\n  'passageID'\r\n);\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12739661","self":"https://issues.apache.org/jira/rest/api/2/issue/12739661","key":"DERBY-6729","fields":{"summary":"ResultSet should accept a BigInteger request for a BIGINT column","description":"I raised an issue on the Spring Framework JIRA at https://jira.spring.io/browse/SPR-12157 for something I thought was Spring related but looks like it may be down to behaviour in Derby.\r\n\r\nNot sure if it is a bug as such but in Spring 4.1 they are retrieving items from the resultset in a slightly different way, using getObject(index, requiredType) rather than simply getObject(index). This approach works with H2 and HSQLDB but not with Derby. \r\n\r\nThere is a pull request with a failing test that describes this on the thread for that ticket. Thanks"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12739479","self":"https://issues.apache.org/jira/rest/api/2/issue/12739479","key":"DERBY-6728","fields":{"summary":"Reading from a Clob fails.","description":"In the Java-Code below the reading from a CLOB-column fails with an SQLException. It somehow seems to be related to reading the maximum integer primary key value beforehand.\r\n\r\nimport java.sql.Clob;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\n\r\npublic class DerbyClobTest\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tConnection conn = DriverManager\r\n\t\t\t\t\t.getConnection(\"jdbc:derby://localhost:1527/database;user=derby;password=derby\");\r\n\t\t\tStatement stmt = conn.createStatement();\r\n\t\t\tResultSet rs = stmt.executeQuery(\"SELECT * FROM APP\");\r\n\r\n\t\t\twhile (rs.next())\r\n\t\t\t{\r\n\t\t\t\tPreparedStatement l_stmt = null;\r\n\t\t\t\tint l_iMaxLid = -1;\r\n\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tl_stmt = conn.prepareStatement(\"SELECT MAX(LID) FROM APP\");\r\n\r\n\t\t\t\t\tResultSet l_rs = l_stmt.executeQuery();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (l_rs.next())\r\n\t\t\t\t\t\t\tl_iMaxLid = l_rs.getInt(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfinally\r\n\t\t\t\t\t{\r\n                                                l_rs.close();\r\n\t\t\t\t\t\tl_rs = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfinally\r\n\t\t\t\t{\r\n                                        l_stmt.close();\r\n\t\t\t\t\tl_stmt = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tPreparedStatement stmtNew = conn\r\n\t\t\t\t\t\t.prepareStatement(\"INSERT INTO APP(LID, TXTBODY) VALUES(?, ?)\");\r\n\r\n\t\t\t\tstmtNew.setInt(1, l_iMaxLid);\r\n\r\n\t\t\t\tfinal Clob clob = rs.getClob(\"TXTBODY\");\r\n\r\n\t\t\t\tif (clob == null)\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\tfinal String str = clob.getSubString(1, (int) clob.length());\r\n\r\n\t\t\t\t// Do something with str.\r\n\r\n\t\t\t\tstmtNew.setClob(2, clob);\r\n\r\n\t\t\t\tstmtNew.executeUpdate();\r\n\t\t\t\tstmtNew.close();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception except)\r\n\t\t{\r\n\t\t\texcept.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nStacktrace:\r\n\r\njava.sql.SQLException: Es können keine weiteren java.sql.Clob/java.sql.Blob-Methoden aufgerufen werden, nachdem die free()-Methode aufgerufen oder nachdem die Blob/Clob-Transaktion ausgeführt oder wiederholt (Rollback) wurde.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.Clob.length(Unknown Source)\r\n\tat de.uplanet.lucy.server.calendar.DerbyClobTest.main(DerbyClobTest.java:73)\r\nCaused by: org.apache.derby.client.am.SqlException: Es können keine weiteren java.sql.Clob/java.sql.Blob-Methoden aufgerufen werden, nachdem die free()-Methode aufgerufen oder nachdem die Blob/Clob-Transaktion ausgeführt oder wiederholt (Rollback) wurde.\r\n\tat org.apache.derby.client.am.CallableLocatorProcedures.handleInvalidLocator(Unknown Source)\r\n\tat org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(Unknown Source)\r\n\tat org.apache.derby.client.am.Clob.getLocatorLength(Unknown Source)\r\n\tat org.apache.derby.client.am.Lob.sqlLength(Unknown Source)\r\n\t... 2 more\r\nCaused by: org.apache.derby.client.am.SqlException: Bei der Auswertung eines Ausdrucks wurde die Ausnahme 'java.sql.SQLException: Der für dieses CLOB/BLOB angegebene Locator ist ungültig' ausgelöst.\r\n\tat org.apache.derby.client.am.Statement.completeExecute(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.readExecuteCall(Unknown Source)\r\n\tat org.apache.derby.client.net.StatementReply.readExecuteCall(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatement.readExecuteCall_(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.readExecuteCall(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeX(Unknown Source)\r\n\t... 5 more\r\nCaused by: org.apache.derby.client.am.SqlException: Der für dieses CLOB/BLOB angegebene Locator ist ungültig\r\n\t... 13 more\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12738856","self":"https://issues.apache.org/jira/rest/api/2/issue/12738856","key":"DERBY-6727","fields":{"summary":"test behavior of open XA transactions when the database is crashed (not just shutdown)","description":"DERBY-5165 reflects a problem where after shutdown of a database with an open XA transaction with update changes uncommitted, it appears as if the locks are released when the database is available again. Instead, locks should be kept and subsequent reads should time-out.\r\n\r\nIt would be nice to have a test case that tests the behavior of an open XA transaction when the jvm/thread with the transaction is killed/interrupted, rather than it doing an (orderly) database shutdown.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12738827","self":"https://issues.apache.org/jira/rest/api/2/issue/12738827","key":"DERBY-6726","fields":{"summary":"NPE from trigger","description":"Saw this strange exception when doing an insert to a table with a trigger\r\n{code}\r\nTue Sep 02 13:39:09 BST 2014 Thread[SQLExecution,1,system] (XID = 62693), (SESSIONID = 1), (DATABASE = C:/Users/timbo/Documents/IJCProjects/mini-regs/Vanilla Oracle/.config/derby-minireg-01-sep/db), (DRDAID = null), Failed Statement is: UPDATE samples SET sample_code = 'S123456' WHERE sample_id = CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(1) AS INTEGER)\r\njava.lang.NullPointerException\r\n    at org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerActionString(Unknown Source)\r\n    at org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getActionSPS(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.getAction(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.UpdateResultSet.open(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(Unknown Source)\r\n    at org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n    at org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n    at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n{code}\r\n\r\nThe trigger definition is this:\r\n{code}\r\nCREATE TRIGGER samples_code_trg\r\nAFTER INSERT ON samples\r\nREFERENCING NEW AS newrow FOR EACH ROW MODE DB2SQL\r\nUPDATE samples SET sample_code = 'S123456'\r\nWHERE samples.sample_id = newrow.sample_id;\r\n{code}\r\n\r\nAs mentioned here: http://mail-archives.apache.org/mod_mbox/db-derby-user/201408.mbox/%3Cltq5hl$kps$1@ger.gmane.org%3E\r\nit could be that its caused by another AFTER UPDATE trigger that's on the table.\r\n\r\nUnfortunately I rebuilt all the tables and triggers and not the problem doesn't happen, so I can't provide a test case.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12738505","self":"https://issues.apache.org/jira/rest/api/2/issue/12738505","key":"DERBY-6725","fields":{"summary":"Add a system function which returns the name of the database.","description":"Got this request in private conversation with a user. Other databases provide this functionality. Seems straightforward to add."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12738395","self":"https://issues.apache.org/jira/rest/api/2/issue/12738395","key":"DERBY-6724","fields":{"summary":"NPE if insert statement needs recompilation after having fired a trigger","description":"If an insert statement that has fired a trigger, is needs recompilation during execution, it fails with a NullPointerException in InternalTriggerExecutionContext.cleanup():\r\n\r\n{noformat}\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.cleanup(InternalTriggerExecutionContext.java:236)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.cleanup(TriggerEventActivator.java:291)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp(InsertResultSet.java:2199)\r\n\tat org.apache.derby.impl.sql.conn.GenericStatementContext.cleanupOnError(GenericStatementContext.java:543)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:476)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1337)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(EmbedPreparedStatement.java:1394)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12738052","self":"https://issues.apache.org/jira/rest/api/2/issue/12738052","key":"DERBY-6723","fields":{"summary":"Allow derived table as a source in MERGE statement","description":"I'm trying to utilize MERGE to do an upsert operation like this:\r\n\r\nMERGE INTO \"APP\".\"ST_KEY_VAL\" trg USING (SELECT * FROM (VALUES ('key1', 'val1')) as t1 (st_key, st_val)) as src\r\nON trg.st_key = src.st_key\r\nWHEN MATCHED THEN UPDATE SET st_val = src.st_val\r\nWHEN NOT MATCHED THEN INSERT VALUES (src.st_key, src.st_val)\r\n;\r\n\r\nDerby returns an error:\r\nError: The source table of a MERGE statement must be a base table or table function.\r\nSQLState:  42XAL\r\nErrorCode: 30000\r\n\r\nMERGE is used this way on other databases, unfortunately I can't find whether it is standard compliant or not. If this gets implemented, I would use it in PreparedStatement, replacing values with \"?\"-s."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737848","self":"https://issues.apache.org/jira/rest/api/2/issue/12737848","key":"DERBY-6722","fields":{"summary":"GenericStatementContext.cleanupOnError() needs protection from later errors during statement cleanup","description":"If a statement raises an error and then a subsequent error occurs during statement cleanup, the original error is lost. This is discussed in this email thread:http://apache-database.10148.n7.nabble.com/NPE-from-InternalTriggerExecutionContext-cleanup-td141789.html"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737788","self":"https://issues.apache.org/jira/rest/api/2/issue/12737788","key":"DERBY-6721","fields":{"summary":"Deprecate support for Java 6","description":"Deprecate support for Java 6.\r\n\r\nOracle Java 6 is EOL with the end of public updates in February 2013. See http://www.oracle.com/technetwork/java/eol-135779.html\r\n\r\nJava 7 can be the minimum platform to compile and run."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737181","self":"https://issues.apache.org/jira/rest/api/2/issue/12737181","key":"DERBY-6720","fields":{"summary":"Add derbyoptionaltools.jar to the maven artifacts we publish","description":"The new derbyoptionaltools.jar is not published to the maven repositories along with the other Derby jar files."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737180","self":"https://issues.apache.org/jira/rest/api/2/issue/12737180","key":"DERBY-6719","fields":{"summary":"Add derbyoptionaltools.jar to the class paths of the scripts in the bin directory","description":"The derbyoptionaltools.jar should be added to the class paths constructed by all of the scripts in the bin distros which include derby.jar. Otherwise, the Lucene plugin (and future features which we put in derbyoptionaltools.jar) won't be available when you use the scripts to run ij, the network server, and sysinfo.\r\n\r\nFor instance, you will see information on this jar file if you run sysinfo this way...\r\n\r\n{noformat}\r\njava -jar derbyrun.jar sysinfo\r\n{noformat}\r\n\r\n…but not if you run the sysinfo script in the bin directory of a Derby installation.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737141","self":"https://issues.apache.org/jira/rest/api/2/issue/12737141","key":"DERBY-6718","fields":{"summary":"Database corruption","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737077","self":"https://issues.apache.org/jira/rest/api/2/issue/12737077","key":"DERBY-6717","fields":{"summary":"Policies with multiple SystemPermissions are not handled well","description":"Rick noted in DERBY-6648 that if you wanted to grant both SystemPermission(\"engine\", \"monitor\") and SystemPermission(\"engine\", \"usederbyinternals\") to a code base, the following would work:\r\n\r\npermission org.apache.derby.security.SystemPermission \"engine\", \"monitor,usederbyinternals\";\r\n\r\nHowever, the following does not work:\r\n\r\npermission org.apache.derby.security.SystemPermission \"engine\", \"usederbyinternals\";\r\npermission org.apache.derby.security.SystemPermission \"engine\", \"monitor\";"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12737053","self":"https://issues.apache.org/jira/rest/api/2/issue/12737053","key":"DERBY-6716","fields":{"summary":"Minor fixes in SystemPrivilegesPermissionTest","description":"I noticed two typos in SystemPrivilegesPermissionTest that reduces the test coverage ever so slightly.\r\n\r\n1) assertEquivalentPermissions() checks if two permissions, p1 and p2, are equal. One of the checks is supposed to be that p1 implies p2 and p2 implies p1. Instead of checking that both holds, it checks that p1 implies p2 twice.\r\n\r\n2) testSystemPermission() does some work to reorder expected actions to match the canonical action order before calling assertEquals(). However, assertEquals() is only called if the actions didn't have to be reordered. The assert could have been called unconditionally."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12736768","self":"https://issues.apache.org/jira/rest/api/2/issue/12736768","key":"DERBY-6715","fields":{"summary":"MissingPermissionsTest fails under JaCoCo","description":"MissingPermissionsTest has started failing in the [code coverage tests|https://builds.apache.org/job/Derby-JaCoCo/] lately.\r\n\r\n{noformat}\r\nsubprocess run failed: :Spawned MPT exitCode=134\r\nSTDERR:\r\njava.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/home/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140825_1759\" \"read\")\r\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)\r\n\tat java.security.AccessController.checkPermission(AccessController.java:559)\r\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n\tat java.lang.SecurityManager.checkRead(SecurityManager.java:888)\r\n\tat java.io.File.exists(File.java:770)\r\n\tat java.io.File.mkdirs(File.java:1263)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.startup(FileOutput.java:46)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.startup(Agent.java:126)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:56)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:606)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)\r\nException in thread \"main\" java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:606)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)\r\nCaused by: java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"shutdownHooks\")\r\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)\r\n\tat java.security.AccessController.checkPermission(AccessController.java:559)\r\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n\tat java.lang.Runtime.addShutdownHook(Runtime.java:209)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:57)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)\r\n\t... 6 more\r\n\r\nSTDOUT:\r\nFATAL ERROR in native method: processing of -javaagent failed\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12736741","self":"https://issues.apache.org/jira/rest/api/2/issue/12736741","key":"DERBY-6714","fields":{"summary":"RuntimeInfoTest failed with insufficient data from server","description":"Seen in the nightly testing of trunk.\r\n\r\nhttp://download.java.net/javadesktop/derby/request_5595117/javadb-task-3919785.html\r\n\r\n{noformat}\r\njava.lang.Exception: DRDA_InvalidReplyTooShort.S:Ungültige Antwort von Network Server: Daten nicht ausreichend.\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(NetworkServerControlImpl.java:3357)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(NetworkServerControlImpl.java:1988)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer(NetworkServerControlImpl.java:2957)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(NetworkServerControlImpl.java:3010)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo(NetworkServerControlImpl.java:1443)\r\n\tat org.apache.derby.drda.NetworkServerControl.getRuntimeInfo(NetworkServerControl.java:516)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.x_testRuntimeInfoAfterConnClose(RuntimeInfoTest.java:193)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.testRunTests(RuntimeInfoTest.java:97)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:58)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}\r\n\r\n[^derby.log] showed that there was a NullPointerException while building the runtimeinfo string:\r\n\r\n{noformat}\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.impl.drda.Database.buildRuntimeInfo(Database.java:417)\r\n\tat org.apache.derby.impl.drda.Session.buildRuntimeInfo(Session.java:291)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.buildRuntimeInfo(DRDAConnThread.java:9186)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.buildRuntimeInfo(NetworkServerControlImpl.java:4069)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.getRuntimeInfo(NetworkServerControlImpl.java:2229)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.sendRuntimeInfo(NetworkServerControlImpl.java:2157)\r\n\tat org.apache.derby.impl.drda.NetworkServerControlImpl.processCommands(NetworkServerControlImpl.java:1804)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState(DRDAConnThread.java:665)\r\n\tat org.apache.derby.impl.drda.DRDAConnThread.run(DRDAConnThread.java:284)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12735770","self":"https://issues.apache.org/jira/rest/api/2/issue/12735770","key":"DERBY-6713","fields":{"summary":"Failure in ReplicationRun_Local_3_p3.testReplication_Local_3_p3_StateNegativeTests","description":"The following error turned up in a continuous integration test run on the 10.11 branch on platform amd64_jdk9: http://download.java.net/javadesktop/derby/request_5594837/\r\n\r\n{noformat}\r\n    java.sql.SQLException: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED connection is closedXJ001.U\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:112)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)\r\n\tat org.apache.derby.jdbc.BasicClientDataSource40.getConnection(BasicClientDataSource40.java:1426)\r\n\tat org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_3_p3.testReplication_Local_3_p3_StateNegativeTests(ReplicationRun_Local_3_p3.java:211)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:119)\r\n\tat org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runBare(ReplicationRun.java:243)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ001: DERBY SQL error: ERRORCODE: 0, SQLSTATE: XJ001, SQLERRMC: org.apache.derby.shared.common.sanity.AssertFailureASSERT FAILED connection is closedXJ001.U\r\n\tat org.apache.derby.client.am.ClientConnection.completeSqlca(ClientConnection.java:2290)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnectionReply.java:509)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnectionReply.java:398)\r\n\tat org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnectionReply.java:256)\r\n\tat org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(NetConnectionReply.java:82)\r\n\tat org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb(NetConnection.java:788)\r\n\tat org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(NetConnection.java:724)\r\n\tat org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect(NetConnection.java:565)\r\n\tat org.apache.derby.client.net.NetConnection.flowConnect(NetConnection.java:359)\r\n\tat org.apache.derby.client.net.NetConnection.initialize(NetConnection.java:274)\r\n\tat org.apache.derby.client.net.NetConnection.<init>(NetConnection.java:228)\r\n\tat org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(ClientJDBCObjectFactoryImpl.java:295)\r\n\tat org.apache.derby.jdbc.BasicClientDataSource40.getConnectionX(BasicClientDataSource40.java:1470)\r\n\tat org.apache.derby.jdbc.BasicClientDataSource40.getConnection(BasicClientDataSource40.java:1421)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12735768","self":"https://issues.apache.org/jira/rest/api/2/issue/12735768","key":"DERBY-6712","fields":{"summary":"deletion failure in dblook_test_territory","description":"The following error turned up in last night's test run on the 10.11 branch. The error occurred on platform Windows_amd64_jdk8. See http://download.java.net/javadesktop/derby/request_5594847/\r\n\r\n{noformat}\r\n********* Diff file derbyall/derbytools/dblook_test_territory.diff\r\n*** Start: dblook_test_territory jdk1.8.0_20 derbyall:derbytools 2014-08-20 22:40:19 ***\r\n6242a6243,6244\r\n> ERROR: deleting: log\r\n> ERROR: deleting: wombat_new\r\nTest Failed.\r\n*** End:   dblook_test_territory jdk1.8.0_20 derbyall:derbytools 2014-08-20 22:40:33 ***\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12735759","self":"https://issues.apache.org/jira/rest/api/2/issue/12735759","key":"DERBY-6711","fields":{"summary":"Missing database name in error message from LogToFile.stopReplicationSlaveRole()","description":"I saw this error in derby.log after running replication tests:\r\n\r\n{noformat}\r\nERROR 08006: Database '{0}' shutdown.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole(LogToFile.java:5253)\r\n\tat org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(SlaveController.java:266)\r\n\tat org.apache.derby.impl.store.replication.slave.SlaveController.access$500(SlaveController.java:64)\r\n\tat org.apache.derby.impl.store.replication.slave.SlaveController$SlaveLogReceiverThread.run(SlaveController.java:526)\r\n{noformat}\r\n\r\nThe database name is missing from the message.\r\n\r\nLogToFile.stopReplicationSlaveRole() should either call newException() with the database name as argument or use another message that doesn't take a database name argument."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12735532","self":"https://issues.apache.org/jira/rest/api/2/issue/12735532","key":"DERBY-6710","fields":{"summary":"Update documentation for security policy template to match changes in DERBY-6680","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12735036","self":"https://issues.apache.org/jira/rest/api/2/issue/12735036","key":"DERBY-6709","fields":{"summary":"Convert the storetests suite to JUnit","description":"The storetests suite is a small test suite that consists of the following tests:\r\n\r\nstoretests/st_schema.sql\r\nstoretests/st_derby1939.java\r\nstoretests/st_reclaim_longcol.java\r\nstoretests/st_derby715.java\r\nstoretests/derby94.sql\r\n\r\nIt looks like these tests could be converted to JUnit relatively easily."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12734348","self":"https://issues.apache.org/jira/rest/api/2/issue/12734348","key":"DERBY-6708","fields":{"summary":"OOME when running ConstraintCharacteristicsTest with smaller heap","description":"When I ran suites.All on a device with little memory, so that I needed to reduce the heap (-Xmx160M), it stopped and failed with an OOME when it came to ConstraintCharacteristicsTest.\r\n\r\nThat test uses a memory database in order to speed it up. One of the test cases (testManySimilarDuplicates) has such a big data set that the database doesn't fit in the heap. It would be good if we could reduce the memory requirements of the test so that it passes on smaller devices to. Alternatively, we could add a switch that makes it easy to disable test cases that are known to have high memory requirements."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12734274","self":"https://issues.apache.org/jira/rest/api/2/issue/12734274","key":"DERBY-6707","fields":{"summary":"Inadequate error messages for configuration errors in Derby","description":"Dear developers,\r\n\r\nDerby's error message for misconfiguration should be improved. Sometimes, the dumped error messages is very unclear, and costs users extra time to figure out a simple problem.\r\n\r\nHere is a reproducible example\r\n\r\n\r\n1.  specify a wrong value for derby.stream.error.method option, and put the following line in the derby.properties file\r\n\r\nderby.stream.error.method=hello   (obvious it is wrong)\r\n\r\n\r\n2. \r\nconnect to a derby db, and issue a selection query\r\n\r\n3. \r\nderby simply dumped the following error message, which is hard to be connected to the misconfigured option\r\n\r\n\r\nij> CONNECT 'jdbc:derby:firstdb';\r\nJAVA ERROR: java.lang.ExceptionInInitializerError\r\nij> select * from COUNTRIES;\r\nIJ ERROR: Unable to establish connection\r\nij> Exception in thread \"main\" java.lang.NoClassDefFoundError: Could not initialize class org.apache.derby.jdbc.EmbeddedDriver\r\n\tat org.apache.derby.jdbc.AutoloadedDriver.getDriverModule(Unknown Source)\r\n\tat org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:579)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:243)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.cleanupGo(Unknown Source)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(Unknown Source)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Unknown Source)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Unknown Source)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Unknown Source)\r\n\r\n\r\nI would sugget to fix this problem by checking invalid configuration option names, and improve error message (at least the error message should pinpoint the likely misconfigured options).\r\n\r\nPlease let me know your thoughts.\r\n\r\nThanks\r\n\r\n-Sai"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12734271","self":"https://issues.apache.org/jira/rest/api/2/issue/12734271","key":"DERBY-6706","fields":{"summary":"Derby does not check invalid configuration option name in derby.properties","description":"Dear Derby Developers,\r\n\r\nThis is a simple-to-fix but annoying problem in Derby.\r\n\r\nDerby simply does not check an invalid configuration option name specified in derby.properties.\r\n\r\nFor example,\r\n\r\nif I want to set:\r\n\r\nderby.database.forceDatabaseLock=False\r\n\r\nHowever, I *mis-spell* the configuration name, like:\r\n\r\nddddddddddddderby.database.forceDatabaseLock=False\r\n\r\nSeems that derby simply ignores this mis-spelled configuration option rather than issuing a warning to inform me the potential problems in using Derby.  This happens to me a few times, and is *really* annoying.\r\n\r\nI would suggest to check the validity of every configuration option name in the configuration file. Please let me know your thoughts.\r\n\r\n-Sai"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12734076","self":"https://issues.apache.org/jira/rest/api/2/issue/12734076","key":"DERBY-6705","fields":{"summary":"Triggers should not allow MERGE statements that reference temporary tables","description":"The reference manual topic on the DECLARE GLOBAL TEMPORARY TABLE statement says: \"Temporary tables cannot be referenced in a triggeredSQLStatement or in a WHEN clause\"\r\n\r\nStill, a CREATE TRIGGER statement succeeds if the triggered SQL statement is a MERGE statement that references a temporary table:\r\n\r\n{noformat}\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> declare global temporary table temp (x int) not logged;\r\n0 rows inserted/updated/deleted\r\nij> create table t1(x int);\r\n0 rows inserted/updated/deleted\r\nij> create trigger tr after insert on t1 insert into session.temp values 1;\r\nERROR XCL51: The requested function can not reference tables in SESSION schema.\r\nij> create trigger tr after insert on t1 merge into session.temp using t1 on session.temp.x=t1.x when matched then delete;\r\n0 rows inserted/updated/deleted\r\nij> insert into t1 values 1,2,3;\r\n3 rows inserted/updated/deleted\r\n{noformat}\r\n\r\nThe second CREATE TRIGGER statement above should have failed the same way as the first."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12733850","self":"https://issues.apache.org/jira/rest/api/2/issue/12733850","key":"DERBY-6704","fields":{"summary":"Hang in AutoloadTest.spawnProcess:JDBCDriversEmbeddedTest on Mac/jdk7,8","description":"In our release tests for 10.11 we have seen this stack trace:\r\n{code}\r\n org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.spawnProcess:JDBCDriversEmbeddedTest\t2701.548 s\r\n junit.framework.AssertionFailedError: Test process failed:Spawned org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversEmbeddedTest exitCode=143\r\nSTDOUT:\r\n..\r\n at org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.spawnProcess(AutoloadTest.java:256)\r\n at org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n at org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n at junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n at junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n at junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{code}\r\npresumably because the spawned process is killed by the test framework; it had been executing for 2701 second, but we don't have much insight into what happened to the subprocess because we don't collect its std our or std err."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12733711","self":"https://issues.apache.org/jira/rest/api/2/issue/12733711","key":"DERBY-6703","fields":{"summary":"MERGE statement fails with NullPointerException if ON clause references non-existent column","description":"{noformat}\r\nij> create table t1(x int);\r\n0 rows inserted/updated/deleted\r\nij> create table t2(y int);\r\n0 rows inserted/updated/deleted\r\nij> merge into t1 using t2 on z when matched then update set x=x+1;\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n{noformat}\r\n\r\nStack trace with line numbers on trunk:\r\n\r\n{noformat}\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.addColumn(MergeNode.java:947)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.getColumnsFromList(MergeNode.java:930)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.getColumnsInExpression(MergeNode.java:314)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.buildSelectList(MergeNode.java:816)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.bindLeftJoin(MergeNode.java:579)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.bindStatement(MergeNode.java:396)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\n\tat org.apache.derby.iapi.tools.run.main(run.java:53)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12733663","self":"https://issues.apache.org/jira/rest/api/2/issue/12733663","key":"DERBY-6702","fields":{"summary":"test failure in NSSecurityMechanismTest; The expected SQL state must be five characters long","description":"Saw this in a nightly run against trunk (10.12.0.0 alpha - (1617392)) with jdk 1.8 (not reported on my public page):\r\n1) testNetworkServerSecurityMechanism(org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest)junit.framework.AssertionFailedError: The expected SQL state must be five characters long\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:873)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:940)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDriverManager(NSSecurityMechanismTest.java:581)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionsUsingDriverManager(NSSecurityMechanismTest.java:437)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism(NSSecurityMechanismTest.java:291)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: java.sql.SQLException: Java exception: 'Unexpected CryptoAPI failure generating seed: java.lang.InternalError'.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.jdbc.ClientDriver.connect(Unknown Source)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:664)\r\n\tat java.sql.DriverManager.getConnection(DriverManager.java:270)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDriverManager(NSSecurityMechanismTest.java:541)\r\n\t... 37 more\r\nCaused by: ERROR XJ001: Java exception: 'Unexpected CryptoAPI failure generating seed: java.lang.InternalError'.\r\n\tat org.apache.derby.client.net.NetConnection.flowConnect(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.<init>(Unknown Source)\r\n\tat org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(Unknown Source)\r\n\t... 41 more\r\nCaused by: java.lang.InternalError: Unexpected CryptoAPI failure generating seed\r\n\tat sun.security.provider.NativeSeedGenerator.getSeedBytes(NativeSeedGenerator.java:62)\r\n\tat sun.security.provider.SeedGenerator.generateSeed(SeedGenerator.java:144)\r\n\tat sun.security.provider.SecureRandom.engineGenerateSeed(SecureRandom.java:128)\r\n\tat java.security.SecureRandom.generateSeed(SecureRandom.java:522)\r\n\tat org.apache.derby.client.am.EncryptionManager.generateSeed(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.initializeClientSeed(Unknown Source)\r\n\tat org.apache.derby.client.net.NetConnection.flowUSRSSBPWDconnect(Unknown Source)\r\n\t... 44 more\r\n\r\nThis test passed with this jvm on August 6 (with trunk at revision 1616382), but also failed on August 8 (with trunk at revision 1616916).\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732825","self":"https://issues.apache.org/jira/rest/api/2/issue/12732825","key":"DERBY-6701","fields":{"summary":"Instability in RuntimeInfoTest.x_testRuntimeInfoAfterConnClose","description":"I have seen variations of the following error twice in the past 2 days: once on the 10.12 trunk while testing the fix to derby-6692 and then again on the 10.11.1.1 release candidate while running the tests without the Lucene jar files.\r\n\r\n{noformat}\r\n1) testRunTests(org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest)junit.framework.ComparisonFailure: Output doesn't match expected:<...-----\r\nSessionnummer:[8\r\n\r\n\r\n-------------------------------------------------------------\r\nAnzahl Verbindungsthreads: 4\r\nAnzahl aktive Sessions: 1]\r\nAnzahl wartende Ses...> but was:<...-----\r\nSessionnummer:[5\r\nDatenbank:singleUse/oneuse5\r\nBenutzer:APP\r\nAnzahl Anweisungen:2\r\nInformationen zur vorbereiteten Anweisung: \r\n\tAnwsg-ID\t\tSQL-Text\r\n\t-------------\t-----------\r\n\tnull\r\n\tnull\r\n\r\n\r\n\r\nSessionnummer:8\r\n\r\n\r\n-------------------------------------------------------------\r\nAnzahl Verbindungsthreads: 4\r\nAnzahl aktive Sessions: 2]\r\nAnzahl wartende Ses...>\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.x_testRuntimeInfoAfterConnClose(RuntimeInfoTest.java:192)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.RuntimeInfoTest.testRunTests(RuntimeInfoTest.java:97)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732821","self":"https://issues.apache.org/jira/rest/api/2/issue/12732821","key":"DERBY-6700","fields":{"summary":"Error in DatabaseClassLoadingTest.testSignedJar","description":"The following error was seen in a continuous integration run on the 10.11 branch on platform ia32_jdk6: http://download.java.net/javadesktop/derby/request_5594356/\r\n\r\n{noformat}\r\n    java.sql.SQLSyntaxErrorException: The class 'org.apache.derbyTesting.databaseclassloader.emc' does not exist or is inaccessible. This can happen if the class is not public.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:95)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:152)\r\n\tat org.apache.derby.jdbc.InternalDriver.newEmbedPreparedStatement(InternalDriver.java:727)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.signersTests(DatabaseClassLoadingTest.java:552)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testSignedJar(DatabaseClassLoadingTest.java:546)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\nCaused by: ERROR 42X51: The class 'org.apache.derbyTesting.databaseclassloader.emc' does not exist or is inaccessible. This can happen if the class is not public.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: java.lang.ClassNotFoundException: org.apache.derbyTesting.databaseclassloader.emc : Security exception thrown accessing class org.apache.derbyTesting.databaseclassloader.emc in jar \"EMC\".\"MAIL_APP\" : NotBefore: Thu Dec 01 19:06:44 CET 2005\r\n\tat org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(DatabaseClasses.java:254)\r\n\tat org.apache.derby.iapi.services.loader.ClassInspector.getClass(ClassInspector.java:935)\r\n\tat org.apache.derby.iapi.services.loader.ClassInspector.accessible(ClassInspector.java:131)\r\n\tat org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(QueryTreeNode.java:1217)\r\n\tat org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpressionMinion(StaticMethodCallNode.java:384)\r\n\tat org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(StaticMethodCallNode.java:209)\r\n\tat org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(JavaToSQLValueNode.java:229)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(ResultColumn.java:740)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(ResultColumnList.java:824)\r\n\tat org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(RowResultSetNode.java:227)\r\n\tat org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions(DMLStatementNode.java:209)\r\n\tat org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DMLStatementNode.java:130)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.bindStatement(CursorNode.java:283)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:401)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732816","self":"https://issues.apache.org/jira/rest/api/2/issue/12732816","key":"DERBY-6699","fields":{"summary":"Error in PredicatePushdownTest.test_predicatePushdown","description":"The following error was seen in the nightly tests on the 10.11 branch on Solaris_sparc_jdk8: http://download.java.net/javadesktop/derby/request_5594365/\r\n\r\n{noformat}\r\n    java.sql.SQLException: Java exception: 'ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:691)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(EmbedStatement.java:147)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest.test_predicatePushdown(PredicatePushdownTest.java:770)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ001: Java exception: 'ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)\r\n\tat org.apache.derby.impl.services.bytecode.Conditional.end(Conditional.java:210)\r\n\tat org.apache.derby.impl.services.bytecode.BCMethod.completeConditional(BCMethod.java:1055)\r\n\tat org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(StaticMethodCallNode.java:1334)\r\n\tat org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:160)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:1061)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(ResultColumnList.java:1458)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1195)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1539)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.UnionNode.generate(UnionNode.java:654)\r\n\tat org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(NormalizeResultSetNode.java:644)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1367)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.DistinctNode.generate(DistinctNode.java:288)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1464)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1367)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(JoinNode.java:1648)\r\n\tat org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1624)\r\n\tat org.apache.derby.impl.sql.compile.JoinNode.generateCore(JoinNode.java:1561)\r\n\tat org.apache.derby.impl.sql.compile.HalfOuterJoinNode.generate(HalfOuterJoinNode.java:786)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1367)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ProjectRestrictNode.java:1464)\r\n\tat org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ProjectRestrictNode.java:1319)\r\n\tat org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:86)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:640)\r\n\tat org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:549)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732814","self":"https://issues.apache.org/jira/rest/api/2/issue/12732814","key":"DERBY-6698","fields":{"summary":"Make it easier to run suites.All on soft-upgraded database","description":"See discussion here: http://mail-archives.apache.org/mod_mbox/db-derby-dev/201408.mbox/%3C53E3B191.2010608%40gmail.com%3E\r\n\r\nIt would be useful if tests that know they will fail unless the database format is at least at a certain version, disable themselves when running on an older database. This would reduce the noise when running suites.All on a soft-upgraded database, which is an ad hoc test that's sometimes performed during release testing."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732794","self":"https://issues.apache.org/jira/rest/api/2/issue/12732794","key":"DERBY-6697","fields":{"summary":"Failures when running tests with JaCoCo","description":"Some test cases have been failing in the code coverage tests at https://builds.apache.org/job/Derby-JaCoCo/ since Jul 28. The failing tests are:\r\n\r\norg.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest.test_6616\r\norg.apache.derbyTesting.functionTests.tests.lang.DBOAccessTest$NoAuthorization.test_6616\r\norg.apache.derbyTesting.unitTests.junit.MissingPermissionsTest.testMissingFilePermission\r\n\r\nThe first two fail with the following message: SQLJ.INSTALL_JAR should have succeeded: 46001 Exception while accessing jar file using URL 'foo'.\r\n\r\nThe last one fails with this stack trace:\r\n\r\n{noformat}\r\nsubprocess run failed: :Spawned MPT exitCode=134\r\nSTDERR:\r\njava.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/x1/jenkins/jenkins-slave/workspace/Derby-JaCoCo/trunk/junit_20140806_1917\" \"read\")\r\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)\r\n\tat java.security.AccessController.checkPermission(AccessController.java:559)\r\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n\tat java.lang.SecurityManager.checkRead(SecurityManager.java:888)\r\n\tat java.io.File.exists(File.java:770)\r\n\tat java.io.File.mkdirs(File.java:1263)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.output.FileOutput.startup(FileOutput.java:46)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.startup(Agent.java:126)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:56)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:606)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)\r\nException in thread \"main\" java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:606)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:382)\r\n\tat sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:397)\r\nCaused by: java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"shutdownHooks\")\r\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)\r\n\tat java.security.AccessController.checkPermission(AccessController.java:559)\r\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n\tat java.lang.Runtime.addShutdownHook(Runtime.java:209)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.Agent.getInstance(Agent.java:57)\r\n\tat org.jacoco.agent.rt.internal_9dd1198.PreMain.premain(PreMain.java:45)\r\n\t... 6 more\r\n\r\nSTDOUT:\r\nFATAL ERROR in native method: processing of -javaagent failed\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732734","self":"https://issues.apache.org/jira/rest/api/2/issue/12732734","key":"DERBY-6696","fields":{"summary":"ERROR XBM0X: Supplied territory description 'es_419' is invalid, expecting ln[_CO[_variant]]","description":"We have a customer in the South American Spanish locale, which in effect are using these settings: -Duser.language=es -Duser.country=419.  I have seen DERBY-4854 and this comment:\r\n{quote}\r\nThe problem seems to be that Locale.getDefault().getCountry() returns \"8859_1\" in this locale, and that value confuses Derby. The javadoc for Locale.getCountry() says that it should return an empty string or a two-letter uppercase country code, so I think it's a bug that getCountry() returns \"8859_1\".\r\n{quote}\r\nHowever the Javadoc in fact states that 3 digit codes are permitted:\r\n{quote}\r\nReturns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.\r\n{quote}\r\nSo it seems Derby requires adding support for the three digit country codes.\r\n\r\nAs a workaround, I can apply territory=en_US to the connection parameters, but this is not ideal.\r\n\r\nFor the record, here is the stacktrace seen:\r\n{noformat}\r\nThu Aug 07 12:13:27 CDT 2014 Thread[DefaultExecutorService-4,4,DefaultExecutorService] Cleanup action starting\r\nERROR XBM0X: Supplied territory description 'es_419' is invalid, expecting ln[_CO[_variant]]\r\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:278)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.staticGetLocaleFromString(BaseMonitor.java:2020)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(BaseMonitor.java:505)\r\n\tat org.apache.derby.impl.db.BasicDatabase.boot(BasicDatabase.java:156)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.boot(BaseMonitor.java:1993)\r\n\tat org.apache.derby.impl.services.monitor.TopService.bootModule(TopService.java:334)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.bootService(BaseMonitor.java:1827)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(BaseMonitor.java:1013)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(Monitor.java:596)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(EmbedConnection.java:2604)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:407)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection30.<init>(EmbedConnection30.java:73)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection40.<init>(EmbedConnection40.java:53)\r\n\tat org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Driver40.java:70)\r\n\tat org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:255)\r\n\tat org.apache.derby.jdbc.EmbeddedDataSource.getConnection(EmbeddedDataSource.java:480)\r\n\tat org.apache.derby.jdbc.EmbedPooledConnection.openRealConnection(EmbedPooledConnection.java:178)\r\n\tat org.apache.derby.jdbc.EmbedPooledConnection.<init>(EmbedPooledConnection.java:119)\r\n\tat org.apache.derby.jdbc.EmbedPooledConnection40.<init>(EmbedPooledConnection40.java:54)\r\n\tat org.apache.derby.jdbc.Driver40.getNewPooledConnection(Driver40.java:179)\r\n\tat org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.createPooledConnection(EmbeddedConnectionPoolDataSource.java:129)\r\n\tat org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.getPooledConnection(EmbeddedConnectionPoolDataSource.java:75)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732700","self":"https://issues.apache.org/jira/rest/api/2/issue/12732700","key":"DERBY-6695","fields":{"summary":"Improving configuration code: should not silently replace an invalid value with the default one","description":"Dear Derby developers,\r\n\r\nI have been using Derby for a while, and think the configuration handling code should be improved. In particular, Derby should check the validity of a user-specified configuration value, rather than replacing an invalid value with the default.\r\n\r\nNot sure that is a major issue or not. But at least it happens to me a couple of times, and causes lots of confusion. Thus, I strongly suggest to fix this.\r\n\r\nHow to reproduce the problem.\r\n\r\nset:\r\n\r\nderby.storage.pageSize= l2800 ( note the first char is \"l\" (L), not \"1\")\r\n\r\nclearly, this invalid value should be notified immediately (or at least logged), however, Derby simply replaces that with the default value, which seems to be \"32768\".  This is a real example, and causes confusion.\r\n\r\nI looked at the code and found the improving code:\r\n\r\nIn class PropertyUtil\r\n\r\npublic static int handleInt(String value, int min, int max, int defaultValue) {\r\n\r\n\t\tif (value == null)\r\n\t\t\treturn defaultValue;\r\n\r\n\t\ttry {\r\n\t\t\tint intValue = Integer.parseInt(value);\r\n\t\t\tif ((intValue >= min) && (intValue <= max))\r\n\t\t\t\treturn intValue;\r\n\t\t}\r\n\t\tcatch (NumberFormatException nfe)\r\n\t\t{\r\n\t\t\t// just leave the default.\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t}\r\n\r\nI would suggest to add logging statements for the invalid cases, and produce an error message to indicate which configuration value is incorrect.\r\n\r\nI have a few more such cases, if you are interested in improving the code, I am happy to share that too.\r\n\r\nPlease let me know your thought.\r\n\r\n-Sai\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732572","self":"https://issues.apache.org/jira/rest/api/2/issue/12732572","key":"DERBY-6694","fields":{"summary":"Error in DatabaseMetaDataTest.testNumericFunctions","description":"This error was seen in last night's test run against the 10.11 branch on Solaris_sparc_jdk8: http://download.java.net/javadesktop/derby/request_5594341/\r\n\r\n{noformat}\r\n    java.sql.SQLException: Java exception: 'ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:152)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement42.<init>(EmbedPreparedStatement42.java:41)\r\n\tat org.apache.derby.jdbc.Driver42.newEmbedPreparedStatement(Driver42.java:59)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1734)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(EmbedConnection.java:1562)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(BaseJDBCTestCase.java:233)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.executeEscaped(DatabaseMetaDataTest.java:2917)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.escapedFunctions(DatabaseMetaDataTest.java:2861)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testNumericFunctions(DatabaseMetaDataTest.java:2796)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ001: Java exception: 'ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: org.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED ByteCode Conditional then/else stack depths differ then:1 else: 2\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:162)\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(SanityManager.java:147)\r\n\tat org.apache.derby.impl.services.bytecode.Conditional.end(Conditional.java:210)\r\n\tat org.apache.derby.impl.services.bytecode.BCMethod.completeConditional(BCMethod.java:1055)\r\n\tat org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(StaticMethodCallNode.java:1334)\r\n\tat org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(JavaToSQLValueNode.java:160)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:1061)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(ResultColumnList.java:1458)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ResultColumnList.java:1195)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generate(ResultColumnList.java:1149)\r\n\tat org.apache.derby.impl.sql.compile.RowResultSetNode.generate(RowResultSetNode.java:878)\r\n\tat org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ScrollInsensitiveResultSetNode.java:86)\r\n\tat org.apache.derby.impl.sql.compile.CursorNode.generate(CursorNode.java:640)\r\n\tat org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:549)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.<init>(EmbedPreparedStatement.java:134)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732355","self":"https://issues.apache.org/jira/rest/api/2/issue/12732355","key":"DERBY-6693","fields":{"summary":"Assert failure/ArrayIndexOutOfBoundsException when using COUNT in MERGE matching clause","description":"This (meaningless) statement gives NPE in insane builds and\r\nassert failure in sane builds:\r\n{code}\r\ns.execute(\"create table t2(x int)\");\r\ns.execute(\"create table t1(x int)\");\r\ns.execute(\"insert into t2 values 3,4\");\r\ns.executeUpdate(\"merge into t1 using t2 on (t1.x=t2.x) \" + \r\n   \"when not matched then insert values (count(*))\");\r\n{code}\r\nI see it also applies to other aggregates, e.g. MAX.\r\nstack trace (insane):\r\n{code}\r\nException in thread \"main\" java.sql.SQLException: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)\r\n        at derby6565.Derby6565.main(Derby6565.java:46)\r\nCaused by: ERROR XJ001: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 12 more\r\nCaused by: java.lang.ArrayIndexOutOfBoundsException: -1\r\n        at org.apache.derby.impl.services.bytecode.BCMethod.popStack(Unknown Source)\r\n        at org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.MergeNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)\r\n        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)\r\n        ... 4 more\r\n{code}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732287","self":"https://issues.apache.org/jira/rest/api/2/issue/12732287","key":"DERBY-6692","fields":{"summary":"Self-deadlock when inserting row with identity column in soft-upgraded database","description":"Create a database called \"wombat\" with Derby 10.10.2.0.\r\n\r\nThen, in the same directory, execute the following code using the 10.11.1.0 release candidate:\r\n\r\n{code}\r\n        Connection c = DriverManager.getConnection(\"jdbc:derby:wombat\");\r\n        c.setAutoCommit(false);\r\n        Statement s = c.createStatement();\r\n        s.execute(\"create table t(i int generated always as identity)\");\r\n        s.execute(\"insert into t values (default)\");\r\n        c.rollback();\r\n{code}\r\n\r\nThe INSERT statement will fail with a self-deadlock:\r\n\r\n{noformat}\r\nException in thread \"main\" java.sql.SQLTransactionRollbackException: Self-deadlock.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n\tat Kladd.main(Kladd.java:12)\r\nCaused by: ERROR 40XL2: Self-deadlock.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(Unknown Source)\r\n\tat org.apache.derby.impl.services.locks.AbstractPool.lockObject(Unknown Source)\r\n\tat org.apache.derby.impl.services.locks.ConcurrentPool.lockObject(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(Unknown Source)\r\n\tat org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.getOldStyleIdentityValue(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(Unknown Source)\r\n\tat org.apache.derby.exe.acaaeec04ex0147xab31x1ccax000007dedc900.e0(Unknown Source)\r\n\tat org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n\t... 4 more\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732241","self":"https://issues.apache.org/jira/rest/api/2/issue/12732241","key":"DERBY-6691","fields":{"summary":"ROW_NUMBER should not be allowed as argument in a procedure call","description":"Fails with assert/NPE instead of proper error:\r\n\r\n{noformat}\r\nij> call syscs_util.syscs_compress_table('APP', 'T', row_number() over ());\r\nERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732240","self":"https://issues.apache.org/jira/rest/api/2/issue/12732240","key":"DERBY-6690","fields":{"summary":"ROW_NUMBER should not be allowed in generation clause","description":"The generation clause is allowed to have a call to the ROW_NUMBER function. But it fails when a new row is inserted. It should be disallowed in CREATE TABLE and ALTER TABLE ADD COLUMN.\r\n\r\n{noformat}\r\nij> create table t (x int generated always as (row_number() over ()));\r\n0 rows inserted/updated/deleted\r\nij> insert into t values default;\r\nERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732235","self":"https://issues.apache.org/jira/rest/api/2/issue/12732235","key":"DERBY-6689","fields":{"summary":"Assert failure/NPE when using ROW_NUMBER in MERGE ... INSERT","description":"sane build:\r\n{noformat}\r\nij version 10.12\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t1(x int);\r\n0 rows inserted/updated/deleted\r\nij> create table t2(x int);\r\n0 rows inserted/updated/deleted\r\nij> merge into t1 using t2 on (t1.x=t2.x) when not matched then insert values (row_number() over ());\r\nERROR XJ001: Java exception: 'ASSERT FAILED cannot get interface without operand: org.apache.derby.shared.common.sanity.AssertFailure'.\r\n{noformat}\r\n\r\ninsane build:\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t1(x int);\r\n0 rows inserted/updated/deleted\r\nij> create table t2(x int);\r\n0 rows inserted/updated/deleted\r\nij> merge into t1 using t2 on (t1.x=t2.x) when not matched then insert values (row_number() over ());\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n{noformat}\r\n\r\nFull stack trace of the assert failure:\r\n{noformat}\r\norg.apache.derby.shared.common.sanity.AssertFailure: ASSERT FAILED cannot get interface without operand\r\n\tat org.apache.derby.shared.common.sanity.SanityManager.ASSERT(SanityManager.java:120)\r\n\tat org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName(UnaryOperatorNode.java:663)\r\n\tat org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(UnaryOperatorNode.java:622)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ResultColumn.java:1061)\r\n\tat org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(ResultColumnList.java:1458)\r\n\tat org.apache.derby.impl.sql.compile.MatchingClauseNode.generateInsertUpdateRow(MatchingClauseNode.java:1342)\r\n\tat org.apache.derby.impl.sql.compile.MatchingClauseNode.generate(MatchingClauseNode.java:1237)\r\n\tat org.apache.derby.impl.sql.compile.MergeNode.generate(MergeNode.java:1012)\r\n\tat org.apache.derby.impl.sql.compile.StatementNode.generate(StatementNode.java:317)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:549)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepare(GenericStatement.java:99)\r\n\tat org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(GenericLanguageConnectionContext.java:1114)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:683)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732138","self":"https://issues.apache.org/jira/rest/api/2/issue/12732138","key":"DERBY-6688","fields":{"summary":"NPE (or sane: ASSERT failure) with ROW_NUMBER in some subqueries","description":"This subquery usage works:\r\n{code}\r\nselect * from (select x from t order by row_number() over () fetch first 1 row only) tt;\r\n{code}\r\nbut this one leads to NPE in insane mode, or a Sanity ASSERT failure in sane mode:\r\n{code}\r\nselect * from t where x =  (select x from t order by row_number() over () fetch first row only);\r\n{code}\r\nleading to this error:\r\n{code}\r\nException in thread \"main\" java.sql.SQLException: Java exception: ': java.lang.NullPointerException'.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n        at derby6565.Derby6565.main(Derby6565.java:33)\r\nCaused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 11 more\r\nCaused by: java.lang.NullPointerException\r\n        at org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.OrderByList.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.OrderByNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.RowCountNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateEvaluatedRow(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.UpdateNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.compile.StatementNode.generate(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepMinion(Unknown Source)\r\n        at org.apache.derby.impl.sql.GenericStatement.prepare(Unknown Source)\r\n        at org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(Unknown Source)\r\n        ... 3 more\r\n{code}\r\nThe immediate problem is that the field *#operand* is null.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732009","self":"https://issues.apache.org/jira/rest/api/2/issue/12732009","key":"DERBY-6687","fields":{"summary":"Error in SysinfoTest.testSysinfoLocale()","description":"The following error was seen on Solaris_amd64_jdk8 in the nightly tests. This may be related to other (possible network-related) errors seen on that platform (DERBY-6686). See http://download.java.net/javadesktop/derby/request_5594301/\r\n\r\n{noformat}\r\n    junit.framework.AssertionFailedError: cannot find --------- Derby Network Server Information -------- in actualOutput:<STDOUT>Mon Aug 04 22:25:38 CEST 2014 : Keine Verbindung zum Derby Network Server auf Host localhost, Port 1527: Connection refused\r\n<END STDOUT>\r\n<STDERR><END STDERR>\r\n\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.SysinfoTest.assertMatchingStringExists(SysinfoTest.java:240)\r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.SysinfoTest.testSysinfoLocale(SysinfoTest.java:201)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12732006","self":"https://issues.apache.org/jira/rest/api/2/issue/12732006","key":"DERBY-6686","fields":{"summary":"Empty process output in SecureServerTest.testServerStartup()","description":"Saw the following error in SecureServerTest on Solaris_amd64_jdk8 during the nightly test run. This looks similar to DERBY-6225: http://download.java.net/javadesktop/derby/request_5594301/\r\n\r\n{noformat}\r\n    junit.framework.AssertionFailedError: SecureServerTest( Opened = false, Authenticated= false, CustomDerbyProperties= null, WildCardHost= null )\r\nExpected: Security manager installed using the Basic server security policy.\r\nBut saw: \r\n\tat org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.testServerStartup(SecureServerTest.java:327)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12731737","self":"https://issues.apache.org/jira/rest/api/2/issue/12731737","key":"DERBY-6685","fields":{"summary":"Permission problems when running JUnit tests with Ant 1.9.4","description":"I saw many permission problems when I set up a build job for the 10.11 branch. See for example this log: https://builds.apache.org/job/Derby-10.11-suites.All/1/console\r\n\r\nFirst stack trace:\r\n\r\n{noformat}\r\n    [junit] Running org.apache.derby.PackagePrivateTestSuite\r\n    [junit] Tests run: 67, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.662 sec\r\n    [junit] Exception in thread \"main\" java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/home/jenkins/jenkins-slave/workspace/Derby-10.11-suites.All/10.11-head/junit_20140804_1122/TEST-org.apache.derby.PackagePrivateTestSuite.xml\" \"write\")\r\n    [junit] \tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)\r\n    [junit] \tat java.security.AccessController.checkPermission(AccessController.java:884)\r\n    [junit] \tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\r\n    [junit] \tat java.lang.SecurityManager.checkWrite(SecurityManager.java:979)\r\n    [junit] \tat java.io.FileOutputStream.<init>(FileOutputStream.java:194)\r\n    [junit] \tat java.io.FileOutputStream.<init>(FileOutputStream.java:156)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.FormatterElement$DelayedFileOutputStream.write(FormatterElement.java:381)\r\n    [junit] \tat java.io.OutputStream.write(OutputStream.java:116)\r\n    [junit] \tat sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)\r\n    [junit] \tat sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)\r\n    [junit] \tat sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:295)\r\n    [junit] \tat sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141)\r\n    [junit] \tat java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229)\r\n    [junit] \tat java.io.BufferedWriter.flush(BufferedWriter.java:254)\r\n    [junit] \tat org.apache.tools.ant.util.DOMElementWriter.openElement(DOMElementWriter.java:371)\r\n    [junit] \tat org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:209)\r\n    [junit] \tat org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222)\r\n    [junit] \tat org.apache.tools.ant.util.DOMElementWriter.write(DOMElementWriter.java:222)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter.endTestSuite(XMLJUnitResultFormatter.java:188)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.fireEndTestSuite(JUnitTestRunner.java:840)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:575)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1179)\r\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1030)\r\n    [junit] Running org.apache.derby.PackagePrivateTestSuite\r\n    [junit] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 sec\r\n    [junit] Test org.apache.derby.PackagePrivateTestSuite FAILED (crashed)\r\n{noformat}\r\n\r\nI can reproduce these failures in my environment by running the junit-single target with Ant 1.9.4. For example:\r\n\r\n{noformat}\r\nant -Dderby.junit.testclass=org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest junit-single\r\n{noformat}\r\n\r\nIf I use an older Ant version (I've tried 1.9.0 and 1.8.2) it does not fail."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12731721","self":"https://issues.apache.org/jira/rest/api/2/issue/12731721","key":"DERBY-6684","fields":{"summary":"Failure in testDERBY5120NumRowsInSydependsForTrigger when upgrading from 10.11.1.0 to trunk","description":"I see the following error when running the upgrade tests on trunk with 10.11.1.0 as the starting point of the trajectory:\r\n\r\n{noformat}\r\nThere was 1 failure:\r\n1) testDERBY5120NumRowsInSydependsForTrigger(org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup)junit.framework.ComparisonFailure: Unexpected SQL state. expected:<[42Y5]5> but was:<[X0Y2]5>\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:876)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(BaseJDBCTestCase.java:940)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1084)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1065)\r\n\tat org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.preapreFortDERBY5120(BasicSetup.java:404)\r\n\tat org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDERBY5120NumRowsInSydependsForTrigger(BasicSetup.java:487)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: java.sql.SQLException: Operation 'DROP TABLE' cannot be performed on object 'ATDC_BKUP1' because TRIGGER 'ATDC_TAB1_TRG1' is dependent on that object.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeLargeUpdate(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(Unknown Source)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(BaseJDBCTestCase.java:1082)\r\n\t... 109 more\r\nCaused by: ERROR X0Y25: Operation 'DROP TABLE' cannot be performed on object 'ATDC_BKUP1' because TRIGGER 'ATDC_TAB1_TRG1' is dependent on that object.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.prepareToInvalidate(Unknown Source)\r\n\tat org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(Unknown Source)\r\n\tat org.apache.derby.impl.sql.depend.BasicDependencyManager.invalidateFor(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.MiscResultSet.open(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n\t... 114 more\r\n\r\nFAILURES!!!\r\nTests run: 145,  Failures: 1,  Errors: 0\r\n\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12731375","self":"https://issues.apache.org/jira/rest/api/2/issue/12731375","key":"DERBY-6683","fields":{"summary":"VTI demo classes missing in the 10.11.1.0 tar.gz bundle","description":"db-derby-10.11.1.0-bin.zip contains the VTI demo classes both in source form and as compiled class files under the demo/programs/vtis subdirectory. db-derby-10.11.1.0-bin.tar.gz only contains the source files."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12731079","self":"https://issues.apache.org/jira/rest/api/2/issue/12731079","key":"DERBY-6682","fields":{"summary":"Add information that index conglomerate supporting deferrable constraints are not shared","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12731057","self":"https://issues.apache.org/jira/rest/api/2/issue/12731057","key":"DERBY-6681","fields":{"summary":"Cannot update BLOB/CLOB values in multiple rows simultaneously","description":"When trying to execute a single command to update multiple rows with a new BLOB/CLOB value, an exception is thrown because Derby tries to read the data stream once for every value/row to update."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12730790","self":"https://issues.apache.org/jira/rest/api/2/issue/12730790","key":"DERBY-6680","fields":{"summary":"Other jar files may need to be granted permission to read derby.ui.* properties","description":"The following properties may be read by LocalizedResource, a class which is included in derby.jar, derbynet.jar, derbyclient.jar, and derbytools.jar:\r\n\r\n{noformat}\r\nderby.ui.codeset\r\nderby.ui.locale\r\n{noformat}\r\n\r\nA user has tripped across this problem in production. With the user's language settings, the network server fails to come up because the server policy file does not grant the server permission to read these properties. See http://apache-database.10148.n7.nabble.com/Hellow-I-have-some-problem-in-customize-security-policy-with-derby-modified-3-td141002.html\r\n\r\nWe should adjust server.policy and template.policy accordingly."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12730428","self":"https://issues.apache.org/jira/rest/api/2/issue/12730428","key":"DERBY-6679","fields":{"summary":"Possible Atomicity Violation in BaseMonitor.shutdown()","description":"I'm developing a tool for atomicity violation detection and I think it have found an atomicity violations in derby.\r\n\r\nIn org.apache.derby.impl.services.monitor.BaseMonitor there might be an atomicity violation in method shutdown(), lines 181-206:\r\n\r\n{noformat}\r\n\t\tfor ( ; ; ) {\r\n\t\t\tsynchronized (this) {\r\n 181:    \t\tposition = services.size()  - 1;\r\n\t\t\tif (position == 0)\r\n\t\t\t\tbreak;\r\n                               ...\r\n\t        \t}\r\n                       ...\r\n\t        }\r\n\t       ...\r\n206:\t      ((TopService) services.get(0)).shutdown();\r\n{noformat}\r\n\r\nBetween the execution of lines 181 and 206 a concurrent thread may remove the only remaining service, causing the access to \"services\" in line 206 to fail."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12729946","self":"https://issues.apache.org/jira/rest/api/2/issue/12729946","key":"DERBY-6678","fields":{"summary":"Array Index out of bounds when accessing Oracle through the thin driver using a derby table function.","description":"Hi,\r\n\r\nI'm really struggling with this.\r\n\r\nI'm trying to create a connection to Oracle using a derby style table function. I am using the thin driver (have tried both ojdbc6 and ojdbc7) and have even tried the TNS version of JDBC url but to no avail.\r\n\r\nThe jdbc URL I am using is:\r\n\r\njdbc:oracle:thin:@localhost:1521:orcl\r\n\r\nDriver class is:\r\n\r\noracle.jdbc.driver.OracleDriver\r\n\r\n\r\n\r\n\r\n------------ DATABASE CREATION SCRIPT ------------------------------\r\n\r\ncreate schema apollobi authorization apollobi;\r\n\r\n------------------\r\n-- INITIALISE JARS\r\n------------------\r\n\r\n-- Clear the database classpath so it is possible to remove and install the jar files.\r\n\r\ncall syscs_util.syscs_set_database_property(\r\n    'derby.database.classpath',\r\n    '');\r\n\r\n\r\n-- Remove Jars\r\n\r\ncall sqlj.remove_jar('apollobi.ojdbc',0);\r\ncall sqlj.remove_jar('apollobi.ojdbc',0);\r\n\r\ncall sqlj.remove_jar('apollobi.commonslogging',0);\r\ncall sqlj.remove_jar('apollobi.hivejdbc',0);\r\ncall sqlj.remove_jar('apollobi.hivemetastore',0);\r\ncall sqlj.remove_jar('apollobi.hiveservice',0);\r\ncall sqlj.remove_jar('apollobi.libfb303',0);\r\ncall sqlj.remove_jar('apollobi.libthrift',0);\r\ncall sqlj.remove_jar('apollobi.log4j',0);\r\ncall sqlj.remove_jar('apollobi.slf4j',0);\r\ncall sqlj.remove_jar('apollobi.slf4jlog4j',0);\r\n\r\ncall sqlj.remove_jar('apollobi.ApolloBIDerby',0);\r\n\r\n\r\n-- Install Jars\r\n\r\n\r\n-- Oracle JDBC Driver\r\n\r\ncall sqlj.install_jar('D:\\ApolloBI\\oracle\\ojdbc6.jar','apollobi.ojdbc',0);\r\n--call sqlj.install_jar('D:\\ApolloBI\\oracle\\ojdbc7.jar','apollobi.ojdbc',0);\r\n\r\n\r\n-- Cloudera Hive Driver Jars\r\n\r\n\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\commons-logging-1.0.4.jar','apollobi.commonslogging',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\hive-jdbc-0.10.0-cdh4.2.0.jar','apollobi.hivejdbc',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\hive-metastore-0.10.0-cdh4.2.0.jar','apollobi.hivemetastore',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\hive-service-0.10.0-cdh4.2.0.jar','apollobi.hiveservice',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\libfb303-0.9.0.jar','apollobi.libfb303',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\libthrift-0.9.0.jar','apollobi.libthrift',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\log4j-1.2.16.jar','apollobi.log4j',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\slf4j-api-1.6.4.jar','apollobi.slf4j',0);\r\ncall sqlj.install_jar('D:\\ApolloBI\\cloudera\\impala-jdbc-driver\\impala-jdbc-0.5-2\\slf4j-log4j12-1.6.1.jar','apollobi.slf4jlog4j',0);\r\n\r\ncall sqlj.install_jar('D:\\ApolloBI\\apollobi\\derby\\jars\\ApolloBIDerby.jar','apollobi.ApolloBIDerby',0);\r\n\r\n-- Add the jars to the database classpath.\r\n\r\ncall syscs_util.syscs_set_database_property(\r\n    'derby.database.classpath',\r\n    'apollobi.ojdbc:apollobi.commonslogging:apollobi.hivejdbc:apollobi.hivemetastore:apollobi.hiveservice:apollobi.libfb303:apollobi.libthrift:apollobi.log4j:apollobi.slf4j:apollobi.slf4jlog4j:apollobi.ApolloBIDerby');\r\n\r\n\r\n------------------------\r\n-- APPLICATION FUNCTIONS\r\n------------------------\r\n\r\ndrop function Q2Toracle;\r\n\r\ncreate function Q2Toracle(s varchar(1000))\r\nreturns table\r\n(\r\n    employeeid int,\r\n    firstName  varchar(50),\r\n    lastName   varchar(50)\r\n)\r\nlanguage java\r\nparameter style DERBY_JDBC_RESULT_SET\r\nno sql\r\nexternal name 'apollo.bi.derby.StaticTableFunctions.Q2Toracle';\r\n\r\n\r\n\r\n---------------- APPLICATION JAVA CLASS StaticTableFunctions -------------------------\r\n\r\npackage apollo.bi.derby;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Properties;\r\n\r\nimport org.apache.log4j.BasicConfigurator;\r\nimport org.apache.log4j.Logger;\r\n\r\npublic class StaticTableFunctions {\r\n\r\n\r\n\t// Initialise log4j\r\n\r\n\tstatic Logger logger = Logger.getLogger(StaticTableFunctions.class);\r\n\r\n\r\n\t// Config\r\n\r\n    static String defaultJDBCConnStr         = \"jdbc:default:connection\";\r\n\r\n\r\n    static String impalaJDBCDriverClassName   = \"org.apache.hive.jdbc.HiveDriver\";\r\n\tstatic String impalaJDBCConnStr           = \"jdbc:hive2://192.168.56.1:21050/;auth=noSasl\";\r\n\r\n\r\n//  Can't get this driver to work.\r\n\tstatic String oracleJDBCDriverClassName   = \"oracle.jdbc.driver.OracleDriver\";\r\n\tstatic String oracleJDBCConnStr           = \"jdbc:oracle:thin:@localhost:1521:orcl\";\r\n\r\n//  Can't get this driver to work.\r\n//\tstatic String oracleJDBCDriverClassName   = \"oracle.jdbc.driver.OracleDriver\";\r\n//\tstatic String oracleJDBCConnStr           = \"jdbc:oracle:thin:@(DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))(CONNECT_DATA =(SERVER = DEDICATED)(SERVICE_NAME = orcl.config)))\";\r\n\r\n//  The following driver requires a local ODBC datasource to have been defined.\r\n//  In windows, this can be defined using the ODBC Datasource Administrator.\r\n//\tstatic String oracleJDBCDriverClassName   = \"sun.jdbc.odbc.JdbcOdbcDriver\"; // JDBC=ODBC Bridge Driver\r\n//\tstatic String oracleJDBCConnStr           = \"jdbc:odbc:OracleDSPRJ\";\t\t// OracleDSPRJ is the name of the ODBC connection defined locally\r\n    static String oracleUserID                = \"prj\";\r\n    static String oraclePassword              = \"prj\";\r\n    \r\n    static Properties oracleConnectionProperties = new java.util.Properties();\r\n\r\n\tstatic {\r\n\r\n\t\toracleConnectionProperties.put(\"user\", oracleUserID);\r\n\t\toracleConnectionProperties.put(\"password\", oraclePassword);\r\n\r\n\t}\r\n    \r\n    private static Connection getDefaultConnection() throws SQLException {\r\n\r\n\t\treturn DriverManager.getConnection(defaultJDBCConnStr);\r\n\r\n    }\r\n\r\n    private static Connection getImpalaConnection() throws SQLException, ClassNotFoundException {\r\n\r\n\t\tClass.forName(impalaJDBCDriverClassName);\r\n\t\treturn DriverManager.getConnection(impalaJDBCConnStr);\r\n\r\n    }\r\n\r\n    private static Connection getOracleConnection() throws SQLException, ClassNotFoundException {\r\n\r\n\t\tClass.forName(oracleJDBCDriverClassName);\r\n\t\treturn DriverManager.getConnection(oracleJDBCConnStr, oracleConnectionProperties);\r\n\r\n    }\r\n\r\n    public static ResultSet Q2Tdefault(String sqlQry) throws SQLException {\r\n\r\n\t\treturn getDefaultConnection().prepareStatement(sqlQry).executeQuery();\r\n\r\n\t}\r\n\r\n\tpublic static ResultSet Q2Timpala(String sqlQry) throws SQLException, ClassNotFoundException {\r\n\r\n\t\treturn getImpalaConnection().prepareStatement(sqlQry).executeQuery();\r\n\r\n\t}\r\n\r\n\tpublic static ResultSet Q2Toracle(String sqlQry) throws SQLException, ClassNotFoundException {\r\n\r\n\t\treturn getOracleConnection().prepareStatement(sqlQry).executeQuery();\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\n\r\n\t\r\n\tpublic static void main(String[] args) throws SQLException,\r\n\t\t\tClassNotFoundException {\r\n\r\n\r\n\t\t// log4j - Set up a simple configuration that logs on the console.\r\n\t\tBasicConfigurator.configure();\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n---- CLASS THAT I RUN (FROM ECLIPSE) TO TEST ------\r\n\r\npackage apollo.bi.derby;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Properties;\r\n\r\npublic class ClientServices {\r\n\r\n\r\n\t// Config\r\n\r\n\tstatic String derbyJDBCConnStr           = \"jdbc:derby://localhost:1528/D:/ApolloBI/apollobi/derby/apollobi\";\r\n    static String derbyUserID                = \"apollobi\";\r\n    static String derbyPassword              = \"apollobi\";\r\n\r\n    static Properties derbyConnectionProperties  = new java.util.Properties();\r\n\r\n\tstatic {\r\n\r\n\t\tderbyConnectionProperties.put(\"user\", derbyUserID);\r\n\t\tderbyConnectionProperties.put(\"password\", derbyPassword);\r\n\r\n\t}\r\n\r\n    private static Connection getDerbyConnection() throws SQLException {\r\n\r\n\t\treturn DriverManager.getConnection(derbyJDBCConnStr, derbyConnectionProperties);\r\n\r\n    }\r\n\r\n\t// util\r\n\r\n\tpublic static String rsToHtml(ResultSet rs) throws SQLException{\r\n\r\n\t\tStringBuffer sb = new StringBuffer();\r\n\r\n\t\tint colCount = rs.getMetaData().getColumnCount();\r\n\r\n\t\tsb.append(\"<table>\");\r\n\t\t\r\n\t\twhile(rs.next()) {\r\n\t\t\t\r\n\t\t\tsb.append(\"<tr>\");\r\n\t        for (int i=1; i<=colCount; i++) {\r\n\t        \tsb.append(\"<td>\").append(rs.getObject(i).toString()).append(\"</td>\");\r\n\t        }\r\n\t\t\tsb.append(\"</tr>\");\r\n\r\n\t\t}\r\n\r\n\t\tsb.append(\"</table>\");\r\n\r\n\t\treturn sb.toString();\r\n\r\n\t}\r\n\r\n\r\n\tpublic static String displayRs(ResultSet rs) throws SQLException{\r\n\r\n\t\tStringBuffer sb = new StringBuffer();\r\n\r\n\t\tint colCount = rs.getMetaData().getColumnCount();\r\n\r\n\t\tsb.append(\"<table>\\n\");\r\n\t\t\r\n\t\twhile(rs.next()) {\r\n\t\t\t\r\n\t\t\tsb.append(\"<tr>\");\r\n\t        for (int i=1; i<=colCount; i++) {\r\n\t        \tsb.append(\"<td>\").append(rs.getObject(i).toString()).append(\"</td>\");\r\n\t        }\r\n\t\t\tsb.append(\"</tr>\\n\");\r\n\r\n\t\t}\r\n\r\n\t\tsb.append(\"</table>\\n\");\r\n\r\n\t\treturn sb.toString();\r\n\r\n\t}\r\n\r\n\t//\tpublic static String qryToHtml(String qryStr) throws SQLException{\r\n\t\r\n//\t\treturn rsToHtml(readDerby(qryStr));\r\n\t\r\n//\t}\r\n\r\n\t\r\n\t/**\r\n\t * @param args\r\n\t * @throws SQLException \r\n\t */\r\n\tpublic static void main(String[] args) throws SQLException {\r\n\r\n\t\tSystem.out.println(\"Establishing a connection ....\");\r\n\t\tConnection conn = getDerbyConnection();\r\n\t\tSystem.out.println(\"Connected.\");\r\n\t\t\r\n\t\t\r\n\t\t\r\n//\t\tResultSet rs = conn.prepareStatement(\"select * from table (Q2Toracle('with datum as (select employeeid, firstname, lastname from employeetable where rownum <= 100) select d1.* from datum d1, datum d2')) t1 join table (Q2Toracle('select employeeid, firstname, lastname from employeetable')) t2 on t2.employeeid = t1.employeeid\").executeQuery();\r\n\t\tResultSet rs = conn.prepareStatement(\"select * from table (Q2Toracle('select employeeid, firstname, lastname from employeetable')) t1\").executeQuery();\r\n//\t\tResultSet rs = conn.prepareStatement(\"select * from oracledataset\").executeQuery();\r\n\r\n\t\tSystem.out.println(displayRs(rs));\r\n\t\t\r\n//\t\tCallableStatement cs = conn.prepareCall(\"create table \");\r\n//\t\tcs.execute();\r\n\t\t\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n-------------- ERROR I GET -------------------\r\n\r\nEstablishing a connection ....\r\nConnected.\r\nException in thread \"main\" java.sql.SQLTransactionRollbackException: The exception 'java.lang.ArrayIndexOutOfBoundsException: -1' was thrown while evaluating an expression.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQuery(Unknown Source)\r\n\tat apollo.bi.derby.ClientServices.main(ClientServices.java:104)\r\nCaused by: org.apache.derby.client.am.SqlException: The exception 'java.lang.ArrayIndexOutOfBoundsException: -1' was thrown while evaluating an expression.\r\n\tat org.apache.derby.client.am.Statement.completeSqlca(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.completeOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseOpenQueryFailure(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseOPNQRYreply(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.StatementReply.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.net.NetStatement.readOpenQuery_(Unknown Source)\r\n\tat org.apache.derby.client.am.Statement.readOpenQuery(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.flowExecute(Unknown Source)\r\n\tat org.apache.derby.client.am.PreparedStatement.executeQueryX(Unknown Source)\r\n\t... 2 more\r\nCaused by: org.apache.derby.client.am.SqlException: Java exception: '-1: java.lang.ArrayIndexOutOfBoundsException'.\r\n\t... 12 more\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12729793","self":"https://issues.apache.org/jira/rest/api/2/issue/12729793","key":"DERBY-6677","fields":{"summary":"Correct Reference Manual RENAME TABLE topic to remove foreign key prohibition","description":"It is valid to rename a table referenced by a foreign key, though Derby has not allowed it. DERBY-6672 has been filed to remove the restriction that prevents this renaming. The RENAME TABLE statement needs to reflect this change."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12729766","self":"https://issues.apache.org/jira/rest/api/2/issue/12729766","key":"DERBY-6676","fields":{"summary":"dblook warning printed on std err during nightly test runs","description":"I see the following error printed to stderr during the nightly tests (nn):\r\n\r\n{noformat}\r\nstderr\r\n\r\n-- Note: At least one unexpected error/warning message was\r\n-- encountered during DDL generation.  See dblook.log\r\n-- to review the message(s).\r\n{noformat}\r\n"}}]}
{"expand":"schema,names","startAt":200,"maxResults":100,"total":6867,"issues":[{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12729747","self":"https://issues.apache.org/jira/rest/api/2/issue/12729747","key":"DERBY-6675","fields":{"summary":"testLeak running into java.lang.OutOfMemoryError","description":"testLeak failed on 10.9 codeline(revision 1611843). Details can be found at\r\nhttp://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm15/1611843-derbyall_diff.txt\r\n\r\ntestLeak(org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test)junit.framework.AssertionFailedError: Process failed:Spawned DERBY-5730 exitCode=1\r\nSTDERR:\r\nJVMDUMP006I Processing dump event \"systhrow\", detail \"java/lang/OutOfMemoryError\" - please wait.\r\nJVMDUMP032I JVM requested Snap dump using 'C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\Snap.20140718.224502.2880.0001.trc' in response to an event\r\nJVMDUMP010I Snap dump written to C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\Snap.20140718.224502.2880.0001.trc\r\nJVMDUMP032I JVM requested Heap dump using 'C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\heapdump.20140718.224502.2880.0002.phd' in response to an event\r\nJVMDUMP010I Heap dump written to C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\heapdump.20140718.224502.2880.0002.phd\r\nJVMDUMP032I JVM requested Java dump using 'C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\javacore.20140718.224502.2880.0003.txt' in response to an event\r\nJVMDUMP010I Java dump written to C:\\jartest\\JarResults.2014-07-18\\ibm15_suites.All\\javacore.20140718.224502.2880.0003.txt\r\nJVMDUMP013I Processed dump event \"systhrow\", detail \"java/lang/OutOfMemoryError\".\r\nException in thread \"main\" java.sql.SQLException: Java exception: ': java.lang.OutOfMemoryError'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetCols(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getColumns(Unknown Source)\r\n\tat org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test.growDatabaseFootprint(Derby5730Test.java:163)\r\n\tat org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test.main(Derby5730Test.java:118)\r\nCaused by: java.lang.OutOfMemoryError\r\n\tat org.apache.derby.iapi.types.SQLVarchar.cloneValue(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicSortObserver.getClone(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicSortObserver.insertNonDuplicateKey(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.sort.SortBuffer.insert(Unknown Source)\r\n\tat org.apache.derby.impl.store.access.sort.MergeInserter.insert(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.loadSorter(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.SortResultSet.openCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(Unknown Source)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(Unknown Source)\r\n\t... 7 more\r\n\r\nSTDOUT:\r\nVALUES ACOS(?)\r\nVALUES ASIN(?)\r\nVALUES ATAN(?)\r\nVALUES ATAN2(?,?)\r\nVALUES COS(?)\r\nVALUES SIN(?)\r\nVALUES TAN(?)\r\nVALUES PI()\r\nVALUES DEGREES(?)\r\nVALUES RADIANS(?)\r\nVALUES LN(?)\r\nVALUES LOG(?)\r\nVALUES LOG10(?)\r\nVALUES EXP(?)\r\nVALUES CEIL(?)\r\nVALUES CEILING(?)\r\nVALUES FLOOR(?)\r\nVALUES SIGN(?)\r\nVALUES RANDOM()\r\nVALUES RAND(?)\r\n\r\n\tat org.apache.derbyTesting.functionTests.tests.memory.Derby5730Test.testLeak(Derby5730Test.java:66)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:113)\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12729178","self":"https://issues.apache.org/jira/rest/api/2/issue/12729178","key":"DERBY-6674","fields":{"summary":"Cleanup brittle code in ValidateCheckConstraintResultSet","description":"The getNextRowCore() method of ValidateCheckConstraintResultSet is an almost exact cut-and-paste copy of the method it overrides in its superclass. This code should be re-factored to reduce the cut-and-paste brittleness. This was discovered while investigating DERBY-6665."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12728522","self":"https://issues.apache.org/jira/rest/api/2/issue/12728522","key":"DERBY-6673","fields":{"summary":"Access denied in ImportExportTest.testWithCodeset","description":"The following error turned up in the nightly tests on 2014-07-18 on Windows_amd64_jdk8 (http://download.java.net/javadesktop/derby/request_5593934/):\r\n\r\n{noformat}\r\n    java.sql.SQLTransactionRollbackException: An IOException occurred while writing data to the file.\r\n\tat org.apache.derby.client.am.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.client.am.SqlException.getSQLException(SqlException.java:321)\r\n\tat org.apache.derby.client.am.ClientPreparedStatement.execute(ClientPreparedStatement.java:1614)\r\n\tat org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doExportToFile(ImportExportTest.java:364)\r\n\tat org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doExport(ImportExportTest.java:344)\r\n\tat org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doImportAndExport(ImportExportTest.java:332)\r\n\tat org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testWithCodeset(ImportExportTest.java:144)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XIE0I: An IOException occurred while writing data to the file.\r\n\tat org.apache.derby.client.am.ClientStatement.completeExecute(ClientStatement.java:1861)\r\n\tat org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(NetStatementReply.java:323)\r\n\tat org.apache.derby.client.net.NetStatementReply.readExecuteCall(NetStatementReply.java:107)\r\n\tat org.apache.derby.client.net.StatementReply.readExecuteCall(StatementReply.java:84)\r\n\tat org.apache.derby.client.net.NetStatement.readExecuteCall_(NetStatement.java:193)\r\n\tat org.apache.derby.client.am.ClientStatement.readExecuteCall(ClientStatement.java:1824)\r\n\tat org.apache.derby.client.am.ClientPreparedStatement.flowExecute(ClientPreparedStatement.java:2175)\r\n\tat org.apache.derby.client.am.ClientPreparedStatement.executeX(ClientPreparedStatement.java:1620)\r\n\tat org.apache.derby.client.am.ClientPreparedStatement.execute(ClientPreparedStatement.java:1605)\r\nCaused by: ERROR XJ001: Java exception: 'extinout\\T1.dat (Access is denied): java.io.FileNotFoundException'.\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12728432","self":"https://issues.apache.org/jira/rest/api/2/issue/12728432","key":"DERBY-6672","fields":{"summary":"Allow Derby to rename tables referenced by foreign keys","description":"Hi, I'm on the Apache Roller team and we use database migration scripts to update databases between Roller releases.  (We have a common template (http://svn.apache.org/viewvc/roller/trunk/app/src/main/resources/sql/500-to-510-migration.vm?view=co)  that is run through Velocity to create specific scripts for the several databases that we support.)  One handicap with Derby that we're not seeing with other databases is its inability to rename tables that have FK's on them.  Renaming one of our tables returns this error from Derby:\r\n\r\nrename table website to weblog;\r\n\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WP_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 30000\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WE_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'WC_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'FO_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'MF_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'NF_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\nError: Operation 'RENAME' cannot be performed on object 'SQL140718163851800' because CONSTRAINT 'AP_WEBSITEID_FK' is dependent on that object.\r\nSQLState:  X0Y25\r\nErrorCode: 99999\r\n\r\nThis results in the migration scripts needing to be messy, first dropping all constraints before recreating them, for the one RDBMS that requires it.  It would be great if a future release of Derby could be coded to support table renames regardless of the constraints defined on it.  Thanks!\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12728141","self":"https://issues.apache.org/jira/rest/api/2/issue/12728141","key":"DERBY-6671","fields":{"summary":"ERROR XSLA7: Cannot redo operation null in the log.","description":"----------------------------------------------------------------\r\nFri Jul 18 10:17:46 EEST 2014:\r\nBooting Derby version The Apache Software Foundation - Apache Derby - 10.7.1.1 - (1040133): instance a816c00e-0147-4855-756b-00001d4e3260 \r\non database directory /opt/CLS/re_app/RE/fm/acq/db/frauddbfiles  with class loader sun.misc.Launcher$AppClassLoader@3182f0db \r\nLoaded from file:/opt/CLS/re_app/RE/fm/acq/lib/derby.jar\r\njava.vendor=Sun Microsystems Inc.\r\njava.runtime.version=1.6.0_45-b06\r\nWARNING: The database is booted with derby.system.durability=test. In this mode, it is possible that database may not be able to recover, committed transactions may be lost, database may be in an inconsistent state. Please use this mode only when these consequences are acceptable  \r\n\r\nWARNING: The database was at least at one time booted with derby.system.durability=test. As a result of this mode being used, it is possible that the database may not be able to recover, committed transactions may be lost, and the database may be in an inconsistent state. This may cause unexpected errors.\r\n\r\nWARNING: The database was either previously booted or is currently booted with derby.system.durability set to test. Note that this mode derby.system.durability=test does not guarantee recoverability, and is probably what might have caused this boot error.\r\n\r\n\r\n------------  BEGIN SHUTDOWN ERROR STACK -------------\r\n\r\nERROR XSLA7: Cannot redo operation null in the log.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\nCaused by: ERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        ... 33 more\r\n============= begin nested exception, level (1) ===========\r\nERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\n============= end nested exception, level (1) ===========\r\n\r\n\r\n------------  END SHUTDOWN ERROR STACK -------------\r\n\r\n----------------------------------------------------------------\r\nFri Jul 18 10:17:46 EEST 2014:\r\nShutting down instance a816c00e-0147-4855-756b-00001d4e3260 on database directory /opt/CLS/re_app/RE/fm/acq/db/frauddbfiles with class loader sun.misc.Launcher$AppClassLoader@3182f0db \r\nFri Jul 18 10:17:46 EEST 2014 Thread[main,5,main] Cleanup action starting\r\njava.sql.SQLException: Failed to start database 'db/frauddbfiles' with class loader sun.misc.Launcher$AppClassLoader@3182f0db, see the next exception for details.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.newEmbedSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\nCaused by: java.sql.SQLException: Failed to start database 'db/frauddbfiles' with class loader sun.misc.Launcher$AppClassLoader@3182f0db, see the next exception for details.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 15 more\r\nCaused by: java.sql.SQLException: Container was opened in read-only mode.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        ... 12 more\r\nCaused by: ERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        ... 12 more\r\n============= begin nested exception, level (1) ===========\r\njava.sql.SQLTransactionRollbackException: Container was opened in read-only mode.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\nCaused by: java.sql.SQLException: Container was opened in read-only mode.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        ... 14 more\r\nCaused by: ERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        ... 12 more\r\n============= end nested exception, level (1) ===========\r\n============= begin nested exception, level (2) ===========\r\njava.sql.SQLException: Container was opened in read-only mode.\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.Util.generateCsSQLException(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\nCaused by: ERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        ... 12 more\r\n============= end nested exception, level (2) ===========\r\n============= begin nested exception, level (3) ===========\r\nERROR 40XD1: Container was opened in read-only mode.\r\n        at org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.FileLogger.redo(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.log.LogToFile.recover(Unknown Source)\r\n        at org.apache.derby.impl.store.raw.RawStore.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.store.access.RAMAccessManager.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startModule(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.bootStore(Unknown Source)\r\n        at org.apache.derby.impl.db.BasicDatabase.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.boot(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.TopService.bootModule(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.bootService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(Unknown Source)\r\n        at org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection30.<init>(Unknown Source)\r\n        at org.apache.derby.impl.jdbc.EmbedConnection40.<init>(Unknown Source)\r\n        at org.apache.derby.jdbc.Driver40.getNewEmbedConnection(Unknown Source)\r\n        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)\r\n        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:582)\r\n        at java.sql.DriverManager.getConnection(DriverManager.java:207)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.connectToDb(DerbyDBEngine.java:85)\r\n        at lv.fd.marats.fraudconsole.derbydb.DerbyDBEngine.loadDb(DerbyDBEngine.java:141)\r\n        at lv.fd.marats.fraudconsole.fieldlog.FieldLogMultiServer.main(FieldLogMultiServer.java:90)\r\n============= end nested exception, level (3) ===========\r\nCleanup action completed"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727966","self":"https://issues.apache.org/jira/rest/api/2/issue/12727966","key":"DERBY-6670","fields":{"summary":"Rollback to savepoint allows violation of deferrable constraints","description":"The bug is illustrated by the following code snippet:\r\n\r\n{code}\r\n        Connection c = DriverManager.getConnection(\"jdbc:derby:memory:db;create=true\");\r\n        c.setAutoCommit(false);\r\n        Statement s = c.createStatement();\r\n        s.execute(\"create table t1(x int primary key initially deferred)\");\r\n        s.execute(\"insert into t1 values 1,1,1,1\");\r\n\r\n        Savepoint sp = c.setSavepoint();\r\n        s.execute(\"drop table t1\");\r\n        c.rollback(sp);\r\n\r\n        // Since there are four identical rows in T1, this call should have\r\n        // failed because the primary key was violated.\r\n        c.commit();\r\n\r\n        // Instead, it succeeds, and all four rows are committed, as can\r\n        // be seen here:\r\n        ResultSet rs = s.executeQuery(\"select * from t1\");\r\n        while (rs.next()) {\r\n            System.out.println(rs.getInt(1));\r\n        }\r\n\r\n        // Insert yet another row, so that we have five identical rows ...\r\n        s.execute(\"insert into t1 values 1\");\r\n        // ... and now commit complains ...\r\n        c.commit();\r\n{code}\r\n\r\nWith auto-commit off, add duplicates into a deferred primary key. Then set a savepoint, drop the table, and roll back to the savepoint.\r\n\r\nApparently, when you drop the table, information about any constraint violations seen on that table is lost, and that information is not restored when the drop table operation is undone by the rollback to savepoint.\r\n\r\nSo when you commit the transaction after having rolled back the drop operation, no deferred checking of constraints happens, and the duplicates you have inserted are committed."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727905","self":"https://issues.apache.org/jira/rest/api/2/issue/12727905","key":"DERBY-6669","fields":{"summary":"Transactional integrity not maintained properly in multi-threaded system","description":"The Apache ManifoldCF project uses Derby for testing and small deployments.  We're seeing a situation where transactional integrity is compromised.  Please refer to CONNECTORS-998 for complete details, as well as a test case you can run to reproduce the problem.\r\n\r\nI am happy to run the failing example on the same hardware I used to generate the log, if that would be helpful."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727754","self":"https://issues.apache.org/jira/rest/api/2/issue/12727754","key":"DERBY-6668","fields":{"summary":"Truncating a table may silently violate a deferred foreign key.","description":"If you truncate a table which is referenced by a deferred foreign key, orphaned tuples are left in the foreign table. That is, the foreign key is violated but no exception is raised.\r\n\r\nSince table truncation involves changing conglomerate ids, this may be another case of derby-6665. Or this may be a new bug.\r\n\r\nThe following script shows this behavior:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\ncreate table tunique\r\n(\r\n  a int not null unique\r\n);\r\n\r\ncreate table tref\r\n(\r\n  a int references tunique( a ) initially deferred\r\n);\r\n\r\ninsert into tunique values ( 1 );\r\ninsert into tref values ( 1 );\r\n\r\ntruncate table tunique;\r\n\r\n-- the unique table is empty\r\nselect * from tunique;\r\n\r\n-- but the table which references it has a row\r\nselect * from tref;\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727656","self":"https://issues.apache.org/jira/rest/api/2/issue/12727656","key":"DERBY-6667","fields":{"summary":"Redundant word \"referencing\" in error message for deferred constraints.","description":"There is an extra \"referencing\" in the error message when committing a violated deferred foreign key.\r\n\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table tprim\r\n(\r\n  a int primary key\r\n);\r\n0 rows inserted/updated/deleted\r\nij> create table tref\r\n(\r\n  a int,\r\n  constraint tref foreign key( a ) references tprim( a ) initially deferred\r\n);\r\n0 rows inserted/updated/deleted\r\nij> insert into tprim values ( 1 );\r\n1 row inserted/updated/deleted\r\nij> autocommit off;\r\nij> insert into tref values ( 1 );\r\n1 row inserted/updated/deleted\r\nij> delete from tprim;\r\n1 row inserted/updated/deleted\r\nij> commit;\r\nERROR 23516: The transaction was aborted because of a deferred constraint violation: Foreign key 'TREF' defined on \"APP\".\"TPRIM\" referencing referencing constraint 'SQL140716063201410' defined on \"APP\".\"TPRIM\", key '(1)'.\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727634","self":"https://issues.apache.org/jira/rest/api/2/issue/12727634","key":"DERBY-6666","fields":{"summary":"Deferred constraint validation fails with \"dead statement\" when query plan logging is enabled","description":"Run the following script with the {{derby.language.logQueryPlan}} system property set to {{true}}:\r\n\r\n{code:sql}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\ncreate table t1(x int primary key);\r\ncreate table t2(y int, constraint c check(y > 0) initially deferred, constraint fk foreign key(y) references t1 initially deferred);\r\nautocommit off;\r\ninsert into t1 values -1, 1;\r\ninsert into t2 values 1;\r\nupdate t2 set y = -1;\r\ndelete from t1 where x = -1;\r\ncommit;\r\n{code}\r\n\r\nThe commit statement will fail with the following error message: \"ERROR 40XC0: Dead statement. This may be caused by catching a transaction severity error inside this statement.\"\r\n\r\nIf you run the script without setting the {{derby.language.logQueryPlan}} system property, it will fail (correctly) with this error message: \"ERROR 23514: The transaction was aborted because of a deferred constraint violation: Check constraint identified by 'C' defined on \"APP\".\"T2\" as '(y > 0)'.\""}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727497","self":"https://issues.apache.org/jira/rest/api/2/issue/12727497","key":"DERBY-6665","fields":{"summary":"Violation of deferred constraints not detected when conglomerates are erroneously shared","description":"See the following script:\r\n\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t1(x int primary key);\r\n0 rows inserted/updated/deleted\r\nij> create table t2(x int primary key);\r\n0 rows inserted/updated/deleted\r\nij> create table t3(x int, constraint fk1 foreign key (x) references t1 initially deferred, constraint fk2 foreign key (x) references t2 initially deferred);\r\n0 rows inserted/updated/deleted\r\nij> insert into t1 values 1;\r\n1 row inserted/updated/deleted\r\nij> autocommit off;\r\nij> insert into t3 values 1;\r\n1 row inserted/updated/deleted\r\nij> insert into t2 values 1;\r\n1 row inserted/updated/deleted\r\nij> delete from t1;\r\n1 row inserted/updated/deleted\r\nij> commit;\r\nij> select * from t1;\r\nX          \r\n-----------\r\n\r\n0 rows selected\r\nij> select * from t2;\r\nX          \r\n-----------\r\n1          \r\n\r\n1 row selected\r\nij> select * from t3;\r\nX          \r\n-----------\r\n1          \r\n\r\n1 row selected\r\n{noformat}\r\n\r\nSince T3.X contains a value (1) that is not present in T1, the foreign key FK1 is violated, and the COMMIT statement should have failed."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727343","self":"https://issues.apache.org/jira/rest/api/2/issue/12727343","key":"DERBY-6664","fields":{"summary":"Schema 'null' does not exist when trigger inserts into table with deferred foreign key","description":"If you modify the repro attached to DERBY-6663 so that the foreign key constraint TREF is INITIALLY DEFERRED, the final insert statement will fail like this:\r\n\r\n{noformat}\r\nij> insert into othertable values 1;\r\nERROR 42Y07: Schema 'null' does not exist\r\n{noformat}\r\n\r\nI think the fix will be similar to DERBY-6663. FKInfo needs to store its schemaName field."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727149","self":"https://issues.apache.org/jira/rest/api/2/issue/12727149","key":"DERBY-6663","fields":{"summary":"NPE when a trigger tries to insert into a table with a foreign key","description":"The following script shows this problem. This is a regression. It does not occur on 10.10.1.1 or 10.10.2.0:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\ncreate table tprim1\r\n(\r\n    keyCol  int not null,\r\n    constraint tprim1 primary key( keyCol )\r\n);\r\n\r\ncreate table tref\r\n(\r\n    refCol  int,\r\n    constraint tref foreign key( refCol ) references tprim1( keyCol )\r\n);\r\n\r\ncreate table othertable( a int );\r\n\r\ncreate trigger inserttrig after insert on othertable\r\nreferencing new as new\r\nfor each row\r\n  insert into tref values ( new.a );\r\n\r\n-- causes an NPE\r\ninsert into othertable values ( 1 );\r\n{noformat}\r\n\r\nHere is the stack trace:\r\n\r\n{noformat}\r\nMon Jul 14 12:12:34 PDT 2014 Thread[main,5,main] (XID = 197), (SESSIONID = 1), (DATABASE = memory:db), (DRDAID = null), Failed Statement is: insert into \"APP\".\"TREF\" values ( CAST (org.apache.derby.iapi.db.Factory::getTriggerExecutionContext().getNewRow().getObject(1) AS INTEGER)  )\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)\r\n\tat org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)\r\n\tat org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\nCleanup action completed\r\nMon Jul 14 12:12:34 PDT 2014 Thread[main,5,main] \r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\njava.sql.SQLException: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\nCaused by: ERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\n\t... 18 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)\r\n\tat org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)\r\n\tat org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\t... 10 more\r\n============= begin nested exception, level (1) ===========\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)\r\n\tat org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)\r\n\tat org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\t... 10 more\r\n============= end nested exception, level (1) ===========\r\n============= begin nested exception, level (2) ===========\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ForeignKeyRIChecker.java:111)\r\n\tat org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(RISetChecker.java:161)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1088)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeSubStatement(GenericPreparedStatement.java:336)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:216)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)\r\n\tat org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(InsertResultSet.java:1278)\r\n\tat org.apache.derby.impl.sql.execute.InsertResultSet.open(InsertResultSet.java:504)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:529)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:371)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:247)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\n{noformat}\r\n\r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727143","self":"https://issues.apache.org/jira/rest/api/2/issue/12727143","key":"DERBY-6662","fields":{"summary":"DatabaseMetaData.usesLocalFiles() returns true for in-memory databases","description":"DatabaseMetaData.usesLocalFiles() returns true for in-memory databases. And it also returns true for DatabaseMetaData.usesLocalFilePerTable(). The following script shows this:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\ncall syscs_util.syscs_register_tool( 'databaseMetaData', true );\r\n\r\nvalues usesLocalFiles();\r\n\r\nvalues usesLocalFilePerTable();\r\n{noformat}\r\n\r\nI think that these methods should return false because an in-memory database does not store tables in files."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727140","self":"https://issues.apache.org/jira/rest/api/2/issue/12727140","key":"DERBY-6661","fields":{"summary":"dblook does not recognize the deferrability of deferrable constraints","description":"If you create a table with a deferrable primary key constraint and then run dblook, the recreation ddl does not flag the primary key as deferrable. I suspect that this applies to other kinds of constraints as well."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12727074","self":"https://issues.apache.org/jira/rest/api/2/issue/12727074","key":"DERBY-6660","fields":{"summary":"ResultSet assertion methods fail in upgrade tests","description":"If a ResultSet assertion method (such as JDBC.assertFullResultSet()) fails, it now attempts to add the entire ResultSet to the error message. This code uses the ResultSet.isClosed() method, which was added in JDBC 4.0. If this code runs on an older version of Derby that doesn't support JDBC 4.0, it fails with an AbstractMethodError because the isClosed() method doesn't exist. This could happen in the upgrade tests.\r\n\r\nSee for example this stack trace from a failing test run ([http://download.java.net/javadesktop/derby/request_5593747/javadb-task-3900531.html]):\r\n\r\n{noformat}\r\njava.lang.AbstractMethodError: org.apache.derby.impl.jdbc.EmbedResultSet20.isClosed()Z\r\n\tat org.apache.derbyTesting.junit.JDBC.addRsToReport(JDBC.java:1832)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1151)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1048)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1005)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:963)\r\n\tat org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testTriggerInternalVTI(Changes10_2.java:157)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n(...)\r\n{noformat}\r\n\r\nThe AbstractMethodError shadows the original error."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726842","self":"https://issues.apache.org/jira/rest/api/2/issue/12726842","key":"DERBY-6659","fields":{"summary":"The Reference Guide should state how long a SET CONSTRAINTS command is good for","description":"A SET CONSTRAINTS command changes the state of a constraint only until the transaction ends (or another, overriding SET CONSTRAINTS command is issued). Once the transaction ends, the constraint reverts to the default behavior declared for it at CREATE/ALTER TABLE time. However, this behavior is not clear from the reference material on SET CONSTRAINTS: https://builds.apache.org/job/Derby-docs/lastSuccessfulBuild/artifact/trunk/out/ref/rrefsqljsetconstr.html\r\n\r\nThe following script shows this behavior:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true' as conn1;\r\n\r\nautocommit off;\r\n\r\ncreate table tprim\r\n(\r\n    keyCol  int primary key\r\n);\r\ncreate table tref\r\n(\r\n    refCol  int,\r\n    constraint refcon foreign key( refCol ) references tprim( keyCol ) deferrable\r\n);\r\ninsert into tprim( keyCol ) values ( 1 ), ( 2 ), ( 3 );\r\ncommit;\r\n\r\nset constraints refcon deferred;\r\n\r\n-- succeeds because we switched to deferred mode for this transaction\r\ninsert into tref( refCol ) values ( 4 );\r\nrollback;\r\n\r\n-- but fails the second time because the end of the previous transaction\r\n-- reverted the refcon constraint to its default (immediate) mode\r\ninsert into tref( refCol ) values ( 4 );\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726784","self":"https://issues.apache.org/jira/rest/api/2/issue/12726784","key":"DERBY-6658","fields":{"summary":"Update list of tested Lucene versions","description":"The \"Using the luceneSupport optional tool\" topic in the tools and utilities guide lists the Lucene versions that the luceneSupport tool has been tested against. DERBY-6650 added support for newer versions of Lucene. I've tested that the LuceneSuite test suite now passes on Lucene 4.8.1 and 4.9.0 in addition to the versions already listed there."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726574","self":"https://issues.apache.org/jira/rest/api/2/issue/12726574","key":"DERBY-6657","fields":{"summary":"Need to document the fact that views can't be the source data sets of MERGE statements","description":"The work on DERBY-6652 now prevents views from being used as the source data sets of MERGE statements. We should adjust the Reference Guide section on the MERGE statement accordingly. This statement in rrefsqljmerge.dita:\r\n\r\n\"sourceTable must identify a base table, a view, or a table function, and it may not be a synonym\"\r\n\r\nshould be changed to \r\n\r\n\"sourceTable must identify a base table or a table function, and it may not be a synonym\""}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726573","self":"https://issues.apache.org/jira/rest/api/2/issue/12726573","key":"DERBY-6656","fields":{"summary":"Re-enable views as the source data sets of MERGE statements","description":"The SQL Standard allows views as the source data sets of MERGE statements. However, we disabled this feature because of namespace resolution problems (see DERBY-6652). Namespace resolution for the MERGE statement needs to be overhauled. Some of the issues are described on DERBY-3155. When the namespace problems are fixed comprehensively, we may be able to allow the use of synonyms and subqueries and perhaps, also, the use of correlation names for columns."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726439","self":"https://issues.apache.org/jira/rest/api/2/issue/12726439","key":"DERBY-6655","fields":{"summary":"Missing FilePermission makes boot fail with NPE","description":"In experimenting with DERBY-6617, I looked at the \"false\" returned by FileMonitor#PBInitialize, ca line 157 when the code gets a SecurityException when trying to create the derby home directory. This will happen when running with a security manager and the necessary FilePermission has not been granted to derby.jar.\r\n\r\nUnfortunately, this leads to the boot failing with an NPE without explanation of the cause. [The repro patch does dump the reason to the console.]\r\n\r\nSee the repro in the attached patch [^derby-6617-2.diff].\r\nThis is the stack trace seen:\r\n{code}\r\n1) testMissingFilePermission(org.apache.derbyTesting.unitTests.junit.MissingPermissionsTest)java.lang.NullPointerException\r\nat org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)\r\nat java.sql.DriverManager.getConnection(DriverManager.java:664)\r\nat java.sql.DriverManager.getConnection(DriverManager.java:208)\r\nat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:101)\r\nat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:68)\r\nat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:52)\r\nat org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1654)\r\nat org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(BaseJDBCTestCase.java:553)\r\nat org.apache.derbyTesting.unitTests.junit.MissingPermissionsTest.testMissingFilePermission(MissingPermissionsTest.java:178)\r\n{code}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726370","self":"https://issues.apache.org/jira/rest/api/2/issue/12726370","key":"DERBY-6654","fields":{"summary":"Require that generated code live in the org.apache.derby.exe package.","description":"We require that generated code must implement Activation. This helps prevent applications from using Derby's class loaders to load arbitrary classes. We should also require that generated code live in the org.apache.derby.exe package. This will prevent applications from loading  highly privileged code using Derby class loaders."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726324","self":"https://issues.apache.org/jira/rest/api/2/issue/12726324","key":"DERBY-6653","fields":{"summary":"Data type limitations on indexes should be in Reference Manual","description":"The Tuning Guide topic \"Create useful indexes\" (http://db.apache.org/derby/docs/10.10/tuning/ctundepth1002853.html) has the following excessively vague note at the end:\r\n\r\n\"Note: Derby does not support indexing on columns with data types like BLOB, CLOB, and XML.\"\r\n\r\nThe topic also has a cross-reference to the \"CREATE INDEX statement\" topic in the Derby Reference Manual, but that topic says nothing about data type limitations for index columns. \r\n\r\nIn an email exchange, Knut says that LONG VARCHAR and user-defined types should be added to make the list complete, but he also suggests moving this information from the tuning guide to the \"CREATE INDEX statement\" topic in the Reference Manual, since we already reference that topic and since the information needs to be there."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726311","self":"https://issues.apache.org/jira/rest/api/2/issue/12726311","key":"DERBY-6652","fields":{"summary":"Compilation error using a view as the source data set for a MERGE statement","description":"Mamta found the following problem when using a view as the source data set of a MERGE statement:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\nCREATE TABLE employee (\r\nemployee_id int,\r\nfirst_name  VARCHAR(20),\r\nlast_name   VARCHAR(20),\r\ndept_no     int,\r\nsalary      int);\r\n\r\ncreate view v1employee as select * from employee;\r\n\r\nCREATE TABLE bonuses (\r\nemployee_id int, bonus int DEFAULT 100);\r\n\r\ncreate view v2bonuses as select * from bonuses;\r\n\r\n-- compiles without the view\r\nMERGE INTO bonuses B\r\nUSING employee E\r\nON B.employee_id = E.employee_id\r\nWHEN MATCHED AND E.dept_no=20 THEN\r\n  UPDATE SET B.bonus = E.salary * 0.1\r\nWHEN NOT MATCHED AND dept_no=20 THEN\r\n  INSERT (employee_id, bonus)\r\n  VALUES (E.employee_id, E.salary * 0.05);\r\n\r\n-- compilation error with the view\r\nMERGE INTO bonuses B\r\nUSING v1employee E\r\nON B.employee_id = E.employee_id\r\nWHEN MATCHED AND E.dept_no=20 THEN\r\n  UPDATE SET B.bonus = E.salary * 0.1\r\nWHEN NOT MATCHED AND dept_no=20 THEN\r\n  INSERT (employee_id, bonus)\r\n  VALUES (E.employee_id, E.salary * 0.05);\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726060","self":"https://issues.apache.org/jira/rest/api/2/issue/12726060","key":"DERBY-6651","fields":{"summary":"BootLockTest fails on compact profile 2","description":"http://download.java.net/javadesktop/derby/request_5593638/javadb-task-3898689.html\r\n\r\n{noformat}\r\njunit.framework.AssertionFailedError: Minion did not start or boot db in 600 seconds.\r\nexitValue = 1----Process exited. Minion's stderr:\r\n----Minion's stderr ended\r\n\tat org.apache.derbyTesting.functionTests.tests.store.BootLockTest.waitForMinionBoot(BootLockTest.java:239)\r\n\tat org.apache.derbyTesting.functionTests.tests.store.BootLockTest.testBootLock(BootLockTest.java:130)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12726058","self":"https://issues.apache.org/jira/rest/api/2/issue/12726058","key":"DERBY-6650","fields":{"summary":"Lucene tests fail on compact profile 2","description":"http://download.java.net/javadesktop/derby/request_5593638/javadb-task-3898689.html\r\n\r\n{noformat}\r\njava.sql.SQLException: The exception 'java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection' was thrown while evaluating an expression.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:431)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(ConnectionChild.java:82)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1430)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(EmbedPreparedStatement.java:1709)\r\n\tat org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(EmbedCallableStatement.java:134)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeLargeUpdate(EmbedPreparedStatement.java:320)\r\n\tat org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(EmbedPreparedStatement.java:309)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(BaseJDBCTestCase.java:1415)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.LuceneSupportTest.testCreateAndQueryIndex(LuceneSupportTest.java:115)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR 38000: The exception 'java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection' was thrown while evaluating an expression.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\nCaused by: java.lang.NoClassDefFoundError: javax/management/MBeanServerConnection\r\n\tat org.apache.lucene.index.BufferedUpdates.<clinit>(BufferedUpdates.java:53)\r\n\tat org.apache.lucene.index.DocumentsWriterDeleteQueue.<init>(DocumentsWriterDeleteQueue.java:86)\r\n\tat org.apache.lucene.index.DocumentsWriterDeleteQueue.<init>(DocumentsWriterDeleteQueue.java:82)\r\n\tat org.apache.lucene.index.DocumentsWriter.<init>(DocumentsWriter.java:115)\r\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:772)\r\n\tat org.apache.derby.optional.lucene.LuceneSupport$5.run(LuceneSupport.java:1694)\r\n\tat org.apache.derby.optional.lucene.LuceneSupport$5.run(LuceneSupport.java:1689)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat org.apache.derby.optional.lucene.LuceneSupport.getIndexWriter(LuceneSupport.java:1687)\r\n\tat org.apache.derby.optional.lucene.LuceneSupport.createOrRecreateIndex(LuceneSupport.java:514)\r\n\tat org.apache.derby.optional.lucene.LuceneSupport.createIndex(LuceneSupport.java:421)\r\n\tat org.apache.derby.exe.ac7e434f4ax0147x151ex54d2x0000594f050da.g0(Unknown Source)\r\n\tat org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)\r\n\tat org.apache.derby.impl.sql.execute.CallStatementResultSet.open(CallStatementResultSet.java:75)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\nCaused by: java.lang.ClassNotFoundException: javax.management.MBeanServerConnection\r\n\tat java.net.URLClassLoader$1.run(Unknown Source)\r\n\tat java.net.URLClassLoader$1.run(Unknown Source)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)\r\n\tat java.lang.ClassLoader.loadClass(Unknown Source)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12725738","self":"https://issues.apache.org/jira/rest/api/2/issue/12725738","key":"DERBY-6649","fields":{"summary":"Meaningless permissions granted to sysinfo.","description":"The server.policy and template.policy files grant the following meaningless permissions in every block related to sysinfo:\r\n\r\n  permission java.io.FilePermission \"java.runtime.version\", \"read\";\r\n  permission java.io.FilePermission \"java.fullversion\", \"read\";\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12725352","self":"https://issues.apache.org/jira/rest/api/2/issue/12725352","key":"DERBY-6648","fields":{"summary":"Application code should not be able to call ContextService.getContextOrNull()","description":"By calling ContextService.getContextOrNull() (and its relatives), application code can get its hands on all sorts of internal Derby contexts, factories, and managers. This allows application code to bypass SQL authorization checks and perform sensitive or data-corrupting actions.\r\n\r\nFor instance, right now an application can use this method to get its hands on the language connection context. From the lcc, the application can get its hands on the data dictionary and the execution transaction. Armed with those objects, the application can bypass authorization checks and create schema objects, users, and permissions.\r\n\r\nOnly Derby code should be able to call this powerful method."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12725099","self":"https://issues.apache.org/jira/rest/api/2/issue/12725099","key":"DERBY-6647","fields":{"summary":"The ij.driver property is obsolete and need not be documented","description":"The ij.driver property is not useful any more and can be removed from the documentation. According to Rick Hillegas, \"The purpose of the ij.driver property is to tell ij to manually load a driver class via Class.forName().newInstance(). That's the ancient way of loading drivers. The modern way is to rely on driver autoloading.\"\r\n\r\nThe Driver command may still be useful for reloading the driver after the Derby engine has been shut down and the driver deregistered, so that can be kept.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724997","self":"https://issues.apache.org/jira/rest/api/2/issue/12724997","key":"DERBY-6646","fields":{"summary":"Applications can bypass the authorization checks on SYSCS_EXPORT_TABLE and SYSCS_IMPORT_TABLE by calling Export.exportTable() and Import.importTable() directly","description":"By default, only the DBO can call SYSCS_EXPORT_TABLE and SYSCS_IMPORT_TABLE. But applications can bypass these authorization check by calling Export.exportTable() and Import.importTable() directly. \r\n\r\nHere's a repro for the bypassing of SYSCS_EXPORT_TABLE. I think that the repro for SYSCS_IMPORT_TABLE is similar. First compile this class...\r\n\r\n{noformat}\r\nimport java.sql.*;\r\nimport org.apache.derby.impl.load.Export;\r\n\r\npublic class ExportWrapper\r\n{\r\n    public  static  void    export\r\n        (\r\n         String schemaName, \r\n         String tableName, String outputFileName,  \r\n         String columnDelimiter, String characterDelimiter,\r\n         String codeset\r\n         )\r\n        throws Exception\r\n    {\r\n        Connection  conn = DriverManager.getConnection( \"jdbc:default:connection\" );\r\n        \r\n        Export.exportTable\r\n            ( conn, schemaName, tableName, outputFileName, columnDelimiter, characterDelimiter, codeset );\r\n    }\r\n}\r\n{noformat}\r\n\r\n…then run this script:\r\n\r\n{noformat}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\n\r\nconnect 'jdbc:derby:memory:db1;create=true;user=test_dbo';\r\n\r\ncall syscs_util.syscs_create_user( 'TEST_DBO', 'test_dbopassword' );\r\ncall syscs_util.syscs_create_user( 'RUTH', 'ruthpassword' );\r\n\r\n-- shutdown in order to enable NATIVE authentication\r\nconnect 'jdbc:derby:memory:db1;shutdown=true';\r\n\r\nconnect 'jdbc:derby:memory:db1;user=ruth;password=ruthpassword' as ruth;\r\n\r\ncreate table t( a int );\r\ninsert into t( a ) values ( 1 );\r\n\r\ncreate procedure exportWrapper\r\n(\r\n  in schemaname  varchar(128),\r\n  in tablename varchar(128),\r\n  in filename varchar(32672),\r\n  in columndelimiter char(1),\r\n  in characterdelimiter char(1),\r\n  in codeset VARCHAR(128)\r\n)\r\nlanguage java parameter style java reads sql data\r\nexternal name 'ExportWrapper.export';\r\n\r\n-- ruth lacks privilege to export the table\r\ncall syscs_util.syscs_export_table( null, 'T', 'z.dat', null, null, null );\r\n\r\n-- but ruth can bypass authorization checks by directly calling Export.exportTable()\r\n-- inside this procedure\r\ncall exportWrapper( null, 'T', 'z.dat', null, null, null ); \r\n{noformat}\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724987","self":"https://issues.apache.org/jira/rest/api/2/issue/12724987","key":"DERBY-6645","fields":{"summary":"Switch to Maven for building Apache Derby","description":"For a new user building Derby is very hard. It does not follow established Java project structures and requires a lot of prior knowledge. Also the documentation is rather short. Especially running the tests is non-intuitive at the beginning. Thus, I propose that Derby switches to building using Maven and restructures its components in a cleaner way. Testing should be revised to produce reproducible results. This would make development and testing much easier and more user-friendly."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724920","self":"https://issues.apache.org/jira/rest/api/2/issue/12724920","key":"DERBY-6644","fields":{"summary":"Support standard syntax for altering column nullability","description":"Derby supports altering the nullability of a column via an ALTER TABLE statement, but the supported syntax is different from what the SQL:2011 standard defines. We should add support for the standard syntax as well.\r\n\r\nThe standard syntax is\r\n\r\n  ALTER TABLE t ALTER COLUMN c SET NOT NULL\r\n  ALTER TABLE t ALTER COLUMN c DROP NOT NULL"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724715","self":"https://issues.apache.org/jira/rest/api/2/issue/12724715","key":"DERBY-6643","fields":{"summary":"ALTER TABLE columnAlteration syntax needs fixing","description":"Knut Anders Hatlen points out in a comment on DERBY-6609 that the columnAlteration syntax in the ALTER TABLE statement topic is not quite correct. It is possible to set the data type to BLOB or CLOB, in addition to VARCHAR and VARCHAR FOR BIT DATA.\r\n\r\nAlso, for VARCHAR FOR BIT DATA, he notes, \"the length argument is on the wrong spot. It should be columnName SET DATA TYPE VARCHAR ( integer ) FOR BIT DATA,  rather than columnName SET DATA TYPE VARCHAR FOR BIT DATA( integer ).\"\r\n\r\nDERBY-6644 also requires a change to the columnAlteration syntax.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724519","self":"https://issues.apache.org/jira/rest/api/2/issue/12724519","key":"DERBY-6642","fields":{"summary":"Make the JUnit result set assertion methods dump the actual rs when assertion fails","description":"Often, when researching intermittent regression test errors, an assertion on a result set fails, but the error report only shows which column in which row first fails to meet expectations. It would be good if the assertion methods could dump the actual result set in such cases so we'd have more information to go on when trying to understand the cause of the problem.\r\n\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12724162","self":"https://issues.apache.org/jira/rest/api/2/issue/12724162","key":"DERBY-6641","fields":{"summary":"Application code may be able to use the public LogToFile class to interfere with Derby's operation.","description":"With a little work, I think that an application could dig up the LogFactory and cast it to LogToFile. This could give the application elevated privileges to overwrite sensitive Derby-managed data."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723918","self":"https://issues.apache.org/jira/rest/api/2/issue/12723918","key":"DERBY-6640","fields":{"summary":"Can't build javadoc when on my company vpn","description":"I can no longer build the Derby javadoc when I am on my company vpn. The following command works fine when I am not on my company vpn:\r\n\r\n{noformat}\r\nant javadoc\r\n{noformat}\r\n\r\nHowever, I see the following error when I run that command while on my company vpn:\r\n\r\n{noformat}\r\n/Users/rh161140/derby/mainline/trunk/build.xml:1051: The following error occurred while executing this line:\r\n/Users/rh161140/derby/mainline/trunk/build.xml:1079: java.net.ConnectException: Operation timed out\r\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\r\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:345)\r\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\r\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\r\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\r\n\tat java.net.Socket.connect(Socket.java:589)\r\n\tat java.net.Socket.connect(Socket.java:538)\r\n\tat sun.net.NetworkClient.doConnect(NetworkClient.java:180)\r\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:432)\r\n\tat sun.net.www.http.HttpClient.openServer(HttpClient.java:527)\r\n\tat sun.net.www.http.HttpClient.<init>(HttpClient.java:211)\r\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:308)\r\n\tat sun.net.www.http.HttpClient.New(HttpClient.java:326)\r\n\tat sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1167)\r\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1103)\r\n\tat sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:997)\r\n\tat sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:931)\r\n\tat org.apache.tools.ant.taskdefs.Get$GetThread.openConnection(Get.java:660)\r\n\tat org.apache.tools.ant.taskdefs.Get$GetThread.get(Get.java:579)\r\n\tat org.apache.tools.ant.taskdefs.Get$GetThread.run(Get.java:569)\r\n{noformat}\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723693","self":"https://issues.apache.org/jira/rest/api/2/issue/12723693","key":"DERBY-6639","fields":{"summary":"Add tests for SignatureChecker","description":"Fixed a code issue in SignatureChecker I noticed that we have no tests for that tool (as far as I can see). It would be good to add some.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723681","self":"https://issues.apache.org/jira/rest/api/2/issue/12723681","key":"DERBY-6638","fields":{"summary":"Remove unnecessary use of reflection in SignatureChecker","description":"Ca line 377 in SignatureChecker we use reflection to call DatabaseMetaData#getFunctionColumns. This is no longer necessary after we removed support for JDR 169.\r\n\r\n{color:blue}\r\n[Update:] There are more occurrences of reflection that can be removed in this class.\r\n{color}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723434","self":"https://issues.apache.org/jira/rest/api/2/issue/12723434","key":"DERBY-6637","fields":{"summary":"test errors failures in lang.XMLTypeAndOpsTest, XMLBindingTest and XMLConcurrencyTest with ibm jvms","description":"With trunk built at revision 1604994, I see errors and failures like the following:\r\n1) testXMLQuery(org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest)java.sql.SQLException: Encountered error while evaluating XML query expression for XMLQUERY operator: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1075)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLQuery(XMLTypeAndOpsTest.java:1618)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\nCaused by: ERROR 10000: Encountered error while evaluating XML query expression for XMLQUERY operator: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 49 more\r\nCaused by: java.util.MissingResourceException: Could not load any resource bundles.org.apache.xpath.res.XPATHErrorResources\r\n\tat org.apache.xml.res.XMLMessages.loadResourceBundle(XMLMessages.java:189)\r\n\tat org.apache.xpath.res.XPATHMessages.createXPATHMessage(XPATHMessages.java:53)\r\n\tat org.apache.xpath.objects.XObject.error(XObject.java:701)\r\n\tat org.apache.xpath.objects.XObject.nodelist(XObject.java:455)\r\n\tat org.apache.xpath.jaxp.XPathExpressionImpl.getResultAsType(XPathExpressionImpl.java:357)\r\n\tat org.apache.xpath.jaxp.XPathExpressionImpl.eval(XPathExpressionImpl.java:100)\r\n\tat org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:184)\r\n\tat org.apache.derby.iapi.types.SqlXmlUtil.evaluate(Unknown Source)\r\n\tat org.apache.derby.iapi.types.SqlXmlUtil.evalXQExpression(Unknown Source)\r\n\tat org.apache.derby.iapi.types.XML.XMLQuery(Unknown Source)\r\n\tat org.apache.derby.exe.acf63284d8x0146xcb97x285bx000029929fd62.e0(Unknown Source)\r\n\tat org.apache.derby.impl.services.reflect.DirectCall.invoke(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore(Unknown Source)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(Unknown Source)\r\n\t... 41 more\r\n\r\nSee for instance this windows/ibm1.6 result: \r\nhttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1604993-suites.All_diff.txt"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723355","self":"https://issues.apache.org/jira/rest/api/2/issue/12723355","key":"DERBY-6636","fields":{"summary":"The public api of BaseDataFileFactory may allow blackhats to assume elevated privileges.","description":"BaseDataFileFactory has a public constructor and a public boot() method. Arbitrary code running in the JVM may be able to instantiate a BaseDataFileFactory outside of Derby's authentication mechanisms and so acquire the ability to read/update Derby-managed data with the privileges granted to Derby.  Arbitrary code may be able to interfere with the normal operation of Derby and may be able to corrupt data.\r\n\r\nThis is just an observation based on casual code inspection. It may be that there are mechanisms in place which frustrate these attacks. I have not tried to exploit these potential vulnerabilities myself."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723176","self":"https://issues.apache.org/jira/rest/api/2/issue/12723176","key":"DERBY-6635","fields":{"summary":"OptimizerTracer.unloadTool() could be used to write garbage over Derby data files.","description":"I don't see any checks in place to prevent this method from writing its output file into the log or sego directories or even over service.properties. Fortunately, only the DBO can run this procedure by default."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723119","self":"https://issues.apache.org/jira/rest/api/2/issue/12723119","key":"DERBY-6634","fields":{"summary":"Improve test coverage of SqlXmlUtil.java","description":"The test coverage report for SqlXmlUtil indicates that we don't have tests for:\r\n\r\n- recompilation of XML queries used in triggers (the code looks dead, and can probably be removed)\r\n\r\n- serialization of sequences of atomic values returned by an XPath query (as far as I can see, we only support single atomic values and sequences of documents, so probably that's also code that can be removed, possibly replaced by an assert)\r\n\r\n- XMLEXISTS operations where the XPath query returns a scalar (after DERBY-6624, it will take the same code path as a query that returns a non-empty sequence, so it won't show up in the report anymore, but it's still useful to have a test case for it)\r\n\r\n- XMLQUERY operations where the XPath query returns a boolean (after DERBY-6624, the same code path will be taken for all data types, so it won't show up in the report anymore, but it's still useful to have a test case for it)"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12723110","self":"https://issues.apache.org/jira/rest/api/2/issue/12723110","key":"DERBY-6633","fields":{"summary":"Remove DOM level 3 XPath requirement from description of XML operators","description":"After DERBY-6624, it is no longer a requirement to have an implementation of the DOM level 3 XPath specification in order to use the XML operators. The docs should stop mentioning the requirement."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722853","self":"https://issues.apache.org/jira/rest/api/2/issue/12722853","key":"DERBY-6632","fields":{"summary":"Applications may be able to use StorageFactoryService to delete Derby databases and overwrite service.properties.","description":"Various powerful methods in StorageFactoryService are public. I have not verified the following with an experiment, but it appears to me that these methods give any code running in the JVM the ability to elevate privileges to those granted to Derby and do the following:\r\n\r\n1) Delete Derby databases via the following methods:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.monitor.StorageFactoryService createServiceRoot()\r\norg.apache.derby.impl.services.monitor.StorageFactoryService getServiceProperties()\r\norg.apache.derby.impl.services.monitor.StorageFactoryService getStorageFactoryInstance()\r\norg.apache.derby.impl.services.monitor.StorageFactoryService removeServiceRoot()\r\n{noformat}\r\n\r\n2) Overwrite service.properties via overloads of the following method:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.monitor.StorageFactoryService createServiceRoot()\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722814","self":"https://issues.apache.org/jira/rest/api/2/issue/12722814","key":"DERBY-6631","fields":{"summary":"FileMonitor can be used to elevate an application's privileges","description":"Various vulnerabilities in FileMonitor allow applications to perform security-sensitive operations with the elevated privileges granted to Derby:\r\n\r\ngetDaemonThread() - The application can call this method in order to create threads, using Derby's elevated privileges.\r\n\r\ngetJVMProperty() -  The application can call this in order to read system properties using Derby's elevated privileges.\r\n\r\nsetThreadPriority() - The application can call this method to change the priority of a daemon thread it has created. This call will execute with Derby's elevated privileges.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722783","self":"https://issues.apache.org/jira/rest/api/2/issue/12722783","key":"DERBY-6630","fields":{"summary":"Applications can use JCECipherFactory to elevate their privileges to those granted to Derby","description":"JCECipherFactory.run() performs security-sensitive operations. It is executed in a privilege block by the init() method, which is, in turn, executed by the public constructor. The class and its corresponding factory are public, which means that any code running in the same JVM can run this security-sensitive code with the privileges granted to Derby."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722762","self":"https://issues.apache.org/jira/rest/api/2/issue/12722762","key":"DERBY-6629","fields":{"summary":"Restrict privileged operation in CreateXMLFile","description":"The PlanExporter tool has a public method CreateXMLFile.writeTheXMLFile(). This method opens a FileOutputStream in a privileged block. We should change this so that unprivileged code cannot use the method to write files using derbytools.jar's privileges."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722584","self":"https://issues.apache.org/jira/rest/api/2/issue/12722584","key":"DERBY-6628","fields":{"summary":"Intermittent error in TriggerGeneralTest","description":"See in nightly regression test:\r\n\r\nhttp://download.java.net/javadesktop/derby/request_5592869/javadb-task-3886181.html\r\n\r\nwhere the relevant part of stacktrace is as follows:\r\n{code}\r\njunit.framework.AssertionFailedError: Column value mismatch @ column 'TABLENAME', row 3:\r\n    Expected: >T1<\r\n    Found:    >SYSCHECKS<\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.TriggerGeneralTest.testTriggersInGeneral(TriggerGeneralTest.java:874)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n{code }"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722550","self":"https://issues.apache.org/jira/rest/api/2/issue/12722550","key":"DERBY-6627","fields":{"summary":"failure in lang.MergeStatementTest test_052_multiClob; ERROR XSDG1 and ERROR 40XD2:","description":"I saw this during a nightly test run against trunk (at 10.11.0.0 alpha - (1603695)), with the GA version of Oracle's Java 8 (this run's details is not copied to my public_html area):\r\n\r\n1) test_052_multiClob(org.apache.derbyTesting.functionTests.tests.lang.MergeStatementTest$Collated)java.sql.SQLException: The store has been marked for shutdown by an earlier exception.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.commitIfAutoCommit(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.ConnectionChild.commitIfAutoCommit(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.resultSetClosing(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.EmbedResultSet.next(Unknown Source)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1757)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.assertResults(BaseJDBCTestCase.java:1717)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.MergeStatementTest.test_052_multiClob(MergeStatementTest.java:8269)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XSLAA: The store has been marked for shutdown by an earlier exception.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(Unknown Source)\r\n\t... 84 more\r\nCaused by: ERROR XSDG1: Page Page(1,Container(-1, 1403145110371)) could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.CachedPage.writePage(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.CachedPage.clean(Unknown Source)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(Unknown Source)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(Unknown Source)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.RawStore.checkpoint(Unknown Source)\r\n\tat org.apache.derby.impl.store.raw.log.LogToFile.performWork(Unknown Source)\r\n\tat org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(Unknown Source)\r\n\tat org.apache.derby.impl.services.daemon.BasicDaemon.work(Unknown Source)\r\n\tat org.apache.derby.impl.services.daemon.BasicDaemon.run(Unknown Source)\r\n\tat java.lang.Thread.run(Thread.java:744)\r\nCaused by: ERROR 40XD2: Container Container(-1, 1403145110371) cannot be opened; it either has been dropped or does not exist.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(Unknown Source)\r\n\t... 15 more"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722486","self":"https://issues.apache.org/jira/rest/api/2/issue/12722486","key":"DERBY-6626","fields":{"summary":"Check type of user-supplied modules before creating instances","description":"Derby allows users to specify names of classes to use for various pluggable modules.\r\n\r\nIn some cases, it verifies that the class implements the expected interface before it creates an instance of the class. For example in SpecificAuthenticactionServiceImpl:\r\n\r\n{code}\r\n\t\t\tClass sasClass = Class.forName(specificAuthenticationScheme);\r\n\t\t\tif (!UserAuthenticator.class.isAssignableFrom(sasClass)) {\r\n\t\t\t\tthrow StandardException.newException(SQLState.AUTHENTICATION_NOT_IMPLEMENTED,\r\n\t\t\t\t\tspecificAuthenticationScheme, \"org.apache.derby.authentication.UserAuthenticator\");\r\n\t\t\t}\r\n\r\n\t\t\tUserAuthenticator aScheme = (UserAuthenticator) sasClass.newInstance();\r\n{code}\r\n\r\nIn other cases, it creates an instance without checking, and instead fails with a ClassCastException or some other exception when trying to use the instance of the incorrect type. Examples: Java5SystemProcedures SYSCS_REGISTER_TOOL(), JCECipherFactory, SequenceUpdater.makePreallocator().\r\n\r\nI think it would be good to have similar checks in these other cases too. That'll give clearer error messages which explain what the problem is, and it will be safer because it limits which constructors the users can force the Derby engine to invoke."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722472","self":"https://issues.apache.org/jira/rest/api/2/issue/12722472","key":"DERBY-6625","fields":{"summary":"Many permission related test failures on Java 8 compact2","description":"When I try to run tests on Java SE 8 compact profile 2 with head of trunk, I see lots of permission related errors. If I add the flag -Djava.security.policy=<NONE> to disable the security manager, the errors seem to go away.\r\n\r\nFor example, if I try to run lang.XMLBindingTest, I see this error:\r\n\r\n{noformat}\r\n1) XMLBindingTestjava.sql.SQLException: Java exception: 'access denied (\"java.util.PropertyPermission\" \"user.dir\" \"read\"): java.security.AccessControlException'.\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:107)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:133)\r\n\tat org.apache.derby.impl.jdbc.Util.seeNextException(Util.java:255)\r\n\tat org.apache.derby.impl.jdbc.Util.javaException(Util.java:277)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(TransactionResourceImpl.java:437)\r\n\tat org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(TransactionResourceImpl.java:353)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.handleException(EmbedConnection.java:2396)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:660)\r\n\tat org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(InternalDriver.java:647)\r\n\tat org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:301)\r\n\tat org.apache.derby.jdbc.InternalDriver.connect(InternalDriver.java:932)\r\n\tat org.apache.derby.jdbc.AutoloadedDriver.connect(AutoloadedDriver.java:147)\r\n\tat java.sql.DriverManager.getConnection(Unknown Source)\r\n\tat java.sql.DriverManager.getConnection(Unknown Source)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:101)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:68)\r\n\tat org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(DriverManagerConnector.java:44)\r\n\tat org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(TestConfiguration.java:1680)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection(BaseJDBCTestSetup.java:72)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest$XBindTestSetup.setUp(XMLBindingTest.java:293)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:20)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\nCaused by: ERROR XJ001: Java exception: 'access denied (\"java.util.PropertyPermission\" \"user.dir\" \"read\"): java.security.AccessControlException'.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.wrapArgsForTransportAcrossDRDA(SQLExceptionFactory.java:162)\r\n\tat org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(SQLExceptionFactory.java:74)\r\n\t... 36 more\r\nCaused by: java.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"user.dir\" \"read\")\r\n\tat java.security.AccessControlContext.checkPermission(Unknown Source)\r\n\tat java.security.AccessController.checkPermission(Unknown Source)\r\n\tat java.lang.SecurityManager.checkPermission(Unknown Source)\r\n\tat java.lang.SecurityManager.checkPropertyAccess(Unknown Source)\r\n\tat java.lang.System.getProperty(Unknown Source)\r\n\tat java.io.UnixFileSystem.resolve(Unknown Source)\r\n\tat java.io.File.getCanonicalPath(Unknown Source)\r\n\tat org.apache.derby.impl.io.DirStorageFactory.doInit(DirStorageFactory.java:190)\r\n\tat org.apache.derby.impl.io.BaseStorageFactory.init(BaseStorageFactory.java:88)\r\n\tat org.apache.derby.impl.io.DirStorageFactory.init(DirStorageFactory.java:39)\r\n\tat org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(StorageFactoryService.java:215)\r\n\tat org.apache.derby.impl.services.monitor.StorageFactoryService.access$400(StorageFactoryService.java:71)\r\n\tat org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:958)\r\n\tat org.apache.derby.impl.services.monitor.StorageFactoryService$12.run(StorageFactoryService.java:954)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(StorageFactoryService.java:952)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(BaseMonitor.java:1504)\r\n\tat org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(BaseMonitor.java:963)\r\n\tat org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(Monitor.java:546)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(EmbedConnection.java:2802)\r\n\tat org.apache.derby.impl.jdbc.EmbedConnection.<init>(EmbedConnection.java:405)\r\n\t... 29 more\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722452","self":"https://issues.apache.org/jira/rest/api/2/issue/12722452","key":"DERBY-6624","fields":{"summary":"Use javax.xml.xpath interfaces for XPath support","description":"Currently, Derby uses the interfaces in the org.w3c.dom.xpath package to implement XPath support. That package is not part of the Java SE specification. Even though the package is included as an internal API in some of the major Java runtimes, using the standard javax.xml.xpath package instead would be better. It would be more portable, and less likely to break in the future if JVM vendors remove the internal API."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722341","self":"https://issues.apache.org/jira/rest/api/2/issue/12722341","key":"DERBY-6623","fields":{"summary":"DatabaseMetaDataTest fails intermittently","description":"Saw this on the trunk [[http://download.java.net/javadesktop/derby/request_5592737/javadb-task-3883745.html][regression tests]]:\r\n\r\ntestGetXXportedKeys:\r\n\r\n{code}\r\njunit.framework.AssertionFailedError: Column value mismatch @ column 'FK_NAME', row 3:\r\n    Expected: >FKEY3<\r\n    Found:    >FKEY2<\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1303)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(JDBC.java:1215)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSetMinion(JDBC.java:1102)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:1025)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertFullResultSet(JDBC.java:982)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertFullResultSet(DatabaseMetaDataTest.java:3930)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetXXportedKeys(DatabaseMetaDataTest.java:4117)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n{code}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12722257","self":"https://issues.apache.org/jira/rest/api/2/issue/12722257","key":"DERBY-6622","fields":{"summary":"Derby server process hitting OutOfMemoryErrors and taking up 100% cpu ","description":"We are using Derby Network Server in DataPower appliance.  Underlying OS is a Linux based.  Derby Server is accessed only by java processes running on the same appliance.  We are noticing that the Derby server process is running into OutOfMemoryErrors.  Post the OOM errors, connection requests to the server are failing and the CPU usage reaches 100%.  We are also noticing deadlocks reported in the logs.  Please help identify the cause and how the issue can be resolved."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721735","self":"https://issues.apache.org/jira/rest/api/2/issue/12721735","key":"DERBY-6621","fields":{"summary":"Reduce the visibility of more classes and methods","description":"Reduce public visibility to something lower in order to protect against mis-use of Derby objects."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721695","self":"https://issues.apache.org/jira/rest/api/2/issue/12721695","key":"DERBY-6620","fields":{"summary":"Network client DataSources silently swallow SecurityExceptions when trying to read the tracing properties","description":"The swallowing occurs here:\r\n\r\n{noformat}\r\norg.apache.derby.jdbc.ClientBaseDataSourceRoot run Catch java.lang.SecurityException 1 line 457\r\n{noformat}\r\n\r\nMaybe a warning could be raised to alert the user to the problem and encourage them to correct their security policy."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721691","self":"https://issues.apache.org/jira/rest/api/2/issue/12721691","key":"DERBY-6619","fields":{"summary":"After silently swallowing SecurityExceptions, Derby can leak class loaders","description":"As part of the fix for DERBY-3745, Derby silently swallows security exceptions and leaks class loaders. This can give rise to denial-of-service attacks. At a minimum, Derby should report the swallowed exceptions so that the security policy can be corrected and the application can be hardened against this attack. The swallowing occurs at these locations:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.timer.SingletonTimerFactory run Catch java.lang.SecurityException 0 line 175\r\norg.apache.derby.impl.services.timer.SingletonTimerFactory run Catch java.lang.SecurityException 1 line 158\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721687","self":"https://issues.apache.org/jira/rest/api/2/issue/12721687","key":"DERBY-6618","fields":{"summary":"Diagnostic logging silently swallows security and io exceptions","description":"While trying to initialize diagnostic logging, Derby silently swallows security and io exceptions. Probably, Derby should raise an error and exit in this situation. The suspect code is at these locations:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.stream.SingleStream PBmakeFileHPW Catch java.lang.SecurityException 1 line 208\r\norg.apache.derby.impl.services.stream.SingleStream makeFieldHPW Catch java.lang.SecurityException 1 line 315\r\norg.apache.derby.impl.services.stream.SingleStream makeMethodHPW Catch java.lang.SecurityException 1 line 253\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721683","self":"https://issues.apache.org/jira/rest/api/2/issue/12721683","key":"DERBY-6617","fields":{"summary":"Silently swallowed SecurityExceptions may disable Derby features, including security features.","description":"When the Monitor tries to read Derby properties, it silently swallows SecurityExceptions. This means that the properties will be silently ignored if Derby has not been granted sufficient privileges. This means that if you make a mistake crafting your security policy, then you may disable authentication and authorization. You may not realize this until you have incurred a security breach. This swallowing occurs at the following code locations:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.monitor.BaseMonitor readApplicationProperties Catch java.lang.SecurityException 1 line 1360\r\norg.apache.derby.impl.services.monitor.BaseMonitor runWithState Catch java.lang.SecurityException 0 line 280\r\norg.apache.derby.impl.services.monitor.FileMonitor PBgetJVMProperty Catch java.lang.SecurityException 1 line 183\r\norg.apache.derby.impl.services.monitor.FileMonitor PBinitialize Catch java.lang.SecurityException 1 line 120\r\n{noformat}\r\n\r\nSecurityExceptions are swallowed at other locations in the Monitor. The implications of these swallowings should be understood and, at a minimum, security problems should be fixed:\r\n\r\n{noformat}\r\norg.apache.derby.impl.services.monitor.FileMonitor PBinitialize Catch java.lang.SecurityException 1 line 157\r\norg.apache.derby.impl.services.monitor.FileMonitor createDaemonGroup Catch java.lang.SecurityException 1 line 89\r\n{noformat}\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721680","self":"https://issues.apache.org/jira/rest/api/2/issue/12721680","key":"DERBY-6616","fields":{"summary":"User procedures can call system procedures, circumventing SQL authorization.","description":"System procedures are implemented as public static methods in org.apache.derby.catalog.SystemProcedures. These methods can be called by code in user-written procedures. This allows a user-written procedure to circumvent the SQL authorization checks which are supposed to limit some procedures to being called only by the DBO. I will attach a repro.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12721634","self":"https://issues.apache.org/jira/rest/api/2/issue/12721634","key":"DERBY-6615","fields":{"summary":"Remove unused newInstance() method in BaseMonitor","description":"BaseMonitor has two private newInstance() methods. Only one of them is ever called. The unused one should be removed."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720817","self":"https://issues.apache.org/jira/rest/api/2/issue/12720817","key":"DERBY-6614","fields":{"summary":"Enable JDBC 4.2 tests on Java 9 and higher","description":"Many of the JDBC 4.2 test cases are only enabled when running on Java 8, because they use BaseTestCase.isJava8() to determine if they should run. It would be useful to enable these test cases on Java versions higher than 8 too."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720814","self":"https://issues.apache.org/jira/rest/api/2/issue/12720814","key":"DERBY-6613","fields":{"summary":"StatementPoolingTest fails on JDK 9","description":"{noformat}\r\n1) testPoolingEnabledByCheckingImplementationDetails(org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest)junit.framework.ComparisonFailure: expected:<...calPreparedStatement[]> but was:<...calPreparedStatement[42]>\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.assertClassName(StatementPoolingTest.java:195)\r\n\tat org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails(StatementPoolingTest.java:132)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720706","self":"https://issues.apache.org/jira/rest/api/2/issue/12720706","key":"DERBY-6612","fields":{"summary":"Add code to harness tests to allow running under JDK9 VMs.","description":"The harness tests fail when attempted run with a VM that identifies itself as 1.9.*.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720667","self":"https://issues.apache.org/jira/rest/api/2/issue/12720667","key":"DERBY-6611","fields":{"summary":"Broken link in API docs to derby.drda.keepAlive documentation","description":"In the javadoc for NetworkServerMBean#getDrdaKeepAlive, there is a\r\n@see link which is broken. It points to:\r\n\r\nhttp://db.apache.org/derby/docs/dev/adminguide/radmindrdakeepalive.html\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720644","self":"https://issues.apache.org/jira/rest/api/2/issue/12720644","key":"DERBY-6610","fields":{"summary":"suites.All cannot be run with classes without failures","description":"suites.All no longer runs cleanly for me when I run with just classes.\r\nIt still runs fine with jars.\r\nWe accepted this behavior at some point, but it is frustrating when you want to 'quickly' run tests while still working on some details.\r\n\r\nOne of the tests that failed for me was lang.DatabaseClassLoadingTest (complaining about one of the databases not found), another was lang.LuceneSupportPermsTest.\r\nIf a test cannot run cleanly with classes, it should get skipped (preferably both in the test itself and from the _Suite in which it is included).\r\nI also think some of the network server tests complain if derbynet.jar is not found - I cannot off-hand remember if this causes the test to fail."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720636","self":"https://issues.apache.org/jira/rest/api/2/issue/12720636","key":"DERBY-6609","fields":{"summary":"Documentation for SQL features should reflect current standard","description":"We document Derby as an SQL-92 database. This standard is now very old, and we should describe how Derby conforms to the most current standard (SQL:2011). Knut Anders Hatlen listed the relevant features in a comment to DERBY-6605. \r\n\r\nThis will involve at a minimum replacing the \"Derby support for SQL-92 features\" topic (http://db.apache.org/derby/docs/10.10/ref/rrefsql9241891.html) with a new one that describes Derby's support for current features, with notes as needed indicating when the support is partial. Only features Derby supports, fully or partially, should be listed. We should state that features not listed are not supported.\r\n\r\nThe information would be taken from http://wiki.apache.org/db-derby/SQLvsDerbyFeatures (which currently goes only through the 2003 standard). Listing the Feature IDs in the documentation would also be helpful. \r\n\r\nOther topics should be changed as needed. For example, is the term \"SQL92Identifier\" still correct?"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720601","self":"https://issues.apache.org/jira/rest/api/2/issue/12720601","key":"DERBY-6608","fields":{"summary":"Confusing language in BLOB/CLOB Reference Manual topics","description":"The BLOB topic, http://db.apache.org/derby/docs/10.10/ref/rrefblob.html, has a paragraph followed by a note stating the following: \r\n\r\n{quote}\r\nThe length is given in bytes for BLOB unless one of the suffixes K, M, or G is given, relating to the multiples of 1024, 1024*1024, 1024*1024*1024 respectively.\r\n\r\nNote: Length is specified in bytes for BLOB.\r\n{quote}\r\n\r\nWhy the note is necessary is not clear to me. Wouldn't it make sense to remove it and rewrite the paragraph to say,\r\n\r\n{quote}\r\nThe length is specified in bytes for BLOB unless one of the suffixes K, M, or G is given, relating to the multiples of 1024, 1024*1024, 1024*1024*1024 respectively. If a suffix is specified, the length is in kilobytes, megabytes, or gigabytes.\r\n{quote}\r\n\r\nThe CLOB topic, http://db.apache.org/derby/docs/10.10/ref/rrefclob.html, is even more confusing:\r\n\r\n{quote}\r\nThe length is given in number characters for both CLOB, unless one of the suffixes K, M, or G is given, relating to the multiples of 1024, 1024*1024, 1024*1024*1024 respectively.\r\n\r\nLength is specified in characters (unicode) for CLOB. \r\n{quote}\r\n\r\nWould it be correct to say the following?\r\n\r\n{quote}\r\nThe length is specified in numeric Unicode characters for CLOB unless one of the suffixes K, M, or G is given, relating to the multiples of 1024, 1024*1024, 1024*1024*1024 respectively.\r\n{quote}\r\n\r\nI'm not sure how to express what the 1024 multiples are, though. Maybe it's not necessary to do so."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12720524","self":"https://issues.apache.org/jira/rest/api/2/issue/12720524","key":"DERBY-6607","fields":{"summary":"Derby is using territory/collation for equality, not just ordering (incorrectly?)","description":"We have a database where we wish case-insensitivity, and therefore it was created with collation=TERRITORY_BASED:PRIMARY.  We have customers in both the United States (en_US) and in Japan (ja_JP).\r\n\r\nWe have an issue in Japan.  Japanese has three character sets: hiragana, katakana, and kanji.  Hiragana is a phonetic alphabet with 46 letters.  Katakana is an identical phonetic alphabet with 46 letters, written using different character forms, and used for foreign words (words adopted from other languages into Japanese).\r\n\r\nHere is the word 'cake' written in katakana: ケーキ (ke- ki)\r\nHere is the word 'cake' written in hiragana: けーき  (ke- ki)\r\n\r\nIn terms of collation (ordering), Japanese consider these to be equal.  So, in the following Java code, the call to 'compare()' would return 0:\r\n{code:java}\r\nCollator collator = Collator.getInstance(Locale.JAPAN);\r\ncollator.setStrength(Collator.PRIMARY);\r\nreturn collator.compare(\"ケーキ\", \"けーき\");\r\n{code}\r\n\r\nAnd therein lies the issue.  With respect to _ordering_ they are indeed equivalent, however Japanese would consider them district  (non-equivalent) values.\r\n\r\nWhen a table is declared with a UNIQUE constraint on a column, or a PRIMARY KEY column, if 'ケーキ' exists in the table, Derby will throw a unique constraint violation upon an attempt to insert 'けーき'.\r\n\r\nWe need collation=TERRITORY_BASED:PRIMARY or TERRITORY_BASED:SECONDARY for case-insensitivity _and_ at the same time need these values to be treated as unique.  It is as if {{String.equals()}} should be used if the _lvalue_ or _rvalue_ of an = operator is Japanese, but should use {{Collator.equals()}} if both the _lvalue_ and _rvalue_ are \"ascii-betical\".  The same for constraint checking.\r\n\r\nIs it \"correct\" that Derby use the collation when determining value equivalency vs. ordering equivalency?\r\n\r\nAt the same time, I understand that this is tricky.  Japanese has no \"upper-case\" and \"lower-case\" for hiragana, katakana, or kanji, however they do use \"romanji\" (roman characters) which are essentially ASCII, which is case-sensitive.  Collation is merely used for ordering.  So when  TERRITORY_BASED:PRIMARY/SECONDARY is used, for Japanese, 'cat' and 'CAT' would be equivalent but 'ケーキ' and 'けーき' _would not be_.  Unfortunately, there is only one Collator and it will identify _both_ of these as equivalent.\r\n\r\nTaking the example further, imagine a database with collation=TERRITORY_BASED:SECONDARY, and _tags_ table without a unique constraint, but containing the following values:\r\n{code:java}\r\nTag\r\n-----------------------\r\nCat\r\ncat\r\nケーキ\r\nけーき\r\n{code}\r\n\r\nThe following SQL should delete both cats:\r\n{code:sql}\r\nDELETE FROM tags WHERE tag='cAT'\r\n{code}\r\n\r\nBut from the Japanese perspective, the following code would _erroneously_ delete both cakes:\r\n{code:sql}\r\nDELETE FROM tags WHERE tag='ケーキ'\r\n{code}\r\nThey consider the two expressions of the word cake distinct, but consider the two cats as equivalent.  The Collator considers them all equivalent.  It is as if {{String.equals()}} should be used if the _lvalue_ _or_ _rvalue_ of an = operator is Japanese, and use {{Collator.equals()}} if the _lvalue_ _and_ _rvalue_ are \"ascii-betical\".\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718916","self":"https://issues.apache.org/jira/rest/api/2/issue/12718916","key":"DERBY-6606","fields":{"summary":"ErrorCodeTest AssertionFailedError: Unexpected row count, expected: 174, actual: 175","description":"With ibm jdk 1.6, test_errorcode failed with following exception on trunk on Windows machine. The test failed both for embedded and network server.\r\nhttp://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1600553-suites.All_diff.txt\r\n\r\n1) test_errorcode(org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest)junit.framework.AssertionFailedError: Unexpected row count, expected: 174, actual: 175\r\n\t expected rows: \r\n\t\t[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' shutdown., 45000], [08006, Database '{0}' dropped., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]\r\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000]]\r\n\t actual result: \r\n\t\t[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' dropped., 45000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, Database '{0}' shutdown., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]\r\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG4, Unrecoverable internal error encountered while attempting to read low level metadata about the table or index. Please provide your support organization with the following exception information: Failed: arraycopy of embryonic page byte[{0}] to container information byte[{1}]. Values of variables and constants: MAX_BORROWED_SPACE: {2}, BORROWED_SPACE_OFFSET({3}) + BORROWED_SPACE_LENG({4}) = {5}; arraycopylength: {6}; embryonic page {7}., 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000]]\r\n expected:<174> but was:<175>\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRSContains(JDBC.java:1481)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1395)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1375)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode(ErrorCodeTest.java:274)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n2) test_errorcode(org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest)junit.framework.AssertionFailedError: Unexpected row count, expected: 174, actual: 175\r\n\t expected rows: \r\n\t\t[[08000, Connection closed by unknown interrupt., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, Database '{0}' shutdown., 45000], [08006, Database '{0}' dropped., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]\r\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000]]\r\n\t actual result: \r\n\t\t[[08000, Connection closed by unknown interrupt., 40000], [08001, Required Derby DataSource property {0} not set., 40000], [08001, {0} : Error connecting to server {1} on port {2} with message {3}., 40000], [08001, SocketException: '{0}', 40000], [08001, Unable to open stream on socket: '{0}'., 40000], [08001, User id length ({0}) is outside the range of 1 to {1}., 40000], [08001, A connection could not be established because the security token is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the external name (EXTNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, A connection could not be established because the server name (SRVNAM) has a length of zero or is larger than the maximum allowed by the network protocol., 40000], [08001, Password length ({0}) is outside the range of 1 to {1}., 40000], [08001, User id can not be null., 40000], [08001, Password can not be null., 40000], [08001, A connection could not be established because the database name '{0}' is larger than the maximum length allowed by the network protocol., 40000], [08003, No current connection., 40000], [08003, getConnection() is not valid on a closed PooledConnection., 40000], [08003, Lob method called after connection was closed, 40000], [08003, The underlying physical connection is stale or closed., 40000], [08004, Connection refused : {0}, 40000], [08004, Cannot check system permission to create database '{0}' [{1}]., 40000], [08004, Missing permission for user '{0}' to create database '{1}' [{2}]., 40000], [08004, Connection authentication failure occurred. Either the supplied credentials were invalid, or the database uses a password encryption scheme not compatible with the strong password substitution security mechanism. If this error started after upgrade, refer to the release note for DERBY-4483 for options., 40000], [08004, Username or password is null or 0 length., 40000], [08004, User '{0}' cannot decrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection authentication failure occurred.  Reason: {0}., 40000], [08004, The connection was refused because the database {0} was not found., 40000], [08004, Database connection refused., 40000], [08004, User '{0}' cannot shut down database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation., 40000], [08004, User '{0}' cannot upgrade database '{1}'. Only the database owner can perform this operation., 40000], [08004, Connection refused to database '{0}' because it is in replication slave mode., 40000], [08004, User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation., 40000], [08004, Missing permission for user '{0}' to shutdown system [{1}]., 40000], [08006, Database '{0}' dropped., 45000], [08006, An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, SocketException: '{0}', 40000], [08006, A communications error has been detected: {0}., 40000], [08006, An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details., 40000], [08006, Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated., 40000], [08006, Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated., 40000], [08006, org.apache.derby.jdbc.EmbeddedDriver is not registered with the JDBC driver manager, 40000], [08006, A network protocol error was encountered and the connection has been terminated: {0}, 40000], [08006, Database '{0}' shutdown., 45000], [0A000, The DRDA command {0} is not currently implemented.  The connection has been terminated., 40000], [57017, There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated., 40000], [58009, Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated., 40000], [58009, The connection was terminated because the encoding is not supported., 40000], [58009, Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated., 40000], [58009, Network protocol exception: DDM collection contains less than 4 bytes of data.  The connection has been terminated., 40000], [58009, Network protocol exception: collection stack not empty at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated., 40000], [58009, Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated., 40000], [58009, Network protocol exception: invalid FDOCA LID.  The connection has been terminated., 40000], [58009, Network protocol exception: SECTKN was not returned.  The connection has been terminated., 40000], [58009, Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated., 40000], [58009, Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated., 40000], [58010, A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server., 40000], [58014, The DDM command 0x{0} is not supported.  The connection has been terminated., 40000], [58015, The DDM object 0x{0} is not supported.  The connection has been terminated., 40000], [58016, The DDM parameter 0x{0} is not supported.  The connection has been terminated., 40000], [58017, The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated., 40000], [XBDA0, Login timeout exceeded., 40000], [XBM01, Startup failed due to an exception. See next exception for details., 45000], [XBM02, Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software., 45000], [XBM03, Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED., 45000], [XBM04, Collator support not available from the JVM for the database's locale '{0}'., 45000], [XBM05, Startup failed due to missing product version information for {0}., 45000], [XBM06, Startup failed. An encrypted database cannot be accessed without the correct boot password., 45000], [XBM07, Startup failed. Boot password must be at least 8 bytes long., 45000], [XBM08, Could not instantiate {0} StorageFactory class {1}., 45000], [XBM0A, The database directory '{0}' exists. However, it does not contain the expected '{1}' file. Perhaps Derby was brought down in the middle of creating this database. You may want to delete this directory and try creating the database again., 45000], [XBM0B, Failed to edit/write service properties file: {0}, 45000], [XBM0C, Missing privilege for operation '{0}' on file '{1}': {2}, 45000], [XBM0G, Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path., 45000], [XBM0H, Directory {0} cannot be created., 45000], [XBM0I, Directory {0} cannot be removed., 45000], [XBM0J, Directory {0} already exists., 45000], [XBM0K, Unknown sub-protocol for database name {0}., 45000], [XBM0L, Specified authentication scheme class {0} does implement the authentication interface {1}., 45000], [XBM0M, Error creating an instance of a class named '{0}'. This class name was the value of the derby.authentication.provider property and was expected to be the name of an application-supplied implementation of org.apache.derby.authentication.UserAuthenticator. The underlying problem was: {1}, 45000], [XBM0N, JDBC Driver registration with java.sql.DriverManager failed. See next exception for details., 45000], [XBM0P, Service provider is read-only. Operation not permitted., 45000], [XBM0Q, File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XBM0R, Unable to remove File {0}., 45000], [XBM0S, Unable to rename file '{0}' to '{1}', 45000], [XBM0T, Ambiguous sub-protocol for database name {0}., 45000], [XBM0X, Supplied locale description '{0}' is invalid, expecting ln[_CO[_variant]]\r\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale., 45000], [XBM0Y, Backup database directory {0} not found. Please make sure that the specified backup path is right., 45000], [XBM0Z, Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct., 45000], [XCW00, Unsupported upgrade from '{0}' to '{1}'., 45000], [XJ004, Database '{0}' not found., 40000], [XJ015, Derby system shutdown., 50000], [XJ028, The URL '{0}' is not properly formed., 40000], [XJ040, Failed to start database '{0}' with class loader {1}, see the next exception for details., 40000], [XJ041, Failed to create database '{0}', see the next exception for details., 40000], [XJ048, Conflicting boot attributes specified: {0}, 40000], [XJ049, Conflicting create attributes specified., 40000], [XJ05B, JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'., 40000], [XJ081, Conflicting create/restore/recovery attributes specified., 40000], [XJ213, The traceLevel connection property does not have a valid format for a number., 40000], [XN022, A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated., 40000], [XN023, The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported., 40000], [XN024, Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'., 40000], [XRE04, Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'., 40000], [XRE04, Connection lost for replicated database '{0}'., 40000], [XRE05, The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is fatal for replication - replication will be stopped., 40000], [XRE09, Cannot start replication slave mode for database '{0}'. The database has already been booted., 40000], [XRE11, Could not perform operation '{0}' because the database '{1}' has not been booted., 40000], [XRE20, Failover performed successfully for database '{0}', the database has been shutdown., 45000], [XRE21, Error occurred while performing failover for database '{0}', Failover attempt was aborted., 40000], [XRE22, Replication master has already been booted for database '{0}', 40000], [XRE41, Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead., 40000], [XRE42, Replicated database '{0}' shutdown., 40000], [XSDB0, Unexpected exception on in-memory page {0}, 45000], [XSDB1, Unknown page format at page {0}, 45000], [XSDB2, Unknown container format at container {0} : {1}, 45000], [XSDB3, Container information cannot change once written: was {0}, now {1}, 45000], [XSDB4, Page {0} is at version {1}, the log file contains change version {2}, either there are log records of this page missing, or this page did not get written out to disk properly., 45000], [XSDB5, Log has change record on page {0}, which is beyond the end of the container., 45000], [XSDB6, Another instance of Derby may have already booted the database {0}., 45000], [XSDB7, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result and may have already occurred., 45000], [XSDB8, Warning: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The derby.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand., 45000], [XSDB9, Stream container {0} is corrupt., 45000], [XSDBA, Attempt to allocate object {0} failed., 45000], [XSDBB, Unknown page format at page {0}, page dump follows: {1}, 45000], [XSDBC, Write of container information to page 0 of container {0} failed.  See nested error for more information., 45000], [XSDG0, Page {0} could not be read from disk., 45000], [XSDG1, Page {0} could not be written to disk, please check if the disk is full, or if a file system limit, such as a quota or a maximum file size, has been reached., 45000], [XSDG2, Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}, 45000], [XSDG3, Meta-data for {0} could not be accessed to {1} {2}, 45000], [XSDG4, Unrecoverable internal error encountered while attempting to read low level metadata about the table or index. Please provide your support organization with the following exception information: Failed: arraycopy of embryonic page byte[{0}] to container information byte[{1}]. Values of variables and constants: MAX_BORROWED_SPACE: {2}, BORROWED_SPACE_OFFSET({3}) + BORROWED_SPACE_LENG({4}) = {5}; arraycopylength: {6}; embryonic page {7}., 45000], [XSDG5, Database is not in create mode when createFinished is called., 45000], [XSDG6, Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted., 45000], [XSDG7, Directory {0} could not be removed during restore. Please make sure that permissions are correct., 45000], [XSDG8, Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSDG9, Derby thread received an interrupt during a disk I/O operation, please check your application for the source of the interrupt., 45000], [XSLA0, Cannot flush the log file to disk {0}., 45000], [XSLA1, Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also., 45000], [XSLA2, System will shutdown, got I/O Exception while accessing log file., 45000], [XSLA3, Log Corrupted, has invalid data in the log stream., 45000], [XSLA4, Error encountered when attempting to write the transaction recovery log. Most likely the disk holding the recovery log is full. If the disk is full, the only way to proceed is to free up space on the disk by either expanding it or deleting files not related to Derby. It is also possible that the file system and/or disk where the Derby transaction log resides is read-only. The error can also be encountered if the disk or file system has failed., 45000], [XSLA5, Cannot read log stream for some reason to rollback transaction {0}., 45000], [XSLA6, Cannot recover the database., 45000], [XSLA7, Cannot redo operation {0} in the log., 45000], [XSLA8, Cannot rollback transaction {0}, trying to compensate {1} operation with {2}, 45000], [XSLAA, The store has been marked for shutdown by an earlier exception., 45000], [XSLAB, Cannot find log file {0}, please make sure your logDevice property is properly set with the correct path separator for your platform., 45000], [XSLAC, Database at {0} has a format incompatible with the current version of software. It may have been created by or upgraded by a later version., 45000], [XSLAD, Log Record at instant {2} in log file {3} corrupted. Expected log record length {0}, real length {1}., 45000], [XSLAE, Control file at {0} cannot be written or updated., 45000], [XSLAF, A Read Only database was created with dirty data buffers., 45000], [XSLAH, A Read Only database is being updated., 45000], [XSLAI, Cannot log the checkpoint log record, 45000], [XSLAJ, The logging system has been marked to shut down due to an earlier problem and will not allow any more operations until the system shuts down and restarts., 45000], [XSLAK, Database has exceeded largest log file number {0}., 45000], [XSLAL, Log record size {2} exceeded the maximum allowable log file size {3}. Error encountered in log file {0}, position {1}., 45000], [XSLAM, Cannot verify database format at {1} due to IOException: {0}, 45000], [XSLAN, Database at {0} has an incompatible format with the current version of the software.  The database was created by or upgraded by version {1}., 45000], [XSLAO, Recovery failed unexpected problem: {0}., 45000], [XSLAP, Database at {0} is at version {1}. Beta databases cannot be upgraded., 45000], [XSLAQ, Cannot create log file at directory {0}., 45000], [XSLAR, Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct., 45000], [XSLAS, Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted., 45000], [XSLAT, The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct., 45000], [XSTB0, An exception was thrown during transaction abort., 50000], [XSTB2, Cannot log transaction changes, maybe trying to write to a read only database., 50000], [XSTB3, Cannot abort transaction because the log manager is null, probably due to an earlier error., 50000], [XSTB5, Creating database with logging disabled encountered unexpected problem., 50000], [XSTB6, Cannot substitute a transaction table with another while one is already in use., 50000], [XXXXX, Normal database session close., 40000]]\r\n expected:<174> but was:<175>\r\n\tat org.apache.derbyTesting.junit.JDBC.assertRSContains(JDBC.java:1481)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1395)\r\n\tat org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(JDBC.java:1375)\r\n\tat org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode(ErrorCodeTest.java:274)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:60)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\tat org.apache.derbyTesting.junit.BaseTestSetup.run(BaseTestSetup.java:57)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:21)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:25)\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718845","self":"https://issues.apache.org/jira/rest/api/2/issue/12718845","key":"DERBY-6605","fields":{"summary":"\"Derby support for SQL-92 features\" topic in Reference Manual needs updating","description":"The topic \"Derby support for SQL-92 features\" in the Reference Manual (http://db.apache.org/derby/docs/10.10/ref/rrefsql9241891.html) seems not to have been substantively updated since about 2007.\r\n\r\nFor one thing, the parenthesis \"(non-deferrable)\" needs to be removed from Table 8 (constraint support). Also, I think we've supported natural joins for some time. \r\n\r\nCould someone more knowledgeable than I am go through the items marked \"No\" and see if any more need updating? I think those two might be the only ones, but I am not quite sure."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718738","self":"https://issues.apache.org/jira/rest/api/2/issue/12718738","key":"DERBY-6604","fields":{"summary":"Make ReferenceableDataSource abstract","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718608","self":"https://issues.apache.org/jira/rest/api/2/issue/12718608","key":"DERBY-6603","fields":{"summary":"Make LuceneSupport.createOrRecreateIndex() write the index properties file once per indexing run","description":"That method re-writes the index properties file for every row read from the table/view, rather than once per table/view. The following line should be moved out of the loop at the end of the method:\r\n\r\n{noformat}\r\n                writeIndexProperties( propertiesFile, indexProperties );\r\n{noformat}\r\n\r\nI don't think that writing the file for every row is a correctness problem. It's just inefficient and unnecessary.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718606","self":"https://issues.apache.org/jira/rest/api/2/issue/12718606","key":"DERBY-6602","fields":{"summary":"LuceneQueryVTI handles NULL key values inconsistently","description":"If there's an integer key column with a NULL value, the Lucene query will return a fake key value (0) rather than NULL. The document id and score will be correct. Example:\r\n\r\n{noformat}\r\nij> create table t1(x int, c clob);\r\n0 rows inserted/updated/deleted\r\nij> insert into t1 values (null, 'abc'), (null, 'def');\r\n2 rows inserted/updated/deleted\r\nij> call lucenesupport.createindex('app', 't1', 'c', null, 'x');\r\n0 rows inserted/updated/deleted\r\nij> select * from table(t1__c('abc or def', null, 3, null)) tc;\r\nX          |DOCUMENTID |SCORE          \r\n---------------------------------------\r\n0          |0          |0.35355338     \r\n0          |1          |0.35355338     \r\n\r\n2 rows selected\r\n{noformat}\r\n\r\nIf the key column is a string type, the returned key is correct (NULL). The document id is sometimes correct and sometimes NULL, and the score seems to be NULL always. Example:\r\n\r\n{noformat}\r\nij> create table t2(x varchar(10), c clob);\r\n0 rows inserted/updated/deleted\r\nij> insert into t2 values (null, 'abc'), (null, 'def');\r\n2 rows inserted/updated/deleted\r\nij> call lucenesupport.createindex('app', 't2', 'c', null, 'x');\r\n0 rows inserted/updated/deleted\r\nij> select * from table(t2__c('abc or def', null, 3, null)) tc;\r\nX         |DOCUMENTID |SCORE          \r\n--------------------------------------\r\nNULL      |NULL       |NULL           \r\nNULL      |1          |NULL           \r\n\r\n2 rows selected\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718468","self":"https://issues.apache.org/jira/rest/api/2/issue/12718468","key":"DERBY-6601","fields":{"summary":"Clean up Java EE compliance section of Reference Manual","description":"The section \"Java EE Compliance: Java Transaction API and javax.sql Interfaces\" still uses old capitalization conventions, and it has a completely content-free subsection, \"Notes on Product Behavior\", under \"The JTA API\". "}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718366","self":"https://issues.apache.org/jira/rest/api/2/issue/12718366","key":"DERBY-6600","fields":{"summary":"Make the Lucene plugin use the database class path to resolve ANALYZERMAKERs and QUERYPARSERMAKERs","description":"You get a ClassNotFoundException if you try to use an Analyzer or a QueryParser stored in a jar file in the database. This is probably easy to fix: the class resolution needs to use the database class loader."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718339","self":"https://issues.apache.org/jira/rest/api/2/issue/12718339","key":"DERBY-6599","fields":{"summary":"Incorrect quoting of 42ZB4 message","description":"{noformat}\r\nij> select * from table (app.def()) t;\r\nERROR 42ZB4: 'APP'.DEF' does not identify a table function.\r\n{noformat}\r\n\r\nThere's a missing opening quote before the table function name in the error message."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718170","self":"https://issues.apache.org/jira/rest/api/2/issue/12718170","key":"DERBY-6598","fields":{"summary":"Document permissions recommendations for JAR procedures","description":"It's been recommended that we should make the documentation of the SQLJ.INSTALL_JAR procedure (and SQLJ.REPLACE_JAR) state more explicitly that the privilege should only be granted to trusted users. For example:\r\n\r\n\"Since this procedure can be used to install arbitrary code that runs in the same Java Virtual Machine as the Derby database engine, the execution privilege should only be granted to trusted users.\"\r\n\r\nThis needs to go into the Reference Manual topics on these procedures as well as other locations where they are discussed."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718165","self":"https://issues.apache.org/jira/rest/api/2/issue/12718165","key":"DERBY-6597","fields":{"summary":"LUCENESUPPORT.LISTINDEXES() fails with FileNotFoundException","description":"DROP TABLE seems to cascade and drop any Lucene indexes defined on the table. However, there seems to be some traces of meta-data left, so that LUCENESUPPORT.LISTINDEXES thinks the index is still there, and fails with FileNotFoundException when trying to access the index:\r\n\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t(x int primary key, c clob);\r\n0 rows inserted/updated/deleted\r\nij> call syscs_util.syscs_register_tool('luceneSupport', true);\r\n0 rows inserted/updated/deleted\r\nij> call lucenesupport.createindex('app', 't', 'c', null);\r\n0 rows inserted/updated/deleted\r\nij> drop table t;\r\n0 rows inserted/updated/deleted\r\nij> select * from table ( lucenesupport.listindexes() ) li;\r\nSCHEMANAME                                                                                                                      |TABLENAME                                                                                                                       |COLUMNNAME                                                                                                                      |LASTUPDATED                  |LUCENEVERSION       |ANALYZER                                                                                                                        |ANALYZERMAKER                                                                                                                   \r\nr\nERROR XJ001: Java exception: 'java.io.FileNotFoundException: /tmp/db/LUCENE/APP/T/C/derby-lucene.properties'.\r\nERROR XJ001: Java exception: '/tmp/db/LUCENE/APP/T/C/derby-lucene.properties: java.io.FileNotFoundException'.\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718163","self":"https://issues.apache.org/jira/rest/api/2/issue/12718163","key":"DERBY-6596","fields":{"summary":"LUCENESUPPORT routines should check for NULL arguments","description":"When the LUCENESUPPORT routines are called with argument value NULL where a NULL is not allowed, they fail with NullPointerExceptions. Example:\r\n\r\nij> call lucenesupport.createindex('app', 't', null, null);\r\nERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n\r\nHere, the third argument (the column name) cannot be NULL. It would be nicer if it raised an error that said that the argument couldn't be NULL, since a NullPointerException looks more like an internal error."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12718143","self":"https://issues.apache.org/jira/rest/api/2/issue/12718143","key":"DERBY-6595","fields":{"summary":"CheckToursDBTest failed while updating sequence value on disk","description":"I saw a failure in CheckToursDBTest while running the demo test suite on trunk. It was reported as an ArrayIndexOutOfBoundsException. The ArrayIndexOutOfBoundsException happened during cleanup and shadowed the original exception. The original exception in derby.log looked like this:\r\n\r\n{noformat}\r\nERROR XSTA2: A transaction was already active, when attempt was made to make another transaction active.\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:290)\r\n\tat org.apache.derby.iapi.error.StandardException.newException(StandardException.java:285)\r\n\tat org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(XactFactory.java:766)\r\n\tat org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(XactFactory.java:293)\r\n\tat org.apache.derby.impl.store.raw.xact.XactFactory.startNestedUpdateUserTransaction(XactFactory.java:350)\r\n\tat org.apache.derby.impl.store.raw.RawStore.startNestedUpdateUserTransaction(RawStore.java:460)\r\n\tat org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(RAMTransaction.java:2326)\r\n\tat org.apache.derby.impl.sql.catalog.SequenceUpdater.updateCurrentValueOnDisk(SequenceUpdater.java:486)\r\n\tat org.apache.derby.impl.sql.catalog.SequenceUpdater.clean(SequenceUpdater.java:218)\r\n\tat org.apache.derby.impl.sql.catalog.SequenceUpdater.clearIdentity(SequenceUpdater.java:257)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.removeEntry(ConcurrentCache.java:167)\r\n\tat org.apache.derby.impl.services.cache.ConcurrentCache.ageOut(ConcurrentCache.java:583)\r\n\tat org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSequenceCaches(DataDictionaryImpl.java:8968)\r\n\tat org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8951)\r\n\tat org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches(DataDictionaryImpl.java:8937)\r\n\tat org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(DataDictionaryImpl.java:1184)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepMinion(GenericStatement.java:519)\r\n\tat org.apache.derby.impl.sql.GenericStatement.prepareStorable(GenericStatement.java:687)\r\n\tat org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(SPSDescriptor.java:373)\r\n\tat org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(SPSDescriptor.java:264)\r\n\tat org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:739)\r\n\tat org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(SPSDescriptor.java:655)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(GenericTriggerExecutor.java:171)\r\n\tat org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeWhenClauseAndAction(GenericTriggerExecutor.java:346)\r\n\tat org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(RowTriggerExecutor.java:113)\r\n\tat org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEventActivator.java:272)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers(UpdateResultSet.java:831)\r\n\tat org.apache.derby.impl.sql.execute.UpdateResultSet.open(UpdateResultSet.java:282)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doUpdate(CheckToursDBTest.java:163)\r\n\tat org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.testToursDB(CheckToursDBTest.java:108)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:483)\r\n\tat junit.framework.TestCase.runTest(TestCase.java:168)\r\n\tat junit.framework.TestCase.runBare(TestCase.java:134)\r\n\tat org.apache.derbyTesting.junit.BaseTestCase.runBare(BaseTestCase.java:118)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBareOverridable(BaseJDBCTestCase.java:440)\r\n\tat org.apache.derbyTesting.junit.BaseJDBCTestCase.runBare(BaseJDBCTestCase.java:457)\r\n\tat junit.framework.TestResult$1.protect(TestResult.java:110)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\r\n\tat junit.framework.TestResult.run(TestResult.java:113)\r\n\tat junit.framework.TestCase.run(TestCase.java:124)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.extensions.TestDecorator.basicRun(TestDecorator.java:24)\r\n\tat junit.extensions.TestSetup$1.protect(TestSetup.java:23)\r\n\tat junit.framework.TestResult.runProtected(TestResult.java:128)\r\n\tat junit.extensions.TestSetup.run(TestSetup.java:27)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat junit.framework.TestSuite.runTest(TestSuite.java:232)\r\n\tat junit.framework.TestSuite.run(TestSuite.java:227)\r\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\r\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\r\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12717900","self":"https://issues.apache.org/jira/rest/api/2/issue/12717900","key":"DERBY-6594","fields":{"summary":"Typos in \"Listing indexes\" topic of the tools guide","description":"The \"Listing indexes\" topic of the tools guide says two places that the schema is LUCENESCHEMA. It should be LUCENESUPPORT.\r\n\r\nThe example in the topic lacks an empty argument list in the table function call and fails with a syntax error because of it (after fixing the schema name). It should say:\r\n\r\n{code:sql}\r\nSELECT * FROM TABLE( LUCENESUPPORT.LISTINDEXES() ) T\r\n{code}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12717893","self":"https://issues.apache.org/jira/rest/api/2/issue/12717893","key":"DERBY-6593","fields":{"summary":"Using a natural join, you can invoke a table function with an argument which is outside the scope of the query block.","description":"I'm seeing a NullPointerException when joining a table with a Lucene VTI.\r\n\r\nHere's a script that reproduces the NPE:\r\n\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t(id int primary key, x varchar(20));\r\n0 rows inserted/updated/deleted\r\nij> insert into t values (1, 'abc');\r\n1 row inserted/updated/deleted\r\nij> call syscs_util.syscs_register_tool( 'luceneSupport', true );\r\n0 rows inserted/updated/deleted\r\nij> call lucenesupport.createindex('app', 't', 'x', null);\r\n0 rows inserted/updated/deleted\r\nij> select * from t natural join (select * from table (t__x(t.x, null, 100, null)) lt) lt;\r\nERROR 38000: The exception 'java.lang.NullPointerException' was thrown while evaluating an expression.\r\nERROR XJ001: Java exception: ': java.lang.NullPointerException'.\r\n{noformat}\r\n\r\nFull stack trace:\r\n\r\n{noformat}\r\njava.lang.NullPointerException\r\n\tat org.apache.derby.iapi.types.DataType.setValue(DataType.java:537)\r\n\tat org.apache.derby.exe.aced8940a7x0146x5c7fx5474x0000188928898.g0(Unknown Source)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:483)\r\n\tat org.apache.derby.impl.services.reflect.ReflectMethod.invoke(ReflectMethod.java:46)\r\n\tat org.apache.derby.impl.sql.execute.VTIResultSet.openCore(VTIResultSet.java:251)\r\n\tat org.apache.derby.impl.sql.execute.JoinResultSet.openCore(JoinResultSet.java:146)\r\n\tat org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore(ProjectRestrictResultSet.java:181)\r\n\tat org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open(BasicNoPutResultSetImpl.java:266)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.executeStmt(GenericPreparedStatement.java:470)\r\n\tat org.apache.derby.impl.sql.GenericPreparedStatement.execute(GenericPreparedStatement.java:349)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(EmbedStatement.java:1338)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:704)\r\n\tat org.apache.derby.impl.jdbc.EmbedStatement.execute(EmbedStatement.java:631)\r\n\tat org.apache.derby.impl.tools.ij.ij.executeImmediate(ij.java:367)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.doCatch(utilMain.java:527)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.runScriptGuts(utilMain.java:372)\r\n\tat org.apache.derby.impl.tools.ij.utilMain.go(utilMain.java:245)\r\n\tat org.apache.derby.impl.tools.ij.Main.go(Main.java:229)\r\n\tat org.apache.derby.impl.tools.ij.Main.mainCore(Main.java:184)\r\n\tat org.apache.derby.impl.tools.ij.Main.main(Main.java:75)\r\n\tat org.apache.derby.tools.ij.main(ij.java:59)\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12717547","self":"https://issues.apache.org/jira/rest/api/2/issue/12717547","key":"DERBY-6592","fields":{"summary":"Update the version of ant which we tell new developers to use.","description":"The top level BUILDING.html page tells users to grab ant version 1.7.0 or higher. I don't know whether that version still works. I have been using version 1.9.2 for a long time. I see no harm in changing the instructions to tell new developers to grab ant version 1.9.2. I think it's a good idea to update these instructions regularly."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12717318","self":"https://issues.apache.org/jira/rest/api/2/issue/12717318","key":"DERBY-6591","fields":{"summary":"Minor tweaks needed on new ij commands","description":"The documentation fixes for DERBY-6515 and DERBY-6585 have a couple of minor font inconsistencies, and one of the commands is out of order in the TOC. Creating this subtask to fix these."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12717065","self":"https://issues.apache.org/jira/rest/api/2/issue/12717065","key":"DERBY-6590","fields":{"summary":"Make JUnit tests run the fixtures in a deterministic order.","description":"Since JDK 7, when we use the standard decorator for JUnit tests, e.g.\r\n\r\nreturn TestConfiguration.defaultSuite(AggBuiltinTest.class);\r\n\r\nthe order in which the test fixtures get run is indeterministic. This is undesirable because it doesn't add much coverage to the product and makes the tests more brittle than they need to be.\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716875","self":"https://issues.apache.org/jira/rest/api/2/issue/12716875","key":"DERBY-6589","fields":{"summary":"Wire the new Security Guide into the top level index.html page and into the release publication machinery.","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716870","self":"https://issues.apache.org/jira/rest/api/2/issue/12716870","key":"DERBY-6588","fields":{"summary":"Tasks for producing a 10.11.1 feature release","description":null}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716783","self":"https://issues.apache.org/jira/rest/api/2/issue/12716783","key":"DERBY-6587","fields":{"summary":"Foreign Key constraint not matched when using UUID in a composite foreign key when using SYSCS_UTIL.SYSCS_IMPORT_TABLE","description":"There is a problem in org.apache.derby.impl.sql.execute.RIBulkChecker:\r\n\r\nresult = fkCol.compare(refCol);\r\n\r\n            if (result == 1)\r\n            {\r\n                return GREATER_THAN;\r\n            }\r\n            else if (result == -1)\r\n            {\r\n                return LESS_THAN;\r\n            }\r\n\r\nwhere the JavaDoc for \"compare\" explicitly states that one must not use 1 or -1 to check the return value.\r\n\r\nThe problem can be reproduced when creating a table with two fields, \"UUID_FIELD char (16) for bit data\" and \"NUM_FIELD integer\", then having a foreign key to these two fields and then using the bulk import, i.e. \"CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE ...\"\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716443","self":"https://issues.apache.org/jira/rest/api/2/issue/12716443","key":"DERBY-6586","fields":{"summary":"CLONE - derbyclient.jar conflict with derby.jar on package export, which is problematic on OSGI environment","description":"The manifest in derbyclient.jar is incomplete for usage in OSGi.  There are no packages exported.  This appears to only be a problem in standalone equinox (outside of eclipse).  Note that I did not try other OSGi containers.\r\n\r\nThe fix is relatively simple.  Adding the Export-Package manifest header should take care of the problem."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716394","self":"https://issues.apache.org/jira/rest/api/2/issue/12716394","key":"DERBY-6585","fields":{"summary":"add HoldForConnection ij command to match NoHoldForConnection","description":"DERBY-6515 was created to document the NoHoldForConnection ij command, which was used in some of Derby's sql style tests.\r\nIn subsequent comments, it was felt there should be a matching HoldForConnection ij command to set the value back to the default (ResultSet.HOLD_CURSORS_OVER_COMMIT)."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716315","self":"https://issues.apache.org/jira/rest/api/2/issue/12716315","key":"DERBY-6584","fields":{"summary":"Comparisons between BOOLEAN and other types sometimes succeed","description":"I would have expected the following queries to fail because of type mismatch between CHAR and BOOLEAN:\r\n\r\n{noformat}\r\nij> values 'abc' = true, true = 'xyz', false = 'yes';\r\n1    \r\n-----\r\ntrue \r\ntrue \r\nfalse\r\n\r\n3 rows selected\r\nij> values 'abc' in (true, false), true in ('abc', 'def');\r\n1    \r\n-----\r\ntrue \r\ntrue \r\n\r\n2 rows selected\r\n{noformat}\r\n\r\nSimilar queries using INTEGER values instead of CHAR values fail as expected:\r\n\r\n{noformat}\r\nij> values 1 = true;\r\nERROR 42818: Comparisons between 'INTEGER' and 'BOOLEAN' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1')\r\nij> values true = 1;\r\nERROR 42818: Comparisons between 'BOOLEAN' and 'INTEGER' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1')\r\nij> values true in (1,2,3);\r\nERROR 42818: Comparisons between 'BOOLEAN' and 'INTEGER' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1')\r\nij> values 1 in (true, false);\r\nERROR 42818: Comparisons between 'INTEGER' and 'BOOLEAN' are not supported. Types must be comparable. String types must also have matching collation. If collation does not match, a possible solution is to cast operands to force them to the default collation (e.g. SELECT tablename FROM sys.systables WHERE CAST(tablename AS VARCHAR(128)) = 'T1')\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716104","self":"https://issues.apache.org/jira/rest/api/2/issue/12716104","key":"DERBY-6583","fields":{"summary":"Security Guide must be added to Derby documentation page","description":"Now that the Derby Security Guide is part of the documentation, it needs to be added to the Latest Alpha Manuals section of the Derby documentation page at http://db.apache.org/derby/manuals/index.html. Also, it should be verified that a documentation build includes this manual. (The manual is generated by \"ant all\" and other targets in the build.xml file, but I'm not sure how that correlates to what is generated for the web site.)\r\n\r\nOnce 10.11 releases, the manual must also be included in the docs for the release."}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716065","self":"https://issues.apache.org/jira/rest/api/2/issue/12716065","key":"DERBY-6582","fields":{"summary":"Database corruption after OutOfMemoryError ","description":"after running into an out of memory error [1] the database cannot be used any more [2]. Full stacktraces follow as attachment\r\n\r\n[1] OutOfMemoryError Stacktrace\r\nDBMS failure (UE[DRDAConnThread_32]). Exiting with code -1\r\njava.lang.OutOfMemoryError: Java heap space\r\n\tat java.util.LinkedHashMap.createEntry(Unknown Source)\r\n\tat java.util.LinkedHashMap.addEntry(Unknown Source)\r\n\tat java.util.HashMap.put(Unknown Source)\r\n\tat sun.util.resources.OpenListResourceBundle.loadLookup(Unknown Source)\r\n\tat sun.util.resources.OpenListResourceBundle.loadLookupTablesIfNecessary(Unknown Source)\r\n\tat sun.util.resources.OpenListResourceBundle.handleGetObject(Unknown Source)\r\n\tat sun.util.resources.TimeZoneNamesBundle.handleGetObject(Unknown Source)\r\n\tat java.util.ResourceBundle.getObject(Unknown Source)\r\n\tat java.util.ResourceBundle.getObject(Unknown Source)\r\n\tat java.util.ResourceBundle.getStringArray(Unknown Source)\r\n\tat sun.util.TimeZoneNameUtility.retrieveDisplayNames(Unknown Source)\r\n\tat sun.util.TimeZoneNameUtility.retrieveDisplayNames(Unknown Source)\r\n\tat java.util.TimeZone.getDisplayNames(Unknown Source)\r\n\tat java.util.TimeZone.getDisplayName(Unknown Source)\r\n\tat java.util.Date.toString(Unknown Source)\r\n\tat java.lang.String.valueOf(Unknown Source)\r\n\tat java.lang.StringBuffer.append(Unknown Source)\r\n\tat org.apache.derby.impl.services.stream.BasicGetLogHeader.getHeader(Unknown Source)\r\n\tat org.apache.derby.iapi.error.ErrorStringBuilder.appendln(Unknown Source)\r\n[...]\r\n\r\n[2] ERROR XSLA6: Cannot recover the database.\r\n[...]\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.derby.impl.store.raw.data.LogicalPageOperation.generateUndo(Unknown Source)\r\n\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12716043","self":"https://issues.apache.org/jira/rest/api/2/issue/12716043","key":"DERBY-6581","fields":{"summary":"Document simple case syntax","description":"We should document the new syntax added in DERBY-1576 in the CASE expression topic of the reference manual.\r\n\r\nThe variant that is currently documented in the CASE expression topic, is called \"searched case\". It should still be documented. In addition, the topic should show this syntax for \"simple case\":\r\n\r\n{noformat}\r\nCASE valueExpression\r\n  WHEN whenOperand [, whenOperand ]* THEN thenExpression\r\n  [ WHEN whenOperand [, whenOperand ]* THEN thenExpression ]*\r\n  [ ELSE elseExpression ]\r\nEND\r\n{noformat}\r\n\r\n{{whenOperand}} could be defined like this:\r\n\r\n{noformat}\r\nvalueExpression |\r\n{ < | = | > | <= | >= | <> } expression |\r\nIS [ NOT ] NULL |\r\n[ NOT ] LIKE characterExpression WithWildCard [ ESCAPE 'escapeCharacter'] |\r\n[ NOT ] BETWEEN expression AND expression |\r\n[ NOT ] IN tableSubquery |\r\n[ NOT ] IN ( expression [, expression ]* ) |\r\ncomparisonOperator { ALL | ANY | SOME } tableSubquery\r\n{noformat}\r\n\r\nMost of this syntax is copied from the table in the Boolean expressions topic, so we may try to find some way to refactor it to avoid repetition here.\r\n\r\nThere are some inconsistencies in this definition of {{whenOperand}}. One is that I think all occurrences of \"expression\" could be replaced with \"valueExpression\". Another is that line 2 lists all comparison operators explicitly, whereas line 8 uses the shorthand \"comparisonOperator\". I suppose both should do the same. If we choose to use the shorthand, we should probably also define comparisonOperator somewhere.\r\n\r\nExamples:\r\n\r\n{code:sql}\r\n-- returns 'two'\r\nVALUES\r\n  CASE 1+1\r\n    WHEN 1 THEN 'one'\r\n    WHEN 2 THEN 'two'\r\n    ELSE 'many'\r\n  END\r\n\r\n-- returns 'odd', 'even', 'big'\r\nSELECT\r\n  CASE X\r\n    WHEN 1, 3, 5, 7, 9 THEN 'odd'\r\n    WHEN 2, 4, 6, 8, 10 THEN 'even'\r\n    ELSE 'big'\r\n  END\r\nFROM\r\n  (VALUES 5, 8, 12) AS V(X)\r\n\r\n-- returns ('long', 182), ('medium', 340), ('short', 20)\r\nSELECT DISTANCE, COUNT(*)\r\nFROM (SELECT\r\n        CASE MILES\r\n          WHEN < 250 THEN 'short'\r\n          WHEN BETWEEN 250 AND 2000 THEN 'medium'\r\n          WHEN > 2000 THEN 'long'\r\n        END\r\n      FROM FLIGHTS) AS F(DISTANCE)\r\nGROUP BY DISTANCE\r\n{code}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12715747","self":"https://issues.apache.org/jira/rest/api/2/issue/12715747","key":"DERBY-6580","fields":{"summary":"Document the new SYSCS_UTIL.SYSCS_PEEK_AT_IDENTITY function","description":"The work on DERBY-6542 has introduced a new system function. This function is used to check the next value which will be issued for an identity column. It is similar to the existing SYSCS_UTIL.SYSCS_PEEK_AT_SEQUENCE function for sequences. We need to document this new function:\r\n\r\nBIGINT SYSCS_UTIL.SYSCS_PEEK_AT_IDENTITY\r\n( IN SCHEMANAME VARCHAR(128), IN TABLENAME VARCHAR(128) )\r\n\r\nAll users have permission to run this function.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12715491","self":"https://issues.apache.org/jira/rest/api/2/issue/12715491","key":"DERBY-6579","fields":{"summary":"Changing the step value for an identity column incorrectly changes its current value.","description":"According to the SQL Standard, identity columns are supposed to behave as though they are backed by internal sequence generators. This means that the current value of an identity column is not affected by whether you delete rows from the table. Deleting rows from a table does not change the internal state of the sequence generator.\r\n\r\nSequence generators have the following state:\r\n\r\nminValue\r\nmaxValue\r\ninitValue\r\ncurrentValue\r\nstep\r\ncycleOrNot\r\n\r\nThe NEXT VALUE FOR expression causes the sequence generator to do two things:\r\n\r\n1) Return currentValue\r\n\r\n2) Set currentValue = currentValue + step\r\n\r\nYou can use ALTER TABLE to change the step value of an identity column's internal sequence generator:\r\n\r\nALTER TABLE t1 ALTER b SET INCREMENT BY 100;\r\n\r\nThis is not supposed to affect the current value of the sequence generator which backs the identity column. However, Derby resets currentValue as follows:\r\n\r\ncurrentValue = ( SELECT MAX( b ) FROM t1 ) + newStep\r\n\r\nThis behavior is deliberate (see AlterTableConstantAction.getColumnMax()) and has been part of Derby since it was open-sourced.\r\n\r\nThe following script shows this behavior:\r\n\r\n{noformat}\r\nij version 10.11\r\nij> connect 'jdbc:derby:memory:db;create=true';\r\nij> create table t1( a int, b int generated always as identity );\r\n0 rows inserted/updated/deleted\r\nij> insert into t1( a ) values ( 100 ), ( 200 );\r\n2 rows inserted/updated/deleted\r\nij> select * from t1 order by a;\r\nA          |B          \r\n-----------------------\r\n100        |1          \r\n200        |2          \r\n\r\n2 rows selected\r\nij> alter table t1 alter b set increment by 10;\r\n0 rows inserted/updated/deleted\r\nij> -- the next values of the identity column should be 3 then 13. but they are 12 and 22\r\ninsert into t1( a ) values ( 300 ), ( 400 );\r\n2 rows inserted/updated/deleted\r\nij> select * from t1 order by a;\r\nA          |B          \r\n-----------------------\r\n100        |1          \r\n200        |2          \r\n300        |12         \r\n400        |22         \r\n\r\n4 rows selected\r\nij> --\r\n-- Try the same experiment but delete the last row.\r\n--\r\n\r\ndrop table t1;\r\n0 rows inserted/updated/deleted\r\nij> create table t1( a int, b int generated always as identity );\r\n0 rows inserted/updated/deleted\r\nij> insert into t1( a ) values ( 100 ), ( 200 );\r\n2 rows inserted/updated/deleted\r\nij> select * from t1 order by a;\r\nA          |B          \r\n-----------------------\r\n100        |1          \r\n200        |2          \r\n\r\n2 rows selected\r\nij> delete from t1 where a = 200;\r\n1 row inserted/updated/deleted\r\nij> alter table t1 alter b set increment by 10;\r\n0 rows inserted/updated/deleted\r\nij> -- deleting rows changes the behavior of the insert.\r\n-- now the next values are 11 and 21.\r\ninsert into t1( a ) values ( 300 ), ( 400 );\r\n2 rows inserted/updated/deleted\r\nij> select * from t1 order by a;\r\nA          |B          \r\n-----------------------\r\n100        |1          \r\n300        |11         \r\n400        |21         \r\n\r\n3 rows selected\r\n{noformat}\r\n\r\nI think that this divergence from the Standard is a minor edge-case. I am not inclined to fix it. However, I am also not inclined to preserve this divergence from the Standard when we start using real sequence generators to implement identity columns (see DERBY-6542).\r\n\r\nPlease speak up if you think that this bug should be fixed for identity columns in soft-upgraded databases or if you think that the new-style identity columns should preserve this divergence from the Standard.\r\n"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12714759","self":"https://issues.apache.org/jira/rest/api/2/issue/12714759","key":"DERBY-6578","fields":{"summary":"Assert failure when retrying failed ADD COLUMN statement","description":"I see an assert failure when running this script:\r\n\r\n{code:sql}\r\nconnect 'jdbc:derby:memory:db;create=true';\r\nautocommit off;\r\ncreate table t(x int);\r\ninsert into t values 1, 2;\r\n-- the next statement fails because of overflow (expected)\r\nalter table t add column y smallint generated always as (30000 * x);\r\n-- the next statement fails runs into an assert failure\r\nalter table t add column z int;\r\n{code}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12714167","self":"https://issues.apache.org/jira/rest/api/2/issue/12714167","key":"DERBY-6577","fields":{"summary":"Quantified comparison returns wrong result in CASE, COALESCE, IN and BETWEEN","description":"I'm seeing this on head of trunk:\r\n\r\n{noformat}\r\nij> select c, c = all (values 'Y'), case when c = all (values 'Y') then true else false end from (values 'Y', 'N') v(c);\r\nC|2    |3    \r\n-------------\r\nY|true |false\r\nN|false|true \r\n\r\n2 rows selected\r\n{noformat}\r\n\r\nColumn 2 and column 3 should have the same value, but something seems to go wrong when the quantified comparison is used in a CASE expression.\r\n\r\nI'm seeing the expected result on 10.10.2.0, though:\r\n\r\n{noformat}\r\nij> select c, c = all (values 'Y'), case when c = all (values 'Y') then true else false end from (values 'Y', 'N') v(c);\r\nC|2    |3    \r\n-------------\r\nY|true |true \r\nN|false|false\r\n\r\n2 rows selected\r\n{noformat}"}},{"expand":"operations,editmeta,changelog,transitions,renderedFields","id":"12713983","self":"https://issues.apache.org/jira/rest/api/2/issue/12713983","key":"DERBY-6576","fields":{"summary":"A immediate Fk constraint blows up iff its referenced PK is deferred and we modify a duplicate key column","description":"Similar to the issue in DERBY-6559, except here we modify the key in the referenced table. This leads Derby to check for any referencing FK and throw, even if there are other (formerly) duplicate rows that satisfy the FK constraint.\r\n\r\n"}}]}
