M: syntaxError (recognizer:Recognizer<?,?>, offendingSymbol:Object, line:int, charPositionInLine:int, msg:String, e:RecognitionException) 
M: GrammarBasedSearchRule (caseSensitiveSearch:boolean, regExpSearch:boolean) 
M: isValid (caseSensitive:boolean, regExp:boolean, query:String) 
M: isCaseSensitiveSearch) 
M: isRegExpSearch) 
M: getTree) 
M: getQuery) 
M: init (query:String) 
M: applyRule (query:String, bibEntry:BibEntry) 
M: validateSearchStrings (query:String) 
M: build (value:String) 
M: Comparator (field:String, value:String, operator:ComparisonOperator, caseSensitive:boolean, regex:boolean) 
M: compare (entry:BibEntry) 
M: matchFieldKey) 
M: matchFieldValue (content:String) 
M: BibtexSearchVisitor (caseSensitive:boolean, regex:boolean, bibEntry:BibEntry) 
M: comparison (field:String, operator:ComparisonOperator, value:String) 
M: visitStart (ctx:SearchParser.StartContext) 
M: visitComparison (ctx:SearchParser.ComparisonContext) 
M: visitUnaryExpression (ctx:SearchParser.UnaryExpressionContext) 
M: visitParenExpression (ctx:SearchParser.ParenExpressionContext) 
M: visitBinaryExpression (ctx:SearchParser.BinaryExpressionContext) 
V: LOGGER:Log
V: INSTANCE:ThrowingErrorListener
V: caseSensitiveSearch:boolean
V: regExpSearch:boolean
V: tree:ParseTree
V: query:String
V: lexer:SearchLexer
V: parser:SearchParser
V: operator:ComparisonOperator
V: fieldPattern:Pattern
V: valuePattern:Pattern
V: option:int
V: fieldsKeys:Set<String>
V: matchedFieldKeys:List<String>
V: fieldValue:String
V: matcher:Matcher
V: caseSensitive:boolean
V: regex:boolean
V: entry:BibEntry
V: right:String