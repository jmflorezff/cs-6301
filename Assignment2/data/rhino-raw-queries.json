{"id": 1, "title": " Increment/Decrement alters const variables", "description": "Steps to reproduce:\n\nInc/Dec shouldn't have any effects on const variables, but they currently do.\n\nSimple test case with broken behaviour:\njs> function f(){const a=0; a++; return a}\njs> f()\n1\njs> function f(){const a=1; a--; return a}\njs> f()\n0", "doc_ids": [1994, 2005, 3214, 3330, 3359, 3360, 3361, 3362, 3393, 3397, 3398]}
{"id": 2, "title": "Math.IEEEremainder makes ToInt32 slow for non-integer values", "description": "Steps to reproduce:\n\nScriptRuntime.toInt32() uses Math.IEEEremainder() to perform the ToInt32 conversion for non-integer values. Math.IEEEremainder() is somewhat slow compared to the code in vm/NumericConversions.h, so maybe we should just copy over the SpiderMonkey implementation to Rhino. \n\n\nActual results:\n\nMicro-Benchmark:\n(function(r) {\n  var s=Date.now(), r2=+r;\n  for(var i=0;i<r2;++i) 1.1&1;\n  return Date.now() - s\n})(50000000)\n\nWithout patch -> ~4100ms\nWith patch -> ~100ms", "doc_ids": [1603, 1604, 1606]}
{"id": 3, "title": "JSC: \"missing ; after statement\" message prints out for the line after the problem one", "description": "Steps to reproduce:\n\nCreate a simple foo.js:\n\nvar a = 3\nvar b = 4;\n\n\n\nActual results:\n\nWarning was:\n\nwarning: line 2: missing ; after statement\nvar b = 4;\n...^\n\n\nExpected results:\n\nWarned the \"var a = 3\" was missing the semicolon.  I tried monkeying with Parser.java's autoInsertSemicolon() to look at the previous sibling node of pn without any luck.  Using 1.7R4.", "doc_ids": [1428, 1429, 2571]}
{"id": 4, "title": "AST toSource on Hex string literal removes '0x'", "description": "Steps to reproduce:\n\nParsed '0xff;' and then called to source from Rhino's Ast\n\n\nActual results:\n\nff;\n\n\nExpected results:\n\n0xff;", "doc_ids": [1404, 2544]}
{"id": 5, "title": "AST toSource on getter/setter inserting 'function' keyword", "description": "Steps to reproduce:\n\nParsed script with getter/setter logic and printed it out again.\n\n\nActual results:\n\nvar o = {_x: 123, get xfunction() {\n  return this._x;\n}, set xfunction(value) {\n  this._x = value;\n}};\n\n\n\nExpected results:\n\nvar o = {\n  _x: 123,\n  get x() {\n    return this._x;\n  },\n  set x(value) {\n    this._x = value;\n  }\n};", "doc_ids": [650, 1166, 1416]}
